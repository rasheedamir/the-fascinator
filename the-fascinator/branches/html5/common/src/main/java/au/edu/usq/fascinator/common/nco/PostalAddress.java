/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 12:54 PM
 */
package au.edu.usq.fascinator.common.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AddressLocation </li>
 *   <li> Country </li>
 *   <li> ExtendedAddress </li>
 *   <li> Locality </li>
 *   <li> Pobox </li>
 *   <li> Postalcode </li>
 *   <li> Region </li>
 *   <li> StreetAddress </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 12:54 PM
 */
public class PostalAddress extends ContactMedium {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PostalAddress */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PostalAddress", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#addressLocation */
    @SuppressWarnings("hiding")
	public static final URI ADDRESSLOCATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#addressLocation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#country */
    @SuppressWarnings("hiding")
	public static final URI COUNTRY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#country",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#extendedAddress */
    @SuppressWarnings("hiding")
	public static final URI EXTENDEDADDRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#extendedAddress",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#locality */
    @SuppressWarnings("hiding")
	public static final URI LOCALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#locality",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#pobox */
    @SuppressWarnings("hiding")
	public static final URI POBOX = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#pobox",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#postalcode */
    @SuppressWarnings("hiding")
	public static final URI POSTALCODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#postalcode",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#region */
    @SuppressWarnings("hiding")
	public static final URI REGION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#region",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#streetAddress */
    @SuppressWarnings("hiding")
	public static final URI STREETADDRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#streetAddress",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#addressLocation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#country",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#extendedAddress",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#locality",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#pobox",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#postalcode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#region",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#streetAddress",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected PostalAddress ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public PostalAddress ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public PostalAddress ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public PostalAddress ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public PostalAddress ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PostalAddress  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static PostalAddress  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PostalAddress.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PostalAddress).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends PostalAddress> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PostalAddress.class );
	}

    /**
	 * Remove rdf:type PostalAddress from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasPostalAddress' to this PostalAddress instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPostalAddress_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Role.HASPOSTALADDRESS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasPostalAddress' to this PostalAddress instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPostalAddress_Inverse() {
		return Base.getAll_Inverse(this.model, Role.HASPOSTALADDRESS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasPostalAddress' to this PostalAddress instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHasPostalAddress_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Role.HASPOSTALADDRESS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19bbd86 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ADDRESSLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19bbd86 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAddressLocation() {
		return Base.has(this.model, this.getResource(), ADDRESSLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19bbd86 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADDRESSLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19bbd86 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAddressLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADDRESSLOCATION);
	}

     /**
     * Get all values of property AddressLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ADDRESSLOCATION);
	}
	
    /**
     * Get all values of property AddressLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADDRESSLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AddressLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADDRESSLOCATION);
	}

    /**
     * Get all values of property AddressLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AddressLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Point> getAllAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ADDRESSLOCATION, Point.class);
	}
	
    /**
     * Get all values of property AddressLocation as a ReactorResult of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Point> getAllAddressLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADDRESSLOCATION, Point.class);
	}

    /**
     * Get all values of property AddressLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Point> getAllAddressLocation() {
		return Base.getAll(this.model, this.getResource(), ADDRESSLOCATION, Point.class);
	}

    /**
     * Get all values of property AddressLocation as a ReactorResult of Point 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Point> getAllAddressLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSLOCATION, Point.class);
	}
 
    /**
     * Adds a value to property AddressLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Adds a value to property AddressLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAddressLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
    /**
     * Adds a value to property AddressLocation from an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Point value) {
		Base.add(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Adds a value to property AddressLocation from an instance of Point 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAddressLocation(Point value) {
		Base.add(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
  

    /**
     * Sets a value of property AddressLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Sets a value of property AddressLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAddressLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
    /**
     * Sets a value of property AddressLocation from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Point value) {
		Base.set(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Sets a value of property AddressLocation from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAddressLocation(Point value) {
		Base.set(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
  


    /**
     * Removes a value of property AddressLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Removes a value of property AddressLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAddressLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
    /**
     * Removes a value of property AddressLocation given as an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Point value) {
		Base.remove(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Removes a value of property AddressLocation given as an instance of Point 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAddressLocation(Point value) {
		Base.remove(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
  
    /**
     * Removes all values of property AddressLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ADDRESSLOCATION);
	}
	
    /**
     * Removes all values of property AddressLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAddressLocation() {
		Base.removeAll(this.model, this.getResource(), ADDRESSLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a0934 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COUNTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a0934 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCountry() {
		return Base.has(this.model, this.getResource(), COUNTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a0934 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COUNTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a0934 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCountry( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COUNTRY);
	}

     /**
     * Get all values of property Country as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COUNTRY);
	}
	
    /**
     * Get all values of property Country as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COUNTRY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Country as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COUNTRY);
	}

    /**
     * Get all values of property Country as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COUNTRY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Country     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COUNTRY, java.lang.String.class);
	}
	
    /**
     * Get all values of property Country as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCountry_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COUNTRY, java.lang.String.class);
	}

    /**
     * Get all values of property Country     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCountry() {
		return Base.getAll(this.model, this.getResource(), COUNTRY, java.lang.String.class);
	}

    /**
     * Get all values of property Country as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCountry_as() {
		return Base.getAll_as(this.model, this.getResource(), COUNTRY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Country as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Adds a value to property Country as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCountry( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COUNTRY, value);
	}
    /**
     * Adds a value to property Country from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Adds a value to property Country from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCountry(java.lang.String value) {
		Base.add(this.model, this.getResource(), COUNTRY, value);
	}
  

    /**
     * Sets a value of property Country from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Sets a value of property Country from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCountry( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COUNTRY, value);
	}
    /**
     * Sets a value of property Country from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Sets a value of property Country from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCountry(java.lang.String value) {
		Base.set(this.model, this.getResource(), COUNTRY, value);
	}
  


    /**
     * Removes a value of property Country as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Removes a value of property Country as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCountry( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COUNTRY, value);
	}
    /**
     * Removes a value of property Country given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Removes a value of property Country given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCountry(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COUNTRY, value);
	}
  
    /**
     * Removes all values of property Country     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COUNTRY);
	}
	
    /**
     * Removes all values of property Country	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCountry() {
		Base.removeAll(this.model, this.getResource(), COUNTRY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b340a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExtendedAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXTENDEDADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b340a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExtendedAddress() {
		return Base.has(this.model, this.getResource(), EXTENDEDADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b340a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExtendedAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXTENDEDADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b340a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExtendedAddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXTENDEDADDRESS);
	}

     /**
     * Get all values of property ExtendedAddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExtendedAddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXTENDEDADDRESS);
	}
	
    /**
     * Get all values of property ExtendedAddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExtendedAddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXTENDEDADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExtendedAddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExtendedAddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXTENDEDADDRESS);
	}

    /**
     * Get all values of property ExtendedAddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExtendedAddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXTENDEDADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExtendedAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExtendedAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXTENDEDADDRESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property ExtendedAddress as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExtendedAddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXTENDEDADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property ExtendedAddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExtendedAddress() {
		return Base.getAll(this.model, this.getResource(), EXTENDEDADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property ExtendedAddress as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExtendedAddress_as() {
		return Base.getAll_as(this.model, this.getResource(), EXTENDEDADDRESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ExtendedAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExtendedAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXTENDEDADDRESS, value);
	}
	
    /**
     * Adds a value to property ExtendedAddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExtendedAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXTENDEDADDRESS, value);
	}
    /**
     * Adds a value to property ExtendedAddress from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExtendedAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXTENDEDADDRESS, value);
	}
	
    /**
     * Adds a value to property ExtendedAddress from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExtendedAddress(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXTENDEDADDRESS, value);
	}
  

    /**
     * Sets a value of property ExtendedAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExtendedAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXTENDEDADDRESS, value);
	}
	
    /**
     * Sets a value of property ExtendedAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExtendedAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXTENDEDADDRESS, value);
	}
    /**
     * Sets a value of property ExtendedAddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExtendedAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXTENDEDADDRESS, value);
	}
	
    /**
     * Sets a value of property ExtendedAddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExtendedAddress(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXTENDEDADDRESS, value);
	}
  


    /**
     * Removes a value of property ExtendedAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExtendedAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXTENDEDADDRESS, value);
	}
	
    /**
     * Removes a value of property ExtendedAddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExtendedAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXTENDEDADDRESS, value);
	}
    /**
     * Removes a value of property ExtendedAddress given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExtendedAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXTENDEDADDRESS, value);
	}
	
    /**
     * Removes a value of property ExtendedAddress given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExtendedAddress(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXTENDEDADDRESS, value);
	}
  
    /**
     * Removes all values of property ExtendedAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExtendedAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXTENDEDADDRESS);
	}
	
    /**
     * Removes all values of property ExtendedAddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExtendedAddress() {
		Base.removeAll(this.model, this.getResource(), EXTENDEDADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1291479 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLocality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOCALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1291479 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLocality() {
		return Base.has(this.model, this.getResource(), LOCALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1291479 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLocality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOCALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1291479 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLocality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOCALITY);
	}

     /**
     * Get all values of property Locality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLocality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOCALITY);
	}
	
    /**
     * Get all values of property Locality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLocality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Locality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLocality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOCALITY);
	}

    /**
     * Get all values of property Locality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLocality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOCALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Locality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLocality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOCALITY, java.lang.String.class);
	}
	
    /**
     * Get all values of property Locality as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLocality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCALITY, java.lang.String.class);
	}

    /**
     * Get all values of property Locality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLocality() {
		return Base.getAll(this.model, this.getResource(), LOCALITY, java.lang.String.class);
	}

    /**
     * Get all values of property Locality as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLocality_as() {
		return Base.getAll_as(this.model, this.getResource(), LOCALITY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Locality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLocality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOCALITY, value);
	}
	
    /**
     * Adds a value to property Locality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLocality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOCALITY, value);
	}
    /**
     * Adds a value to property Locality from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLocality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LOCALITY, value);
	}
	
    /**
     * Adds a value to property Locality from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLocality(java.lang.String value) {
		Base.add(this.model, this.getResource(), LOCALITY, value);
	}
  

    /**
     * Sets a value of property Locality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLocality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOCALITY, value);
	}
	
    /**
     * Sets a value of property Locality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLocality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOCALITY, value);
	}
    /**
     * Sets a value of property Locality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLocality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LOCALITY, value);
	}
	
    /**
     * Sets a value of property Locality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLocality(java.lang.String value) {
		Base.set(this.model, this.getResource(), LOCALITY, value);
	}
  


    /**
     * Removes a value of property Locality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLocality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOCALITY, value);
	}
	
    /**
     * Removes a value of property Locality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLocality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOCALITY, value);
	}
    /**
     * Removes a value of property Locality given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLocality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LOCALITY, value);
	}
	
    /**
     * Removes a value of property Locality given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLocality(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LOCALITY, value);
	}
  
    /**
     * Removes all values of property Locality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLocality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOCALITY);
	}
	
    /**
     * Removes all values of property Locality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLocality() {
		Base.removeAll(this.model, this.getResource(), LOCALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@504f3c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPobox(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POBOX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@504f3c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPobox() {
		return Base.has(this.model, this.getResource(), POBOX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@504f3c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPobox(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POBOX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@504f3c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPobox( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POBOX);
	}

     /**
     * Get all values of property Pobox as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPobox_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POBOX);
	}
	
    /**
     * Get all values of property Pobox as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPobox_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POBOX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pobox as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPobox_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POBOX);
	}

    /**
     * Get all values of property Pobox as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPobox_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POBOX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pobox     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPobox(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POBOX, java.lang.String.class);
	}
	
    /**
     * Get all values of property Pobox as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPobox_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POBOX, java.lang.String.class);
	}

    /**
     * Get all values of property Pobox     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPobox() {
		return Base.getAll(this.model, this.getResource(), POBOX, java.lang.String.class);
	}

    /**
     * Get all values of property Pobox as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPobox_as() {
		return Base.getAll_as(this.model, this.getResource(), POBOX, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Pobox as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPobox( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POBOX, value);
	}
	
    /**
     * Adds a value to property Pobox as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPobox( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POBOX, value);
	}
    /**
     * Adds a value to property Pobox from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPobox(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, POBOX, value);
	}
	
    /**
     * Adds a value to property Pobox from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPobox(java.lang.String value) {
		Base.add(this.model, this.getResource(), POBOX, value);
	}
  

    /**
     * Sets a value of property Pobox from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPobox( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POBOX, value);
	}
	
    /**
     * Sets a value of property Pobox from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPobox( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POBOX, value);
	}
    /**
     * Sets a value of property Pobox from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPobox(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, POBOX, value);
	}
	
    /**
     * Sets a value of property Pobox from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPobox(java.lang.String value) {
		Base.set(this.model, this.getResource(), POBOX, value);
	}
  


    /**
     * Removes a value of property Pobox as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePobox( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POBOX, value);
	}
	
    /**
     * Removes a value of property Pobox as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePobox( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POBOX, value);
	}
    /**
     * Removes a value of property Pobox given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePobox(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, POBOX, value);
	}
	
    /**
     * Removes a value of property Pobox given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePobox(java.lang.String value) {
		Base.remove(this.model, this.getResource(), POBOX, value);
	}
  
    /**
     * Removes all values of property Pobox     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPobox( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POBOX);
	}
	
    /**
     * Removes all values of property Pobox	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPobox() {
		Base.removeAll(this.model, this.getResource(), POBOX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d9c921 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POSTALCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d9c921 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPostalcode() {
		return Base.has(this.model, this.getResource(), POSTALCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d9c921 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POSTALCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d9c921 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPostalcode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POSTALCODE);
	}

     /**
     * Get all values of property Postalcode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POSTALCODE);
	}
	
    /**
     * Get all values of property Postalcode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSTALCODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Postalcode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POSTALCODE);
	}

    /**
     * Get all values of property Postalcode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POSTALCODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Postalcode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POSTALCODE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Postalcode as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPostalcode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSTALCODE, java.lang.String.class);
	}

    /**
     * Get all values of property Postalcode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPostalcode() {
		return Base.getAll(this.model, this.getResource(), POSTALCODE, java.lang.String.class);
	}

    /**
     * Get all values of property Postalcode as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPostalcode_as() {
		return Base.getAll_as(this.model, this.getResource(), POSTALCODE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Postalcode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Adds a value to property Postalcode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPostalcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POSTALCODE, value);
	}
    /**
     * Adds a value to property Postalcode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Adds a value to property Postalcode from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPostalcode(java.lang.String value) {
		Base.add(this.model, this.getResource(), POSTALCODE, value);
	}
  

    /**
     * Sets a value of property Postalcode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Sets a value of property Postalcode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPostalcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POSTALCODE, value);
	}
    /**
     * Sets a value of property Postalcode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Sets a value of property Postalcode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPostalcode(java.lang.String value) {
		Base.set(this.model, this.getResource(), POSTALCODE, value);
	}
  


    /**
     * Removes a value of property Postalcode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Removes a value of property Postalcode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePostalcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POSTALCODE, value);
	}
    /**
     * Removes a value of property Postalcode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Removes a value of property Postalcode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePostalcode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), POSTALCODE, value);
	}
  
    /**
     * Removes all values of property Postalcode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POSTALCODE);
	}
	
    /**
     * Removes all values of property Postalcode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPostalcode() {
		Base.removeAll(this.model, this.getResource(), POSTALCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2c65b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRegion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REGION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2c65b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRegion() {
		return Base.has(this.model, this.getResource(), REGION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2c65b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRegion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REGION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2c65b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRegion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REGION);
	}

     /**
     * Get all values of property Region as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRegion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REGION);
	}
	
    /**
     * Get all values of property Region as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRegion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REGION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Region as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRegion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REGION);
	}

    /**
     * Get all values of property Region as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRegion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REGION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Region     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRegion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REGION, java.lang.String.class);
	}
	
    /**
     * Get all values of property Region as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRegion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REGION, java.lang.String.class);
	}

    /**
     * Get all values of property Region     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRegion() {
		return Base.getAll(this.model, this.getResource(), REGION, java.lang.String.class);
	}

    /**
     * Get all values of property Region as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRegion_as() {
		return Base.getAll_as(this.model, this.getResource(), REGION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Region as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRegion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REGION, value);
	}
	
    /**
     * Adds a value to property Region as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRegion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REGION, value);
	}
    /**
     * Adds a value to property Region from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRegion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, REGION, value);
	}
	
    /**
     * Adds a value to property Region from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRegion(java.lang.String value) {
		Base.add(this.model, this.getResource(), REGION, value);
	}
  

    /**
     * Sets a value of property Region from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRegion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REGION, value);
	}
	
    /**
     * Sets a value of property Region from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRegion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REGION, value);
	}
    /**
     * Sets a value of property Region from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRegion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, REGION, value);
	}
	
    /**
     * Sets a value of property Region from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRegion(java.lang.String value) {
		Base.set(this.model, this.getResource(), REGION, value);
	}
  


    /**
     * Removes a value of property Region as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRegion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REGION, value);
	}
	
    /**
     * Removes a value of property Region as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRegion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REGION, value);
	}
    /**
     * Removes a value of property Region given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRegion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, REGION, value);
	}
	
    /**
     * Removes a value of property Region given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRegion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), REGION, value);
	}
  
    /**
     * Removes all values of property Region     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRegion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REGION);
	}
	
    /**
     * Removes all values of property Region	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRegion() {
		Base.removeAll(this.model, this.getResource(), REGION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec849e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStreetAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STREETADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec849e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStreetAddress() {
		return Base.has(this.model, this.getResource(), STREETADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec849e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStreetAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STREETADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec849e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStreetAddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STREETADDRESS);
	}

     /**
     * Get all values of property StreetAddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStreetAddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STREETADDRESS);
	}
	
    /**
     * Get all values of property StreetAddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStreetAddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STREETADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property StreetAddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStreetAddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STREETADDRESS);
	}

    /**
     * Get all values of property StreetAddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStreetAddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STREETADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property StreetAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllStreetAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STREETADDRESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property StreetAddress as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllStreetAddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STREETADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property StreetAddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllStreetAddress() {
		return Base.getAll(this.model, this.getResource(), STREETADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property StreetAddress as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllStreetAddress_as() {
		return Base.getAll_as(this.model, this.getResource(), STREETADDRESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property StreetAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addStreetAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STREETADDRESS, value);
	}
	
    /**
     * Adds a value to property StreetAddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addStreetAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STREETADDRESS, value);
	}
    /**
     * Adds a value to property StreetAddress from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addStreetAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, STREETADDRESS, value);
	}
	
    /**
     * Adds a value to property StreetAddress from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addStreetAddress(java.lang.String value) {
		Base.add(this.model, this.getResource(), STREETADDRESS, value);
	}
  

    /**
     * Sets a value of property StreetAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStreetAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STREETADDRESS, value);
	}
	
    /**
     * Sets a value of property StreetAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStreetAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STREETADDRESS, value);
	}
    /**
     * Sets a value of property StreetAddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStreetAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, STREETADDRESS, value);
	}
	
    /**
     * Sets a value of property StreetAddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStreetAddress(java.lang.String value) {
		Base.set(this.model, this.getResource(), STREETADDRESS, value);
	}
  


    /**
     * Removes a value of property StreetAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStreetAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STREETADDRESS, value);
	}
	
    /**
     * Removes a value of property StreetAddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStreetAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STREETADDRESS, value);
	}
    /**
     * Removes a value of property StreetAddress given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStreetAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, STREETADDRESS, value);
	}
	
    /**
     * Removes a value of property StreetAddress given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStreetAddress(java.lang.String value) {
		Base.remove(this.model, this.getResource(), STREETADDRESS, value);
	}
  
    /**
     * Removes all values of property StreetAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStreetAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STREETADDRESS);
	}
	
    /**
     * Removes all values of property StreetAddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStreetAddress() {
		Base.removeAll(this.model, this.getResource(), STREETADDRESS);
	}
 }