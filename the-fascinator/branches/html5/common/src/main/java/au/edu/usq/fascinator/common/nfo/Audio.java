/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 11:49 AM
 */
package au.edu.usq.fascinator.common.nfo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BitsPerSample </li>
 *   <li> Channels </li>
 *   <li> SampleCount </li>
 *   <li> SampleRate </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 11:49 AM
 */
public class Audio extends Media {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample */
    @SuppressWarnings("hiding")
	public static final URI BITSPERSAMPLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels */
    @SuppressWarnings("hiding")
	public static final URI CHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount */
    @SuppressWarnings("hiding")
	public static final URI SAMPLECOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate */
    @SuppressWarnings("hiding")
	public static final URI SAMPLERATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Audio ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Audio ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Audio ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Audio ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Audio ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Audio  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Audio  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Audio.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Audio> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Audio.class );
	}

    /**
	 * Remove rdf:type Audio from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@546169 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@546169 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBitsPerSample() {
		return Base.has(this.model, this.getResource(), BITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@546169 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@546169 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBitsPerSample( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BITSPERSAMPLE);
	}

     /**
     * Get all values of property BitsPerSample as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BITSPERSAMPLE);
	}
	
    /**
     * Get all values of property BitsPerSample as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BITSPERSAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BitsPerSample as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BITSPERSAMPLE);
	}

    /**
     * Get all values of property BitsPerSample as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BITSPERSAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BitsPerSample     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BITSPERSAMPLE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property BitsPerSample as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBitsPerSample_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BITSPERSAMPLE, java.lang.Integer.class);
	}

    /**
     * Get all values of property BitsPerSample     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBitsPerSample() {
		return Base.getAll(this.model, this.getResource(), BITSPERSAMPLE, java.lang.Integer.class);
	}

    /**
     * Get all values of property BitsPerSample as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBitsPerSample_as() {
		return Base.getAll_as(this.model, this.getResource(), BITSPERSAMPLE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property BitsPerSample as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Adds a value to property BitsPerSample as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
    /**
     * Adds a value to property BitsPerSample from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Adds a value to property BitsPerSample from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBitsPerSample(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
  

    /**
     * Sets a value of property BitsPerSample from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Sets a value of property BitsPerSample from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
    /**
     * Sets a value of property BitsPerSample from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Sets a value of property BitsPerSample from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBitsPerSample(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
  


    /**
     * Removes a value of property BitsPerSample as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Removes a value of property BitsPerSample as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
    /**
     * Removes a value of property BitsPerSample given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Removes a value of property BitsPerSample given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBitsPerSample(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
  
    /**
     * Removes all values of property BitsPerSample     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BITSPERSAMPLE);
	}
	
    /**
     * Removes all values of property BitsPerSample	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBitsPerSample() {
		Base.removeAll(this.model, this.getResource(), BITSPERSAMPLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@101ea1e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@101ea1e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChannels() {
		return Base.has(this.model, this.getResource(), CHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@101ea1e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@101ea1e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHANNELS);
	}

     /**
     * Get all values of property Channels as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHANNELS);
	}
	
    /**
     * Get all values of property Channels as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChannels_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Channels as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChannels_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHANNELS);
	}

    /**
     * Get all values of property Channels as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChannels_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Channels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Channels as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllChannels_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Channels     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllChannels() {
		return Base.getAll(this.model, this.getResource(), CHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Channels as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllChannels_as() {
		return Base.getAll_as(this.model, this.getResource(), CHANNELS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Channels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHANNELS, value);
	}
	
    /**
     * Adds a value to property Channels as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHANNELS, value);
	}
    /**
     * Adds a value to property Channels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, CHANNELS, value);
	}
	
    /**
     * Adds a value to property Channels from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChannels(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), CHANNELS, value);
	}
  

    /**
     * Sets a value of property Channels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHANNELS, value);
	}
	
    /**
     * Sets a value of property Channels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHANNELS, value);
	}
    /**
     * Sets a value of property Channels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, CHANNELS, value);
	}
	
    /**
     * Sets a value of property Channels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), CHANNELS, value);
	}
  


    /**
     * Removes a value of property Channels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHANNELS, value);
	}
	
    /**
     * Removes a value of property Channels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHANNELS, value);
	}
    /**
     * Removes a value of property Channels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, CHANNELS, value);
	}
	
    /**
     * Removes a value of property Channels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), CHANNELS, value);
	}
  
    /**
     * Removes all values of property Channels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHANNELS);
	}
	
    /**
     * Removes all values of property Channels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChannels() {
		Base.removeAll(this.model, this.getResource(), CHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1756456 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSampleCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SAMPLECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1756456 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSampleCount() {
		return Base.has(this.model, this.getResource(), SAMPLECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1756456 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSampleCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SAMPLECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1756456 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSampleCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SAMPLECOUNT);
	}

     /**
     * Get all values of property SampleCount as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSampleCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMPLECOUNT);
	}
	
    /**
     * Get all values of property SampleCount as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSampleCount_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMPLECOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SampleCount as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSampleCount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMPLECOUNT);
	}

    /**
     * Get all values of property SampleCount as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSampleCount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMPLECOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SampleCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSampleCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMPLECOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property SampleCount as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSampleCount_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMPLECOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property SampleCount     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSampleCount() {
		return Base.getAll(this.model, this.getResource(), SAMPLECOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property SampleCount as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSampleCount_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMPLECOUNT, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property SampleCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSampleCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMPLECOUNT, value);
	}
	
    /**
     * Adds a value to property SampleCount as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSampleCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMPLECOUNT, value);
	}
    /**
     * Adds a value to property SampleCount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSampleCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, SAMPLECOUNT, value);
	}
	
    /**
     * Adds a value to property SampleCount from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSampleCount(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), SAMPLECOUNT, value);
	}
  

    /**
     * Sets a value of property SampleCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSampleCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMPLECOUNT, value);
	}
	
    /**
     * Sets a value of property SampleCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSampleCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMPLECOUNT, value);
	}
    /**
     * Sets a value of property SampleCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSampleCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SAMPLECOUNT, value);
	}
	
    /**
     * Sets a value of property SampleCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSampleCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SAMPLECOUNT, value);
	}
  


    /**
     * Removes a value of property SampleCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSampleCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMPLECOUNT, value);
	}
	
    /**
     * Removes a value of property SampleCount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSampleCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMPLECOUNT, value);
	}
    /**
     * Removes a value of property SampleCount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSampleCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SAMPLECOUNT, value);
	}
	
    /**
     * Removes a value of property SampleCount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSampleCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SAMPLECOUNT, value);
	}
  
    /**
     * Removes all values of property SampleCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSampleCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMPLECOUNT);
	}
	
    /**
     * Removes all values of property SampleCount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSampleCount() {
		Base.removeAll(this.model, this.getResource(), SAMPLECOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ebcd0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSampleRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SAMPLERATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ebcd0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSampleRate() {
		return Base.has(this.model, this.getResource(), SAMPLERATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ebcd0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSampleRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SAMPLERATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ebcd0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSampleRate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SAMPLERATE);
	}

     /**
     * Get all values of property SampleRate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSampleRate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMPLERATE);
	}
	
    /**
     * Get all values of property SampleRate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSampleRate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMPLERATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SampleRate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSampleRate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMPLERATE);
	}

    /**
     * Get all values of property SampleRate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSampleRate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMPLERATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SampleRate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllSampleRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMPLERATE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property SampleRate as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllSampleRate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMPLERATE, java.lang.Float.class);
	}

    /**
     * Get all values of property SampleRate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllSampleRate() {
		return Base.getAll(this.model, this.getResource(), SAMPLERATE, java.lang.Float.class);
	}

    /**
     * Get all values of property SampleRate as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllSampleRate_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMPLERATE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property SampleRate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSampleRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMPLERATE, value);
	}
	
    /**
     * Adds a value to property SampleRate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSampleRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMPLERATE, value);
	}
    /**
     * Adds a value to property SampleRate from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSampleRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, SAMPLERATE, value);
	}
	
    /**
     * Adds a value to property SampleRate from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSampleRate(java.lang.Float value) {
		Base.add(this.model, this.getResource(), SAMPLERATE, value);
	}
  

    /**
     * Sets a value of property SampleRate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSampleRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMPLERATE, value);
	}
	
    /**
     * Sets a value of property SampleRate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSampleRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMPLERATE, value);
	}
    /**
     * Sets a value of property SampleRate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSampleRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, SAMPLERATE, value);
	}
	
    /**
     * Sets a value of property SampleRate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSampleRate(java.lang.Float value) {
		Base.set(this.model, this.getResource(), SAMPLERATE, value);
	}
  


    /**
     * Removes a value of property SampleRate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSampleRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMPLERATE, value);
	}
	
    /**
     * Removes a value of property SampleRate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSampleRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMPLERATE, value);
	}
    /**
     * Removes a value of property SampleRate given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSampleRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, SAMPLERATE, value);
	}
	
    /**
     * Removes a value of property SampleRate given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSampleRate(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), SAMPLERATE, value);
	}
  
    /**
     * Removes all values of property SampleRate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSampleRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMPLERATE);
	}
	
    /**
     * Removes all values of property SampleRate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSampleRate() {
		Base.removeAll(this.model, this.getResource(), SAMPLERATE);
	}
 }