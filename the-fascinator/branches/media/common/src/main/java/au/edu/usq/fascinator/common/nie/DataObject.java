/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 1:47 PM
 */
package au.edu.usq.fascinator.common.nie;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ByteSize </li>
 *   <li> Created </li>
 *   <li> DataSource </li>
 *   <li> InterpretedAs </li>
 *   <li> IsPartOf </li>
 *   <li> LastRefreshed </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 1:47 PM
 */
public class DataObject extends Thing {

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject", false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize */
    @SuppressWarnings("hiding")
	public static final URI BYTESIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created */
    @SuppressWarnings("hiding")
	public static final URI CREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource */
    @SuppressWarnings("hiding")
	public static final URI DATASOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs */
    @SuppressWarnings("hiding")
	public static final URI INTERPRETEDAS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf */
    @SuppressWarnings("hiding")
	public static final URI ISPARTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed */
    @SuppressWarnings("hiding")
	public static final URI LASTREFRESHED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected DataObject ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public DataObject ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public DataObject ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public DataObject ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public DataObject ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of DataObject  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static DataObject  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, DataObject.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends DataObject> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, DataObject.class );
	}

    /**
	 * Remove rdf:type DataObject from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Depends' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDepends_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DEPENDS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Depends' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDepends_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DEPENDS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Depends' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDepends_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DEPENDS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasPart' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.HASPART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasPart' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.HASPART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasPart' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.HASPART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsStoredAs' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsStoredAs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.ISSTOREDAS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsStoredAs' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsStoredAs_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.ISSTOREDAS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsStoredAs' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsStoredAs_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.ISSTOREDAS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Links' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLinks_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.LINKS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Links' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLinks_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.LINKS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Links' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLinks_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.LINKS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RelatedTo' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelatedTo_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.RELATEDTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RelatedTo' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelatedTo_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.RELATEDTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RelatedTo' to this DataObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRelatedTo_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.RELATEDTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fcd9a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYTESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fcd9a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByteSize() {
		return Base.has(this.model, this.getResource(), BYTESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fcd9a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYTESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fcd9a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByteSize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYTESIZE);
	}

    /**
     * Get single value of property ByteSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getByteSize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, BYTESIZE);
	}
	
    /**
     * Get single value of property ByteSize as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getByteSize_asNode() {
		return Base.get_asNode(this.model, this.getResource(), BYTESIZE);
	}
     /**
     * Get single value of property ByteSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, BYTESIZE, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property ByteSize  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getByteSize() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), BYTESIZE, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property ByteSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, BYTESIZE, value, 1);
	}
	
    /**
     * Adds a value to property ByteSize as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addByteSize( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BYTESIZE, value, 1);
	}
    /**
     * Adds a value to property ByteSize from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, BYTESIZE, value, 1);
	}
	
    /**
     * Adds a value to property ByteSize from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addByteSize(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BYTESIZE, value, 1);
	}
 
 

    /**
     * Sets a value of property ByteSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Sets a value of property ByteSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByteSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYTESIZE, value);
	}
    /**
     * Sets a value of property ByteSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Sets a value of property ByteSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByteSize(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYTESIZE, value);
	}
  


    /**
     * Removes a value of property ByteSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Removes a value of property ByteSize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByteSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYTESIZE, value);
	}
    /**
     * Removes a value of property ByteSize given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Removes a value of property ByteSize given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByteSize(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYTESIZE, value);
	}
  
    /**
     * Removes all values of property ByteSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYTESIZE);
	}
	
    /**
     * Removes all values of property ByteSize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByteSize() {
		Base.removeAll(this.model, this.getResource(), BYTESIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e40274 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e40274 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreated() {
		return Base.has(this.model, this.getResource(), CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e40274 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e40274 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATED);
	}

     /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATED);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATED);
	}

    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, java.util.Calendar.class);
	}

    /**
     * Get all values of property Created     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllCreated() {
		return Base.getAll(this.model, this.getResource(), CREATED, java.util.Calendar.class);
	}

    /**
     * Get all values of property Created as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Adds a value to property Created from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCreated(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
  

    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Sets a value of property Created from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreated(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
  


    /**
     * Removes a value of property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Removes a value of property Created given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreated(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
  
    /**
     * Removes all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATED);
	}
	
    /**
     * Removes all values of property Created	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreated() {
		Base.removeAll(this.model, this.getResource(), CREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dcb6b4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDataSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATASOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dcb6b4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDataSource() {
		return Base.has(this.model, this.getResource(), DATASOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dcb6b4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDataSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATASOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dcb6b4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDataSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATASOURCE);
	}

     /**
     * Get all values of property DataSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDataSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATASOURCE);
	}
	
    /**
     * Get all values of property DataSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDataSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATASOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DataSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDataSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATASOURCE);
	}

    /**
     * Get all values of property DataSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDataSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATASOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DataSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataSource> getAllDataSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATASOURCE, DataSource.class);
	}
	
    /**
     * Get all values of property DataSource as a ReactorResult of DataSource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataSource> getAllDataSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATASOURCE, DataSource.class);
	}

    /**
     * Get all values of property DataSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataSource> getAllDataSource() {
		return Base.getAll(this.model, this.getResource(), DATASOURCE, DataSource.class);
	}

    /**
     * Get all values of property DataSource as a ReactorResult of DataSource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataSource> getAllDataSource_as() {
		return Base.getAll_as(this.model, this.getResource(), DATASOURCE, DataSource.class);
	}
 
    /**
     * Adds a value to property DataSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDataSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATASOURCE, value);
	}
	
    /**
     * Adds a value to property DataSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDataSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATASOURCE, value);
	}
    /**
     * Adds a value to property DataSource from an instance of DataSource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDataSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataSource value) {
		Base.add(model, instanceResource, DATASOURCE, value);
	}
	
    /**
     * Adds a value to property DataSource from an instance of DataSource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDataSource(DataSource value) {
		Base.add(this.model, this.getResource(), DATASOURCE, value);
	}
  

    /**
     * Sets a value of property DataSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDataSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATASOURCE, value);
	}
	
    /**
     * Sets a value of property DataSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDataSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATASOURCE, value);
	}
    /**
     * Sets a value of property DataSource from an instance of DataSource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDataSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataSource value) {
		Base.set(model, instanceResource, DATASOURCE, value);
	}
	
    /**
     * Sets a value of property DataSource from an instance of DataSource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDataSource(DataSource value) {
		Base.set(this.model, this.getResource(), DATASOURCE, value);
	}
  


    /**
     * Removes a value of property DataSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeDataSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, DATASOURCE, value, -1);
	}
	
    /**
     * Removes a value of property DataSource as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeDataSource( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), DATASOURCE, value, -1);
	}
    /**
     * Removes a value of property DataSource from an instance of DataSource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeDataSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataSource value)
    throws CardinalityException {
		Base.remove(model, instanceResource, DATASOURCE, value, -1);
	}
	
    /**
     * Removes a value of property DataSource from an instance of DataSource 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeDataSource(DataSource value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), DATASOURCE, value, -1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83e35b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInterpretedAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERPRETEDAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83e35b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInterpretedAs() {
		return Base.has(this.model, this.getResource(), INTERPRETEDAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83e35b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInterpretedAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERPRETEDAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83e35b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInterpretedAs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERPRETEDAS);
	}

     /**
     * Get all values of property InterpretedAs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInterpretedAs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERPRETEDAS);
	}
	
    /**
     * Get all values of property InterpretedAs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInterpretedAs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERPRETEDAS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InterpretedAs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInterpretedAs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERPRETEDAS);
	}

    /**
     * Get all values of property InterpretedAs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInterpretedAs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERPRETEDAS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InterpretedAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<InformationElement> getAllInterpretedAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERPRETEDAS, InformationElement.class);
	}
	
    /**
     * Get all values of property InterpretedAs as a ReactorResult of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<InformationElement> getAllInterpretedAs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERPRETEDAS, InformationElement.class);
	}

    /**
     * Get all values of property InterpretedAs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<InformationElement> getAllInterpretedAs() {
		return Base.getAll(this.model, this.getResource(), INTERPRETEDAS, InformationElement.class);
	}

    /**
     * Get all values of property InterpretedAs as a ReactorResult of InformationElement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<InformationElement> getAllInterpretedAs_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERPRETEDAS, InformationElement.class);
	}
 
    /**
     * Adds a value to property InterpretedAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInterpretedAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERPRETEDAS, value);
	}
	
    /**
     * Adds a value to property InterpretedAs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInterpretedAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERPRETEDAS, value);
	}
    /**
     * Adds a value to property InterpretedAs from an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInterpretedAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InformationElement value) {
		Base.add(model, instanceResource, INTERPRETEDAS, value);
	}
	
    /**
     * Adds a value to property InterpretedAs from an instance of InformationElement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInterpretedAs(InformationElement value) {
		Base.add(this.model, this.getResource(), INTERPRETEDAS, value);
	}
  

    /**
     * Sets a value of property InterpretedAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInterpretedAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERPRETEDAS, value);
	}
	
    /**
     * Sets a value of property InterpretedAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInterpretedAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERPRETEDAS, value);
	}
    /**
     * Sets a value of property InterpretedAs from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInterpretedAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InformationElement value) {
		Base.set(model, instanceResource, INTERPRETEDAS, value);
	}
	
    /**
     * Sets a value of property InterpretedAs from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInterpretedAs(InformationElement value) {
		Base.set(this.model, this.getResource(), INTERPRETEDAS, value);
	}
  


    /**
     * Removes a value of property InterpretedAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInterpretedAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERPRETEDAS, value);
	}
	
    /**
     * Removes a value of property InterpretedAs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInterpretedAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERPRETEDAS, value);
	}
    /**
     * Removes a value of property InterpretedAs given as an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInterpretedAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InformationElement value) {
		Base.remove(model, instanceResource, INTERPRETEDAS, value);
	}
	
    /**
     * Removes a value of property InterpretedAs given as an instance of InformationElement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInterpretedAs(InformationElement value) {
		Base.remove(this.model, this.getResource(), INTERPRETEDAS, value);
	}
  
    /**
     * Removes all values of property InterpretedAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInterpretedAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERPRETEDAS);
	}
	
    /**
     * Removes all values of property InterpretedAs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInterpretedAs() {
		Base.removeAll(this.model, this.getResource(), INTERPRETEDAS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12f195 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12f195 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsPartOf() {
		return Base.has(this.model, this.getResource(), ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12f195 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12f195 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISPARTOF);
	}

     /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISPARTOF);
	}
	
    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
	}

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<InformationElement> getAllIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISPARTOF, InformationElement.class);
	}
	
    /**
     * Get all values of property IsPartOf as a ReactorResult of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<InformationElement> getAllIsPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISPARTOF, InformationElement.class);
	}

    /**
     * Get all values of property IsPartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<InformationElement> getAllIsPartOf() {
		return Base.getAll(this.model, this.getResource(), ISPARTOF, InformationElement.class);
	}

    /**
     * Get all values of property IsPartOf as a ReactorResult of InformationElement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<InformationElement> getAllIsPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISPARTOF, InformationElement.class);
	}
 
    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Adds a value to property IsPartOf from an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InformationElement value) {
		Base.add(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Adds a value to property IsPartOf from an instance of InformationElement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsPartOf(InformationElement value) {
		Base.add(this.model, this.getResource(), ISPARTOF, value);
	}
  

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Sets a value of property IsPartOf from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InformationElement value) {
		Base.set(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Sets a value of property IsPartOf from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsPartOf(InformationElement value) {
		Base.set(this.model, this.getResource(), ISPARTOF, value);
	}
  


    /**
     * Removes a value of property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Removes a value of property IsPartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Removes a value of property IsPartOf given as an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InformationElement value) {
		Base.remove(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Removes a value of property IsPartOf given as an instance of InformationElement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsPartOf(InformationElement value) {
		Base.remove(this.model, this.getResource(), ISPARTOF, value);
	}
  
    /**
     * Removes all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISPARTOF);
	}
	
    /**
     * Removes all values of property IsPartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsPartOf() {
		Base.removeAll(this.model, this.getResource(), ISPARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a99eb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLastRefreshed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTREFRESHED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a99eb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLastRefreshed() {
		return Base.has(this.model, this.getResource(), LASTREFRESHED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a99eb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLastRefreshed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTREFRESHED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a99eb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLastRefreshed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTREFRESHED);
	}

    /**
     * Get single value of property LastRefreshed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLastRefreshed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LASTREFRESHED);
	}
	
    /**
     * Get single value of property LastRefreshed as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLastRefreshed_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LASTREFRESHED);
	}
     /**
     * Get single value of property LastRefreshed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getLastRefreshed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, LASTREFRESHED, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property LastRefreshed  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getLastRefreshed() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), LASTREFRESHED, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property LastRefreshed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLastRefreshed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LASTREFRESHED, value, 1);
	}
	
    /**
     * Adds a value to property LastRefreshed as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLastRefreshed( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTREFRESHED, value, 1);
	}
    /**
     * Adds a value to property LastRefreshed from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLastRefreshed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, LASTREFRESHED, value, 1);
	}
	
    /**
     * Adds a value to property LastRefreshed from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLastRefreshed(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTREFRESHED, value, 1);
	}
 
 

    /**
     * Sets a value of property LastRefreshed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLastRefreshed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTREFRESHED, value);
	}
	
    /**
     * Sets a value of property LastRefreshed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLastRefreshed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTREFRESHED, value);
	}
    /**
     * Sets a value of property LastRefreshed from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLastRefreshed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, LASTREFRESHED, value);
	}
	
    /**
     * Sets a value of property LastRefreshed from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLastRefreshed(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), LASTREFRESHED, value);
	}
  


    /**
     * Removes a value of property LastRefreshed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLastRefreshed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTREFRESHED, value);
	}
	
    /**
     * Removes a value of property LastRefreshed as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLastRefreshed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTREFRESHED, value);
	}
    /**
     * Removes a value of property LastRefreshed given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLastRefreshed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, LASTREFRESHED, value);
	}
	
    /**
     * Removes a value of property LastRefreshed given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLastRefreshed(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), LASTREFRESHED, value);
	}
  
    /**
     * Removes all values of property LastRefreshed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLastRefreshed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTREFRESHED);
	}
	
    /**
     * Removes all values of property LastRefreshed	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLastRefreshed() {
		Base.removeAll(this.model, this.getResource(), LASTREFRESHED);
	}
 }