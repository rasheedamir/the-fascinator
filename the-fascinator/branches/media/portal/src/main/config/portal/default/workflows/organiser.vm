#macro(createNavTree $root $class)
<ul class="$class">
  #foreach($key in $root.keySet())
    #set($item = $root.get($key))
    #set($id = $item.get("id"))
    #set($children = $item.getJsonMap("children"))
    #set($numChildren = $children.keySet().size())
    #set($hidden = "false")
    #set($hidden = $item.get("hidden"))
    #set($itemTitle = $item.get("title"))
    <li id="$key" rel="$id">
      <a class="#if($id == $oid)clicked#end #if("$!hidden" == "True")item-hidden#end" href="#">$itemTitle</a>
      #if($numChildren > 0)
        #createNavTree($children "children")
      #end
    </li>
  #end
</ul>
#end
#set($manifest = $self.manifest)
#set($oid = $self.getFormData('oid'))
#set($title = $self.getFormData('title'))
#set($pageTitle = $title)
<div class="grid_4">
  <div class="box menu">
    <h2>Actions</h2>
    <ul class="menu" id="actions">
      <li><a href="#" id="package-modify">Select package items...</a></li>
      <li><a href="$portalPath/detail/$oid">View package...</a></li>
    </ul>
  </div>
  <div class="box">
    <h2>Package properties</h2>
    <form action="$portalPath/workflow" id="package-form" method="post">
      <fieldset>
        <p>
          <label for="title">Package title</label>
          <input type="text" id="package-title" name="title" value="$!self.getPackageTitle()" />
        </p>
        <p>
          <label for="package-description">Description</label>
          <input type="text" id="package-description" name="description" value="$!self.getFormData('description')" />
        </p>
        <input type="hidden" name="targetStep" value="$self.getFormData('nextStep')" />
        <input type="hidden" name="oid" value="$oid" />
        <input class="button" id="update-package" type="button" value="Update" />
      </fieldset>
    </form>
  </div>
  <div id="item-props" class="box hidden">
    <h2>Item properties</h2>
    <div id="item-form">
      <fieldset>
        <p>
          <label for="item-title">Title</label>
          <input type="text" id="item-title" name="title" />
        </p>
        <p>
          <label class="checkbox" for="item-hidden">Hidden</label>
          <input class="checkbox" type="checkbox" id="item-hidden" name="hidden" />
        </p>
        <input class="button" id="update-item" type="button" value="Update" />
        <img class="hidden" id="item-loading" src="$portalPath/images/icons/loading.gif" />
        <span id="item-message"></span>
      </fieldset>
    </div>
  </div>
</div>
<div class="grid_12">
  <div class="box">
    <h2>Contents</h2>
    <p>Drag and drop the items to organise the package or select an item to change its properties</p>
    <div id="toc">
      #createNavTree($self.manifest "toc")
    </div>
  </div>
  <div class="box hidden" id="preview">
    <h2>Preview</h2>
    <div id="content"></div>
  </div>
</div>
<script type="text/javascript" src="$portalPath/js/tree/jquery.tree.min.js"></script>
<script type="text/javascript">
$(function() {
    function getParentIds(node) {
        var parents = "";
        $(node).parents("li").each(function() {
            parents = "," + $(this).attr("id") + parents;
        });
        if (parents != "") {
            parents = parents.substring(1);
        }
        return parents;
    }
    
    $("#toc").tree({
        ui: {
            animation: 250,
            dots: false,
            theme_name: "classic"
        },
        plugins: {
            checkbox: {}
        },
        callback: {
            onmove: function(node, refNode, type, tree, rollback) {
                jQuery.post("$portalPath/actions/manifest.ajax",
                    {
                        func: "move",
                        oid: "$oid",
                        id: "$portalId",
                        nodeId: $(node).attr("id"),
                        refNodeId: $(refNode).attr("id"),
                        parents: getParentIds(node),
                        refParents: getParentIds(refNode),
                        type: type
                    });
            },
            onselect: function(node, tree) {
                var node = $(node);
                var id = node.attr("rel");
                $("#content").load(
                    "$portalPath/preview?oid=" + escape(id) + " div.body > div",
                    function() {
                        function fixLinks(selector, attrName) {
                            $(selector).each(function() {
                                var attr = $(this).attr(attrName);
                                if (attr != null) {
                                    // fix for IE7 attr() returning resolved URLs - strip base URL
                                    var href = window.location.href;
                                    hrefBase = href.substring(0, href.lastIndexOf("/"));
                                    attrBase = attr.substring(0, hrefBase.length);
                                    if (hrefBase == attrBase) {
                                        attr = attr.substring(hrefBase.length + 1);
                                    }
                                    if (attr.indexOf("#") != 0 && attr.indexOf("://") == -1) {
                                        var relUrl = "$portalPath/download/" + id + "/";
                                        $(this).attr(attrName, escape(relUrl + attr));
                                    }
                                }
                            });
                        }
                        fixLinks("#content a", "href");
                        fixLinks("#content img", "src");
                    }
                );
                var item = node.children("a");
                $("#item-title").val(item.text()).focus();
                $("#item-hidden").attr("checked", item.hasClass("item-hidden"));
                $("#item-props:hidden, #preview:hidden").show("blind");
            }
        }
    });
    
    $(".toc.hidden").removeClass("hidden");
    
    $("#update-package").click(function() {
        jQuery.post("$portalPath/actions/manifest.ajax",
            {
                func: "set-package-title",
                oid: "$oid",
                title: $("#package-title").val()
            },
            function(data, status) {
                $("#package-form").submit();
            });
        return false;
    });
    
    $("#update-item").click(function() {
        var item = $("#toc a.clicked");
        var node = item.parent("li");
        $("#item-loading").removeClass("hidden");
        jQuery.post("$portalPath/actions/manifest.ajax",
            {
                func: "update",
                oid: "$oid",
                id: "$portalId",
                nodeId: $(node).attr("id"),
                title: $("#item-title").val(),
                hidden: $("#item-hidden").is(":checked"),
                parents: getParentIds(node)
            },
            function(data, status) {
                item.html(data.title);
                if (data.hidden == "True") {
                    item.addClass("item-hidden");
                } else {
                    item.removeClass("item-hidden");
                }
                $("#item-loading").addClass("hidden");
                $("#item-message").html("Updated OK");
                setTimeout(function() { $("#item-message").empty(); }, 3000);
            },
            "json");
    });
    
    $("#package-modify").click(function() {
        jQuery.post("$portalPath/actions/packaging.ajax",
            { func: "modify", oid: "$oid" },
            function(data, status) {
                window.location.href = "$contextPath/$self.getManifestViewId()/search";
            });
        return false;
    });
    
    $("#package-title").focus();
});
</script>
