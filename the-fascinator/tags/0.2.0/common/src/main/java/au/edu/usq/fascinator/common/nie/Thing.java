/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 1:47 PM
 */
package au.edu.usq.fascinator.common.nie;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AccessRights </li>
 *   <li> Copyright </li>
 *   <li> Date </li>
 *   <li> Depends </li>
 *   <li> Description </li>
 *   <li> Disclaimer </li>
 *   <li> Elements1_1Language </li>
 *   <li> Elements1_1Subject </li>
 *   <li> Elements1_1Title </li>
 *   <li> Identifier </li>
 *   <li> License </li>
 *   <li> LicenseType </li>
 *   <li> NaoIdentifier </li>
 *   <li> Part </li>
 *   <li> Relation </li>
 *   <li> Rights </li>
 *   <li> Source </li>
 *   <li> TermsCreated </li>
 *   <li> TermsIsPartOf </li>
 *   <li> TermsLicense </li>
 *   <li> TermsVersion </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 1:47 PM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://purl.org/dc/terms/accessRights */
    @SuppressWarnings("hiding")
	public static final URI ACCESSRIGHTS = new URIImpl("http://purl.org/dc/terms/accessRights",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright */
    @SuppressWarnings("hiding")
	public static final URI COPYRIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright",false);

    /** http://purl.org/dc/elements/1.1/date */
    @SuppressWarnings("hiding")
	public static final URI DATE = new URIImpl("http://purl.org/dc/elements/1.1/date",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends */
    @SuppressWarnings("hiding")
	public static final URI DEPENDS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends",false);

    /** http://purl.org/dc/elements/1.1/description */
    @SuppressWarnings("hiding")
	public static final URI DESCRIPTION = new URIImpl("http://purl.org/dc/elements/1.1/description",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer */
    @SuppressWarnings("hiding")
	public static final URI DISCLAIMER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer",false);

    /** http://purl.org/dc/elements/1.1/language */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1LANGUAGE = new URIImpl("http://purl.org/dc/elements/1.1/language",false);

    /** http://purl.org/dc/elements/1.1/subject */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1SUBJECT = new URIImpl("http://purl.org/dc/elements/1.1/subject",false);

    /** http://purl.org/dc/elements/1.1/title */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1TITLE = new URIImpl("http://purl.org/dc/elements/1.1/title",false);

    /** http://purl.org/dc/elements/1.1/identifier */
    @SuppressWarnings("hiding")
	public static final URI IDENTIFIER = new URIImpl("http://purl.org/dc/elements/1.1/identifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license */
    @SuppressWarnings("hiding")
	public static final URI LICENSE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType */
    @SuppressWarnings("hiding")
	public static final URI LICENSETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier */
    @SuppressWarnings("hiding")
	public static final URI NAOIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier",false);

    /** http://purl.org/dc/terms/hasPart */
    @SuppressWarnings("hiding")
	public static final URI PART = new URIImpl("http://purl.org/dc/terms/hasPart",false);

    /** http://purl.org/dc/elements/1.1/relation */
    @SuppressWarnings("hiding")
	public static final URI RELATION = new URIImpl("http://purl.org/dc/elements/1.1/relation",false);

    /** http://purl.org/dc/elements/1.1/rights */
    @SuppressWarnings("hiding")
	public static final URI RIGHTS = new URIImpl("http://purl.org/dc/elements/1.1/rights",false);

    /** http://purl.org/dc/elements/1.1/source */
    @SuppressWarnings("hiding")
	public static final URI SOURCE = new URIImpl("http://purl.org/dc/elements/1.1/source",false);

    /** http://purl.org/dc/terms/created */
    @SuppressWarnings("hiding")
	public static final URI TERMSCREATED = new URIImpl("http://purl.org/dc/terms/created",false);

    /** http://purl.org/dc/terms/isPartOf */
    @SuppressWarnings("hiding")
	public static final URI TERMSISPARTOF = new URIImpl("http://purl.org/dc/terms/isPartOf",false);

    /** http://purl.org/dc/terms/license */
    @SuppressWarnings("hiding")
	public static final URI TERMSLICENSE = new URIImpl("http://purl.org/dc/terms/license",false);

    /** http://purl.org/dc/terms/hasVersion */
    @SuppressWarnings("hiding")
	public static final URI TERMSVERSION = new URIImpl("http://purl.org/dc/terms/hasVersion",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/dc/terms/accessRights",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright",false),
      new URIImpl("http://purl.org/dc/elements/1.1/date",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends",false),
      new URIImpl("http://purl.org/dc/elements/1.1/description",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer",false),
      new URIImpl("http://purl.org/dc/elements/1.1/language",false),
      new URIImpl("http://purl.org/dc/elements/1.1/subject",false),
      new URIImpl("http://purl.org/dc/elements/1.1/title",false),
      new URIImpl("http://purl.org/dc/elements/1.1/identifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier",false),
      new URIImpl("http://purl.org/dc/terms/hasPart",false),
      new URIImpl("http://purl.org/dc/elements/1.1/relation",false),
      new URIImpl("http://purl.org/dc/elements/1.1/rights",false),
      new URIImpl("http://purl.org/dc/elements/1.1/source",false),
      new URIImpl("http://purl.org/dc/terms/created",false),
      new URIImpl("http://purl.org/dc/terms/isPartOf",false),
      new URIImpl("http://purl.org/dc/terms/license",false),
      new URIImpl("http://purl.org/dc/terms/hasVersion",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AccessRights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccessRights_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ACCESSRIGHTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AccessRights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccessRights_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ACCESSRIGHTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AccessRights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAccessRights_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ACCESSRIGHTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Language' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Language_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ELEMENTS1_1LANGUAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Language' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Language_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1LANGUAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Language' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Language_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ELEMENTS1_1LANGUAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Subject_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ELEMENTS1_1SUBJECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Subject_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1SUBJECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Subject_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ELEMENTS1_1SUBJECT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ELEMENTS1_1TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ELEMENTS1_1TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Identifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.IDENTIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Identifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.IDENTIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Identifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.IDENTIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NaoIdentifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNaoIdentifier_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NAOIDENTIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NaoIdentifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNaoIdentifier_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NAOIDENTIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NaoIdentifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNaoIdentifier_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NAOIDENTIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Relation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RELATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Relation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelation_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RELATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Relation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRelation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RELATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Rights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RIGHTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Rights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RIGHTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Rights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RIGHTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Source' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSource_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Source' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSource_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Source' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSource_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsCreated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsCreated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSCREATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsCreated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsCreated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSCREATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsCreated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsCreated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSCREATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsIsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsIsPartOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSISPARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsIsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsIsPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSISPARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsIsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsIsPartOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSISPARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsLicense' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsLicense_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSLICENSE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsLicense' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsLicense_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSLICENSE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsLicense' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsLicense_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSLICENSE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsVersion' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsVersion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsVersion' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsVersion_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsVersion' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsVersion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GeneratorOption' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneratorOption_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.GENERATOROPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GeneratorOption' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneratorOption_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.GENERATOROPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GeneratorOption' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeneratorOption_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.GENERATOROPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddad02 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCESSRIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddad02 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAccessRights() {
		return Base.has(this.model, this.getResource(), ACCESSRIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddad02 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCESSRIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddad02 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAccessRights( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCESSRIGHTS);
	}

     /**
     * Get all values of property AccessRights as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCESSRIGHTS);
	}
	
    /**
     * Get all values of property AccessRights as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESSRIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AccessRights as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCESSRIGHTS);
	}

    /**
     * Get all values of property AccessRights as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCESSRIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AccessRights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCESSRIGHTS, Thing.class);
	}
	
    /**
     * Get all values of property AccessRights as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAccessRights_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESSRIGHTS, Thing.class);
	}

    /**
     * Get all values of property AccessRights     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAccessRights() {
		return Base.getAll(this.model, this.getResource(), ACCESSRIGHTS, Thing.class);
	}

    /**
     * Get all values of property AccessRights as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAccessRights_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCESSRIGHTS, Thing.class);
	}
 
    /**
     * Adds a value to property AccessRights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Adds a value to property AccessRights as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAccessRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
    /**
     * Adds a value to property AccessRights from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Adds a value to property AccessRights from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAccessRights(Thing value) {
		Base.add(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
  

    /**
     * Sets a value of property AccessRights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Sets a value of property AccessRights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAccessRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
    /**
     * Sets a value of property AccessRights from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Sets a value of property AccessRights from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAccessRights(Thing value) {
		Base.set(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
  


    /**
     * Removes a value of property AccessRights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Removes a value of property AccessRights as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAccessRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
    /**
     * Removes a value of property AccessRights given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Removes a value of property AccessRights given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAccessRights(Thing value) {
		Base.remove(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
  
    /**
     * Removes all values of property AccessRights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCESSRIGHTS);
	}
	
    /**
     * Removes all values of property AccessRights	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAccessRights() {
		Base.removeAll(this.model, this.getResource(), ACCESSRIGHTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aaeec has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aaeec has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCopyright() {
		return Base.has(this.model, this.getResource(), COPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aaeec has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aaeec has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCopyright( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COPYRIGHT);
	}

     /**
     * Get all values of property Copyright as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COPYRIGHT);
	}
	
    /**
     * Get all values of property Copyright as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Copyright as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COPYRIGHT);
	}

    /**
     * Get all values of property Copyright as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Copyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COPYRIGHT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Copyright as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCopyright_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHT, java.lang.String.class);
	}

    /**
     * Get all values of property Copyright     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCopyright() {
		return Base.getAll(this.model, this.getResource(), COPYRIGHT, java.lang.String.class);
	}

    /**
     * Get all values of property Copyright as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCopyright_as() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Copyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Adds a value to property Copyright as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COPYRIGHT, value);
	}
    /**
     * Adds a value to property Copyright from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Adds a value to property Copyright from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCopyright(java.lang.String value) {
		Base.add(this.model, this.getResource(), COPYRIGHT, value);
	}
  

    /**
     * Sets a value of property Copyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Sets a value of property Copyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COPYRIGHT, value);
	}
    /**
     * Sets a value of property Copyright from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Sets a value of property Copyright from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCopyright(java.lang.String value) {
		Base.set(this.model, this.getResource(), COPYRIGHT, value);
	}
  


    /**
     * Removes a value of property Copyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Removes a value of property Copyright as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COPYRIGHT, value);
	}
    /**
     * Removes a value of property Copyright given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Removes a value of property Copyright given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCopyright(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COPYRIGHT, value);
	}
  
    /**
     * Removes all values of property Copyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COPYRIGHT);
	}
	
    /**
     * Removes all values of property Copyright	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCopyright() {
		Base.removeAll(this.model, this.getResource(), COPYRIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1279c8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1279c8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDate() {
		return Base.has(this.model, this.getResource(), DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1279c8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1279c8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATE);
	}

     /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATE);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATE);
	}

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATE, Thing.class);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, Thing.class);
	}

    /**
     * Get all values of property Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDate() {
		return Base.getAll(this.model, this.getResource(), DATE, Thing.class);
	}

    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDate_as() {
		return Base.getAll_as(this.model, this.getResource(), DATE, Thing.class);
	}
 
    /**
     * Adds a value to property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
    /**
     * Adds a value to property Date from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDate(Thing value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
  

    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDate(Thing value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
  


    /**
     * Removes a value of property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
    /**
     * Removes a value of property Date given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDate(Thing value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
  
    /**
     * Removes all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATE);
	}
	
    /**
     * Removes all values of property Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDate() {
		Base.removeAll(this.model, this.getResource(), DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@da52a1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPENDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@da52a1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDepends() {
		return Base.has(this.model, this.getResource(), DEPENDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@da52a1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPENDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@da52a1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDepends( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPENDS);
	}

     /**
     * Get all values of property Depends as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPENDS);
	}
	
    /**
     * Get all values of property Depends as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPENDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Depends as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPENDS);
	}

    /**
     * Get all values of property Depends as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPENDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Depends     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataObject> getAllDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPENDS, DataObject.class);
	}
	
    /**
     * Get all values of property Depends as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataObject> getAllDepends_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPENDS, DataObject.class);
	}

    /**
     * Get all values of property Depends     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataObject> getAllDepends() {
		return Base.getAll(this.model, this.getResource(), DEPENDS, DataObject.class);
	}

    /**
     * Get all values of property Depends as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataObject> getAllDepends_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPENDS, DataObject.class);
	}
 
    /**
     * Adds a value to property Depends as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Adds a value to property Depends as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDepends( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPENDS, value);
	}
    /**
     * Adds a value to property Depends from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.add(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Adds a value to property Depends from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDepends(DataObject value) {
		Base.add(this.model, this.getResource(), DEPENDS, value);
	}
  

    /**
     * Sets a value of property Depends from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Sets a value of property Depends from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDepends( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPENDS, value);
	}
    /**
     * Sets a value of property Depends from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.set(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Sets a value of property Depends from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDepends(DataObject value) {
		Base.set(this.model, this.getResource(), DEPENDS, value);
	}
  


    /**
     * Removes a value of property Depends as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Removes a value of property Depends as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDepends( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPENDS, value);
	}
    /**
     * Removes a value of property Depends given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.remove(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Removes a value of property Depends given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDepends(DataObject value) {
		Base.remove(this.model, this.getResource(), DEPENDS, value);
	}
  
    /**
     * Removes all values of property Depends     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPENDS);
	}
	
    /**
     * Removes all values of property Depends	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDepends() {
		Base.removeAll(this.model, this.getResource(), DEPENDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f873dd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f873dd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f873dd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f873dd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@136e10e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISCLAIMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@136e10e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDisclaimer() {
		return Base.has(this.model, this.getResource(), DISCLAIMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@136e10e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCLAIMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@136e10e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDisclaimer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCLAIMER);
	}

     /**
     * Get all values of property Disclaimer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCLAIMER);
	}
	
    /**
     * Get all values of property Disclaimer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCLAIMER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Disclaimer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCLAIMER);
	}

    /**
     * Get all values of property Disclaimer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCLAIMER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Disclaimer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCLAIMER, java.lang.String.class);
	}
	
    /**
     * Get all values of property Disclaimer as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDisclaimer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCLAIMER, java.lang.String.class);
	}

    /**
     * Get all values of property Disclaimer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDisclaimer() {
		return Base.getAll(this.model, this.getResource(), DISCLAIMER, java.lang.String.class);
	}

    /**
     * Get all values of property Disclaimer as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDisclaimer_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCLAIMER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Disclaimer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Adds a value to property Disclaimer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDisclaimer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISCLAIMER, value);
	}
    /**
     * Adds a value to property Disclaimer from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Adds a value to property Disclaimer from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDisclaimer(java.lang.String value) {
		Base.add(this.model, this.getResource(), DISCLAIMER, value);
	}
  

    /**
     * Sets a value of property Disclaimer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Sets a value of property Disclaimer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDisclaimer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISCLAIMER, value);
	}
    /**
     * Sets a value of property Disclaimer from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Sets a value of property Disclaimer from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDisclaimer(java.lang.String value) {
		Base.set(this.model, this.getResource(), DISCLAIMER, value);
	}
  


    /**
     * Removes a value of property Disclaimer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Removes a value of property Disclaimer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDisclaimer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISCLAIMER, value);
	}
    /**
     * Removes a value of property Disclaimer given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Removes a value of property Disclaimer given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDisclaimer(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DISCLAIMER, value);
	}
  
    /**
     * Removes all values of property Disclaimer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCLAIMER);
	}
	
    /**
     * Removes all values of property Disclaimer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDisclaimer() {
		Base.removeAll(this.model, this.getResource(), DISCLAIMER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df88d2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df88d2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Language() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df88d2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df88d2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Language( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}

     /**
     * Get all values of property Elements1_1Language as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}
	
    /**
     * Get all values of property Elements1_1Language as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Language as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}

    /**
     * Get all values of property Elements1_1Language as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1LANGUAGE, Thing.class);
	}
	
    /**
     * Get all values of property Elements1_1Language as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllElements1_1Language_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1LANGUAGE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Language     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllElements1_1Language() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Language as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllElements1_1Language_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, Thing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Language as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
    /**
     * Adds a value to property Elements1_1Language from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Language from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Language(Thing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
    /**
     * Sets a value of property Elements1_1Language from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Language from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Language(Thing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Language as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
    /**
     * Removes a value of property Elements1_1Language given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Language given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Language(Thing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}
	
    /**
     * Removes all values of property Elements1_1Language	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Language() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16181be has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16181be has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Subject() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16181be has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16181be has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Subject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}

     /**
     * Get all values of property Elements1_1Subject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1SUBJECT);
	}
	
    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Subject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1SUBJECT, Thing.class);
	}
	
    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllElements1_1Subject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1SUBJECT, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Subject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllElements1_1Subject() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1SUBJECT, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllElements1_1Subject_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1SUBJECT, Thing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Adds a value to property Elements1_1Subject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Subject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
    /**
     * Adds a value to property Elements1_1Subject from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Adds a value to property Elements1_1Subject from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Subject(Thing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
  

    /**
     * Sets a value of property Elements1_1Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Sets a value of property Elements1_1Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Subject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
    /**
     * Sets a value of property Elements1_1Subject from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Sets a value of property Elements1_1Subject from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Subject(Thing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
  


    /**
     * Removes a value of property Elements1_1Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Removes a value of property Elements1_1Subject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Subject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
    /**
     * Removes a value of property Elements1_1Subject given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Removes a value of property Elements1_1Subject given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Subject(Thing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
  
    /**
     * Removes all values of property Elements1_1Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1SUBJECT);
	}
	
    /**
     * Removes all values of property Elements1_1Subject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Subject() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e846f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e846f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Title() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e846f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e846f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Title( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

     /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllElements1_1Title_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllElements1_1Title() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1TITLE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllElements1_1Title_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Adds a value to property Elements1_1Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Title(Thing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Sets a value of property Elements1_1Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Title(Thing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Removes a value of property Elements1_1Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Title(Thing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Removes all values of property Elements1_1Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Title() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18bdc7a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18bdc7a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIdentifier() {
		return Base.has(this.model, this.getResource(), IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18bdc7a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18bdc7a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IDENTIFIER);
	}

     /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IDENTIFIER);
	}
	
    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IDENTIFIER);
	}

    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IDENTIFIER, Thing.class);
	}
	
    /**
     * Get all values of property Identifier as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property Identifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllIdentifier() {
		return Base.getAll(this.model, this.getResource(), IDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property Identifier as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), IDENTIFIER, Thing.class);
	}
 
    /**
     * Adds a value to property Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Identifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Adds a value to property Identifier from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Identifier from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIdentifier(Thing value) {
		Base.add(this.model, this.getResource(), IDENTIFIER, value);
	}
  

    /**
     * Sets a value of property Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Sets a value of property Identifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Identifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIdentifier(Thing value) {
		Base.set(this.model, this.getResource(), IDENTIFIER, value);
	}
  


    /**
     * Removes a value of property Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Identifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Removes a value of property Identifier given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Identifier given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIdentifier(Thing value) {
		Base.remove(this.model, this.getResource(), IDENTIFIER, value);
	}
  
    /**
     * Removes all values of property Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IDENTIFIER);
	}
	
    /**
     * Removes all values of property Identifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIdentifier() {
		Base.removeAll(this.model, this.getResource(), IDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8643e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8643e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLicense() {
		return Base.has(this.model, this.getResource(), LICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8643e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8643e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLicense( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LICENSE);
	}

     /**
     * Get all values of property License as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LICENSE);
	}
	
    /**
     * Get all values of property License as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property License as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LICENSE);
	}

    /**
     * Get all values of property License as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property License     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LICENSE, java.lang.String.class);
	}
	
    /**
     * Get all values of property License as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLicense_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSE, java.lang.String.class);
	}

    /**
     * Get all values of property License     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLicense() {
		return Base.getAll(this.model, this.getResource(), LICENSE, java.lang.String.class);
	}

    /**
     * Get all values of property License as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLicense_as() {
		return Base.getAll_as(this.model, this.getResource(), LICENSE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property License as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Adds a value to property License as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LICENSE, value);
	}
    /**
     * Adds a value to property License from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Adds a value to property License from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLicense(java.lang.String value) {
		Base.add(this.model, this.getResource(), LICENSE, value);
	}
  

    /**
     * Sets a value of property License from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Sets a value of property License from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LICENSE, value);
	}
    /**
     * Sets a value of property License from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Sets a value of property License from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLicense(java.lang.String value) {
		Base.set(this.model, this.getResource(), LICENSE, value);
	}
  


    /**
     * Removes a value of property License as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Removes a value of property License as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LICENSE, value);
	}
    /**
     * Removes a value of property License given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Removes a value of property License given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLicense(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LICENSE, value);
	}
  
    /**
     * Removes all values of property License     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LICENSE);
	}
	
    /**
     * Removes all values of property License	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLicense() {
		Base.removeAll(this.model, this.getResource(), LICENSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ccbefe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LICENSETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ccbefe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLicenseType() {
		return Base.has(this.model, this.getResource(), LICENSETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ccbefe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LICENSETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ccbefe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLicenseType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LICENSETYPE);
	}

     /**
     * Get all values of property LicenseType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LICENSETYPE);
	}
	
    /**
     * Get all values of property LicenseType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LicenseType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LICENSETYPE);
	}

    /**
     * Get all values of property LicenseType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LICENSETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LicenseType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LICENSETYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property LicenseType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLicenseType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property LicenseType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLicenseType() {
		return Base.getAll(this.model, this.getResource(), LICENSETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property LicenseType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLicenseType_as() {
		return Base.getAll_as(this.model, this.getResource(), LICENSETYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property LicenseType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Adds a value to property LicenseType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLicenseType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LICENSETYPE, value);
	}
    /**
     * Adds a value to property LicenseType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Adds a value to property LicenseType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLicenseType(java.lang.String value) {
		Base.add(this.model, this.getResource(), LICENSETYPE, value);
	}
  

    /**
     * Sets a value of property LicenseType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Sets a value of property LicenseType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLicenseType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LICENSETYPE, value);
	}
    /**
     * Sets a value of property LicenseType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Sets a value of property LicenseType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLicenseType(java.lang.String value) {
		Base.set(this.model, this.getResource(), LICENSETYPE, value);
	}
  


    /**
     * Removes a value of property LicenseType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Removes a value of property LicenseType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLicenseType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LICENSETYPE, value);
	}
    /**
     * Removes a value of property LicenseType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Removes a value of property LicenseType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLicenseType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LICENSETYPE, value);
	}
  
    /**
     * Removes all values of property LicenseType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LICENSETYPE);
	}
	
    /**
     * Removes all values of property LicenseType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLicenseType() {
		Base.removeAll(this.model, this.getResource(), LICENSETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@205df9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNaoIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAOIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@205df9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNaoIdentifier() {
		return Base.has(this.model, this.getResource(), NAOIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@205df9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNaoIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAOIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@205df9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNaoIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAOIDENTIFIER);
	}

     /**
     * Get all values of property NaoIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNaoIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAOIDENTIFIER);
	}
	
    /**
     * Get all values of property NaoIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNaoIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAOIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NaoIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNaoIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAOIDENTIFIER);
	}

    /**
     * Get all values of property NaoIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNaoIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAOIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NaoIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllNaoIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAOIDENTIFIER, Thing.class);
	}
	
    /**
     * Get all values of property NaoIdentifier as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllNaoIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAOIDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property NaoIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllNaoIdentifier() {
		return Base.getAll(this.model, this.getResource(), NAOIDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property NaoIdentifier as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllNaoIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), NAOIDENTIFIER, Thing.class);
	}
 
    /**
     * Adds a value to property NaoIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNaoIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAOIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property NaoIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNaoIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAOIDENTIFIER, value);
	}
    /**
     * Adds a value to property NaoIdentifier from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNaoIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NAOIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property NaoIdentifier from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNaoIdentifier(Thing value) {
		Base.add(this.model, this.getResource(), NAOIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property NaoIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNaoIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAOIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property NaoIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNaoIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAOIDENTIFIER, value);
	}
    /**
     * Sets a value of property NaoIdentifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNaoIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NAOIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property NaoIdentifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNaoIdentifier(Thing value) {
		Base.set(this.model, this.getResource(), NAOIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property NaoIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNaoIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAOIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property NaoIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNaoIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAOIDENTIFIER, value);
	}
    /**
     * Removes a value of property NaoIdentifier given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNaoIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NAOIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property NaoIdentifier given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNaoIdentifier(Thing value) {
		Base.remove(this.model, this.getResource(), NAOIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property NaoIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNaoIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAOIDENTIFIER);
	}
	
    /**
     * Removes all values of property NaoIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNaoIdentifier() {
		Base.removeAll(this.model, this.getResource(), NAOIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@afb650 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@afb650 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPart() {
		return Base.has(this.model, this.getResource(), PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@afb650 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@afb650 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PART);
	}

     /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PART);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PART);
	}

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PART, Thing.class);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, Thing.class);
	}

    /**
     * Get all values of property Part     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPart() {
		return Base.getAll(this.model, this.getResource(), PART, Thing.class);
	}

    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPart_as() {
		return Base.getAll_as(this.model, this.getResource(), PART, Thing.class);
	}
 
    /**
     * Adds a value to property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
    /**
     * Adds a value to property Part from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPart(Thing value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
  

    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPart(Thing value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
  


    /**
     * Removes a value of property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
    /**
     * Removes a value of property Part given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePart(Thing value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
  
    /**
     * Removes all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PART);
	}
	
    /**
     * Removes all values of property Part	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPart() {
		Base.removeAll(this.model, this.getResource(), PART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a06824 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a06824 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelation() {
		return Base.has(this.model, this.getResource(), RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a06824 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a06824 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATION);
	}

     /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATION);
	}
	
    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATION);
	}

    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Relation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATION, Thing.class);
	}
	
    /**
     * Get all values of property Relation as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRelation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATION, Thing.class);
	}

    /**
     * Get all values of property Relation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRelation() {
		return Base.getAll(this.model, this.getResource(), RELATION, Thing.class);
	}

    /**
     * Get all values of property Relation as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRelation_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATION, Thing.class);
	}
 
    /**
     * Adds a value to property Relation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATION, value);
	}
	
    /**
     * Adds a value to property Relation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Adds a value to property Relation from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RELATION, value);
	}
	
    /**
     * Adds a value to property Relation from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelation(Thing value) {
		Base.add(this.model, this.getResource(), RELATION, value);
	}
  

    /**
     * Sets a value of property Relation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATION, value);
	}
	
    /**
     * Sets a value of property Relation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Sets a value of property Relation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RELATION, value);
	}
	
    /**
     * Sets a value of property Relation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelation(Thing value) {
		Base.set(this.model, this.getResource(), RELATION, value);
	}
  


    /**
     * Removes a value of property Relation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATION, value);
	}
	
    /**
     * Removes a value of property Relation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Removes a value of property Relation given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RELATION, value);
	}
	
    /**
     * Removes a value of property Relation given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelation(Thing value) {
		Base.remove(this.model, this.getResource(), RELATION, value);
	}
  
    /**
     * Removes all values of property Relation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATION);
	}
	
    /**
     * Removes all values of property Relation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelation() {
		Base.removeAll(this.model, this.getResource(), RELATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec44cb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec44cb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRights() {
		return Base.has(this.model, this.getResource(), RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec44cb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ec44cb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRights( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RIGHTS);
	}

     /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RIGHTS);
	}
	
    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RIGHTS);
	}

    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Rights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RIGHTS, Thing.class);
	}
	
    /**
     * Get all values of property Rights as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRights_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RIGHTS, Thing.class);
	}

    /**
     * Get all values of property Rights     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRights() {
		return Base.getAll(this.model, this.getResource(), RIGHTS, Thing.class);
	}

    /**
     * Get all values of property Rights as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRights_as() {
		return Base.getAll_as(this.model, this.getResource(), RIGHTS, Thing.class);
	}
 
    /**
     * Adds a value to property Rights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Adds a value to property Rights as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Adds a value to property Rights from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Adds a value to property Rights from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRights(Thing value) {
		Base.add(this.model, this.getResource(), RIGHTS, value);
	}
  

    /**
     * Sets a value of property Rights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Sets a value of property Rights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Sets a value of property Rights from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Sets a value of property Rights from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRights(Thing value) {
		Base.set(this.model, this.getResource(), RIGHTS, value);
	}
  


    /**
     * Removes a value of property Rights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Removes a value of property Rights as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Removes a value of property Rights given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Removes a value of property Rights given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRights(Thing value) {
		Base.remove(this.model, this.getResource(), RIGHTS, value);
	}
  
    /**
     * Removes all values of property Rights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RIGHTS);
	}
	
    /**
     * Removes all values of property Rights	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRights() {
		Base.removeAll(this.model, this.getResource(), RIGHTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ffb35e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ffb35e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSource() {
		return Base.has(this.model, this.getResource(), SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ffb35e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ffb35e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCE);
	}

     /**
     * Get all values of property Source as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCE);
	}
	
    /**
     * Get all values of property Source as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Source as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCE);
	}

    /**
     * Get all values of property Source as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Source     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCE, Thing.class);
	}
	
    /**
     * Get all values of property Source as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCE, Thing.class);
	}

    /**
     * Get all values of property Source     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSource() {
		return Base.getAll(this.model, this.getResource(), SOURCE, Thing.class);
	}

    /**
     * Get all values of property Source as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSource_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCE, Thing.class);
	}
 
    /**
     * Adds a value to property Source as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Adds a value to property Source as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCE, value);
	}
    /**
     * Adds a value to property Source from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Adds a value to property Source from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSource(Thing value) {
		Base.add(this.model, this.getResource(), SOURCE, value);
	}
  

    /**
     * Sets a value of property Source from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Sets a value of property Source from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCE, value);
	}
    /**
     * Sets a value of property Source from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Sets a value of property Source from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSource(Thing value) {
		Base.set(this.model, this.getResource(), SOURCE, value);
	}
  


    /**
     * Removes a value of property Source as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Removes a value of property Source as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCE, value);
	}
    /**
     * Removes a value of property Source given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Removes a value of property Source given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSource(Thing value) {
		Base.remove(this.model, this.getResource(), SOURCE, value);
	}
  
    /**
     * Removes all values of property Source     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCE);
	}
	
    /**
     * Removes all values of property Source	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSource() {
		Base.removeAll(this.model, this.getResource(), SOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ecec has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ecec has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsCreated() {
		return Base.has(this.model, this.getResource(), TERMSCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ecec has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ecec has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSCREATED);
	}

     /**
     * Get all values of property TermsCreated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSCREATED);
	}
	
    /**
     * Get all values of property TermsCreated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSCREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsCreated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSCREATED);
	}

    /**
     * Get all values of property TermsCreated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSCREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSCREATED, Thing.class);
	}
	
    /**
     * Get all values of property TermsCreated as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTermsCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSCREATED, Thing.class);
	}

    /**
     * Get all values of property TermsCreated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTermsCreated() {
		return Base.getAll(this.model, this.getResource(), TERMSCREATED, Thing.class);
	}

    /**
     * Get all values of property TermsCreated as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTermsCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSCREATED, Thing.class);
	}
 
    /**
     * Adds a value to property TermsCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Adds a value to property TermsCreated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSCREATED, value);
	}
    /**
     * Adds a value to property TermsCreated from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Adds a value to property TermsCreated from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsCreated(Thing value) {
		Base.add(this.model, this.getResource(), TERMSCREATED, value);
	}
  

    /**
     * Sets a value of property TermsCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Sets a value of property TermsCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSCREATED, value);
	}
    /**
     * Sets a value of property TermsCreated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Sets a value of property TermsCreated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsCreated(Thing value) {
		Base.set(this.model, this.getResource(), TERMSCREATED, value);
	}
  


    /**
     * Removes a value of property TermsCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Removes a value of property TermsCreated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSCREATED, value);
	}
    /**
     * Removes a value of property TermsCreated given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Removes a value of property TermsCreated given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsCreated(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSCREATED, value);
	}
  
    /**
     * Removes all values of property TermsCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSCREATED);
	}
	
    /**
     * Removes all values of property TermsCreated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsCreated() {
		Base.removeAll(this.model, this.getResource(), TERMSCREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8a2f6b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8a2f6b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsIsPartOf() {
		return Base.has(this.model, this.getResource(), TERMSISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8a2f6b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8a2f6b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSISPARTOF);
	}

     /**
     * Get all values of property TermsIsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSISPARTOF);
	}
	
    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsIsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSISPARTOF);
	}

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsIsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSISPARTOF, Thing.class);
	}
	
    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTermsIsPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSISPARTOF, Thing.class);
	}

    /**
     * Get all values of property TermsIsPartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTermsIsPartOf() {
		return Base.getAll(this.model, this.getResource(), TERMSISPARTOF, Thing.class);
	}

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTermsIsPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSISPARTOF, Thing.class);
	}
 
    /**
     * Adds a value to property TermsIsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Adds a value to property TermsIsPartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSISPARTOF, value);
	}
    /**
     * Adds a value to property TermsIsPartOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Adds a value to property TermsIsPartOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsIsPartOf(Thing value) {
		Base.add(this.model, this.getResource(), TERMSISPARTOF, value);
	}
  

    /**
     * Sets a value of property TermsIsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Sets a value of property TermsIsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSISPARTOF, value);
	}
    /**
     * Sets a value of property TermsIsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Sets a value of property TermsIsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsIsPartOf(Thing value) {
		Base.set(this.model, this.getResource(), TERMSISPARTOF, value);
	}
  


    /**
     * Removes a value of property TermsIsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Removes a value of property TermsIsPartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSISPARTOF, value);
	}
    /**
     * Removes a value of property TermsIsPartOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Removes a value of property TermsIsPartOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsIsPartOf(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSISPARTOF, value);
	}
  
    /**
     * Removes all values of property TermsIsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSISPARTOF);
	}
	
    /**
     * Removes all values of property TermsIsPartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsIsPartOf() {
		Base.removeAll(this.model, this.getResource(), TERMSISPARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9c5d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSLICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9c5d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsLicense() {
		return Base.has(this.model, this.getResource(), TERMSLICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9c5d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSLICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9c5d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsLicense( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSLICENSE);
	}

     /**
     * Get all values of property TermsLicense as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSLICENSE);
	}
	
    /**
     * Get all values of property TermsLicense as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSLICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsLicense as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSLICENSE);
	}

    /**
     * Get all values of property TermsLicense as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSLICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsLicense     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSLICENSE, Thing.class);
	}
	
    /**
     * Get all values of property TermsLicense as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTermsLicense_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSLICENSE, Thing.class);
	}

    /**
     * Get all values of property TermsLicense     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTermsLicense() {
		return Base.getAll(this.model, this.getResource(), TERMSLICENSE, Thing.class);
	}

    /**
     * Get all values of property TermsLicense as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTermsLicense_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSLICENSE, Thing.class);
	}
 
    /**
     * Adds a value to property TermsLicense as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Adds a value to property TermsLicense as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSLICENSE, value);
	}
    /**
     * Adds a value to property TermsLicense from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Adds a value to property TermsLicense from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsLicense(Thing value) {
		Base.add(this.model, this.getResource(), TERMSLICENSE, value);
	}
  

    /**
     * Sets a value of property TermsLicense from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Sets a value of property TermsLicense from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSLICENSE, value);
	}
    /**
     * Sets a value of property TermsLicense from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Sets a value of property TermsLicense from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsLicense(Thing value) {
		Base.set(this.model, this.getResource(), TERMSLICENSE, value);
	}
  


    /**
     * Removes a value of property TermsLicense as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Removes a value of property TermsLicense as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSLICENSE, value);
	}
    /**
     * Removes a value of property TermsLicense given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Removes a value of property TermsLicense given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsLicense(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSLICENSE, value);
	}
  
    /**
     * Removes all values of property TermsLicense     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSLICENSE);
	}
	
    /**
     * Removes all values of property TermsLicense	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsLicense() {
		Base.removeAll(this.model, this.getResource(), TERMSLICENSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c028cc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c028cc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsVersion() {
		return Base.has(this.model, this.getResource(), TERMSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c028cc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c028cc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSVERSION);
	}

     /**
     * Get all values of property TermsVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSVERSION);
	}
	
    /**
     * Get all values of property TermsVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSVERSION);
	}

    /**
     * Get all values of property TermsVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSVERSION, Thing.class);
	}
	
    /**
     * Get all values of property TermsVersion as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTermsVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSVERSION, Thing.class);
	}

    /**
     * Get all values of property TermsVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTermsVersion() {
		return Base.getAll(this.model, this.getResource(), TERMSVERSION, Thing.class);
	}

    /**
     * Get all values of property TermsVersion as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTermsVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSVERSION, Thing.class);
	}
 
    /**
     * Adds a value to property TermsVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Adds a value to property TermsVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSVERSION, value);
	}
    /**
     * Adds a value to property TermsVersion from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Adds a value to property TermsVersion from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsVersion(Thing value) {
		Base.add(this.model, this.getResource(), TERMSVERSION, value);
	}
  

    /**
     * Sets a value of property TermsVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Sets a value of property TermsVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSVERSION, value);
	}
    /**
     * Sets a value of property TermsVersion from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Sets a value of property TermsVersion from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsVersion(Thing value) {
		Base.set(this.model, this.getResource(), TERMSVERSION, value);
	}
  


    /**
     * Removes a value of property TermsVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Removes a value of property TermsVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSVERSION, value);
	}
    /**
     * Removes a value of property TermsVersion given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Removes a value of property TermsVersion given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsVersion(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSVERSION, value);
	}
  
    /**
     * Removes all values of property TermsVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSVERSION);
	}
	
    /**
     * Removes all values of property TermsVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsVersion() {
		Base.removeAll(this.model, this.getResource(), TERMSVERSION);
	}
 }