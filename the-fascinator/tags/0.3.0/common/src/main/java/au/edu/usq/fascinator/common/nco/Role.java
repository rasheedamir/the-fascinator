/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 12:54 PM
 */
package au.edu.usq.fascinator.common.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BlogUrl </li>
 *   <li> FoafUrl </li>
 *   <li> HasContactMedium </li>
 *   <li> HasEmailAddress </li>
 *   <li> HasIMAccount </li>
 *   <li> HasPhoneNumber </li>
 *   <li> HasPostalAddress </li>
 *   <li> Url </li>
 *   <li> WebsiteUrl </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 12:54 PM
 */
public class Role extends Thing {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl */
    @SuppressWarnings("hiding")
	public static final URI BLOGURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl */
    @SuppressWarnings("hiding")
	public static final URI FOAFURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium */
    @SuppressWarnings("hiding")
	public static final URI HASCONTACTMEDIUM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress */
    @SuppressWarnings("hiding")
	public static final URI HASEMAILADDRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount */
    @SuppressWarnings("hiding")
	public static final URI HASIMACCOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber */
    @SuppressWarnings("hiding")
	public static final URI HASPHONENUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress */
    @SuppressWarnings("hiding")
	public static final URI HASPOSTALADDRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url */
    @SuppressWarnings("hiding")
	public static final URI URL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl */
    @SuppressWarnings("hiding")
	public static final URI WEBSITEURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Role ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Role ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Role ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Role ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Role ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Role  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Role  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Role.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Role> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Role.class );
	}

    /**
	 * Remove rdf:type Role from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fd2b1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BLOGURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fd2b1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBlogUrl() {
		return Base.has(this.model, this.getResource(), BLOGURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fd2b1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BLOGURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fd2b1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBlogUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BLOGURL);
	}

     /**
     * Get all values of property BlogUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BLOGURL);
	}
	
    /**
     * Get all values of property BlogUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BLOGURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BlogUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BLOGURL);
	}

    /**
     * Get all values of property BlogUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BLOGURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BlogUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property BlogUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property BlogUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl() {
		return Base.getAll(this.model, this.getResource(), BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property BlogUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property BlogUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Adds a value to property BlogUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBlogUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BLOGURL, value);
	}
    /**
     * Adds a value to property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Adds a value to property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBlogUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), BLOGURL, value);
	}
  

    /**
     * Sets a value of property BlogUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Sets a value of property BlogUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBlogUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BLOGURL, value);
	}
    /**
     * Sets a value of property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Sets a value of property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBlogUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), BLOGURL, value);
	}
  


    /**
     * Removes a value of property BlogUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Removes a value of property BlogUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBlogUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BLOGURL, value);
	}
    /**
     * Removes a value of property BlogUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Removes a value of property BlogUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBlogUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), BLOGURL, value);
	}
  
    /**
     * Removes all values of property BlogUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BLOGURL);
	}
	
    /**
     * Removes all values of property BlogUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBlogUrl() {
		Base.removeAll(this.model, this.getResource(), BLOGURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312737 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOAFURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312737 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFoafUrl() {
		return Base.has(this.model, this.getResource(), FOAFURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312737 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOAFURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312737 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFoafUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOAFURL);
	}

     /**
     * Get all values of property FoafUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOAFURL);
	}
	
    /**
     * Get all values of property FoafUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FoafUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOAFURL);
	}

    /**
     * Get all values of property FoafUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOAFURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FoafUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property FoafUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property FoafUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl() {
		return Base.getAll(this.model, this.getResource(), FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property FoafUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property FoafUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Adds a value to property FoafUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFoafUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOAFURL, value);
	}
    /**
     * Adds a value to property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Adds a value to property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFoafUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), FOAFURL, value);
	}
  

    /**
     * Sets a value of property FoafUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Sets a value of property FoafUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFoafUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOAFURL, value);
	}
    /**
     * Sets a value of property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Sets a value of property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFoafUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), FOAFURL, value);
	}
  


    /**
     * Removes a value of property FoafUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Removes a value of property FoafUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFoafUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOAFURL, value);
	}
    /**
     * Removes a value of property FoafUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Removes a value of property FoafUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFoafUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), FOAFURL, value);
	}
  
    /**
     * Removes all values of property FoafUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOAFURL);
	}
	
    /**
     * Removes all values of property FoafUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFoafUrl() {
		Base.removeAll(this.model, this.getResource(), FOAFURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16e14f9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASCONTACTMEDIUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16e14f9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasContactMedium() {
		return Base.has(this.model, this.getResource(), HASCONTACTMEDIUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16e14f9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASCONTACTMEDIUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16e14f9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasContactMedium( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASCONTACTMEDIUM);
	}

     /**
     * Get all values of property HasContactMedium as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasContactMedium_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASCONTACTMEDIUM);
	}
	
    /**
     * Get all values of property HasContactMedium as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasContactMedium_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASCONTACTMEDIUM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasContactMedium as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasContactMedium_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASCONTACTMEDIUM);
	}

    /**
     * Get all values of property HasContactMedium as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasContactMedium_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASCONTACTMEDIUM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasContactMedium     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<ContactMedium> getAllHasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASCONTACTMEDIUM, ContactMedium.class);
	}
	
    /**
     * Get all values of property HasContactMedium as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<ContactMedium> getAllHasContactMedium_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASCONTACTMEDIUM, ContactMedium.class);
	}

    /**
     * Get all values of property HasContactMedium     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<ContactMedium> getAllHasContactMedium() {
		return Base.getAll(this.model, this.getResource(), HASCONTACTMEDIUM, ContactMedium.class);
	}

    /**
     * Get all values of property HasContactMedium as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<ContactMedium> getAllHasContactMedium_as() {
		return Base.getAll_as(this.model, this.getResource(), HASCONTACTMEDIUM, ContactMedium.class);
	}
 
    /**
     * Adds a value to property HasContactMedium as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASCONTACTMEDIUM, value);
	}
	
    /**
     * Adds a value to property HasContactMedium as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasContactMedium( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASCONTACTMEDIUM, value);
	}
    /**
     * Adds a value to property HasContactMedium from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, ContactMedium value) {
		Base.add(model, instanceResource, HASCONTACTMEDIUM, value);
	}
	
    /**
     * Adds a value to property HasContactMedium from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasContactMedium(ContactMedium value) {
		Base.add(this.model, this.getResource(), HASCONTACTMEDIUM, value);
	}
  

    /**
     * Sets a value of property HasContactMedium from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASCONTACTMEDIUM, value);
	}
	
    /**
     * Sets a value of property HasContactMedium from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasContactMedium( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASCONTACTMEDIUM, value);
	}
    /**
     * Sets a value of property HasContactMedium from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, ContactMedium value) {
		Base.set(model, instanceResource, HASCONTACTMEDIUM, value);
	}
	
    /**
     * Sets a value of property HasContactMedium from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasContactMedium(ContactMedium value) {
		Base.set(this.model, this.getResource(), HASCONTACTMEDIUM, value);
	}
  


    /**
     * Removes a value of property HasContactMedium as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASCONTACTMEDIUM, value);
	}
	
    /**
     * Removes a value of property HasContactMedium as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasContactMedium( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASCONTACTMEDIUM, value);
	}
    /**
     * Removes a value of property HasContactMedium given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, ContactMedium value) {
		Base.remove(model, instanceResource, HASCONTACTMEDIUM, value);
	}
	
    /**
     * Removes a value of property HasContactMedium given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasContactMedium(ContactMedium value) {
		Base.remove(this.model, this.getResource(), HASCONTACTMEDIUM, value);
	}
  
    /**
     * Removes all values of property HasContactMedium     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASCONTACTMEDIUM);
	}
	
    /**
     * Removes all values of property HasContactMedium	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasContactMedium() {
		Base.removeAll(this.model, this.getResource(), HASCONTACTMEDIUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@584e97 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASEMAILADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@584e97 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasEmailAddress() {
		return Base.has(this.model, this.getResource(), HASEMAILADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@584e97 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASEMAILADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@584e97 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasEmailAddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASEMAILADDRESS);
	}

     /**
     * Get all values of property HasEmailAddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasEmailAddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASEMAILADDRESS);
	}
	
    /**
     * Get all values of property HasEmailAddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasEmailAddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASEMAILADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasEmailAddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasEmailAddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASEMAILADDRESS);
	}

    /**
     * Get all values of property HasEmailAddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasEmailAddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASEMAILADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasEmailAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<EmailAddress> getAllHasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASEMAILADDRESS, EmailAddress.class);
	}
	
    /**
     * Get all values of property HasEmailAddress as a ReactorResult of EmailAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<EmailAddress> getAllHasEmailAddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASEMAILADDRESS, EmailAddress.class);
	}

    /**
     * Get all values of property HasEmailAddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<EmailAddress> getAllHasEmailAddress() {
		return Base.getAll(this.model, this.getResource(), HASEMAILADDRESS, EmailAddress.class);
	}

    /**
     * Get all values of property HasEmailAddress as a ReactorResult of EmailAddress 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<EmailAddress> getAllHasEmailAddress_as() {
		return Base.getAll_as(this.model, this.getResource(), HASEMAILADDRESS, EmailAddress.class);
	}
 
    /**
     * Adds a value to property HasEmailAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASEMAILADDRESS, value);
	}
	
    /**
     * Adds a value to property HasEmailAddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasEmailAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASEMAILADDRESS, value);
	}
    /**
     * Adds a value to property HasEmailAddress from an instance of EmailAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, EmailAddress value) {
		Base.add(model, instanceResource, HASEMAILADDRESS, value);
	}
	
    /**
     * Adds a value to property HasEmailAddress from an instance of EmailAddress 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasEmailAddress(EmailAddress value) {
		Base.add(this.model, this.getResource(), HASEMAILADDRESS, value);
	}
  

    /**
     * Sets a value of property HasEmailAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASEMAILADDRESS, value);
	}
	
    /**
     * Sets a value of property HasEmailAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasEmailAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASEMAILADDRESS, value);
	}
    /**
     * Sets a value of property HasEmailAddress from an instance of EmailAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, EmailAddress value) {
		Base.set(model, instanceResource, HASEMAILADDRESS, value);
	}
	
    /**
     * Sets a value of property HasEmailAddress from an instance of EmailAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasEmailAddress(EmailAddress value) {
		Base.set(this.model, this.getResource(), HASEMAILADDRESS, value);
	}
  


    /**
     * Removes a value of property HasEmailAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASEMAILADDRESS, value);
	}
	
    /**
     * Removes a value of property HasEmailAddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasEmailAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASEMAILADDRESS, value);
	}
    /**
     * Removes a value of property HasEmailAddress given as an instance of EmailAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, EmailAddress value) {
		Base.remove(model, instanceResource, HASEMAILADDRESS, value);
	}
	
    /**
     * Removes a value of property HasEmailAddress given as an instance of EmailAddress 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasEmailAddress(EmailAddress value) {
		Base.remove(this.model, this.getResource(), HASEMAILADDRESS, value);
	}
  
    /**
     * Removes all values of property HasEmailAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASEMAILADDRESS);
	}
	
    /**
     * Removes all values of property HasEmailAddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasEmailAddress() {
		Base.removeAll(this.model, this.getResource(), HASEMAILADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ace8d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASIMACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ace8d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasIMAccount() {
		return Base.has(this.model, this.getResource(), HASIMACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ace8d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASIMACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ace8d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasIMAccount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASIMACCOUNT);
	}

     /**
     * Get all values of property HasIMAccount as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasIMAccount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASIMACCOUNT);
	}
	
    /**
     * Get all values of property HasIMAccount as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasIMAccount_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASIMACCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasIMAccount as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasIMAccount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASIMACCOUNT);
	}

    /**
     * Get all values of property HasIMAccount as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasIMAccount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASIMACCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasIMAccount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<IMAccount> getAllHasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASIMACCOUNT, IMAccount.class);
	}
	
    /**
     * Get all values of property HasIMAccount as a ReactorResult of IMAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<IMAccount> getAllHasIMAccount_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASIMACCOUNT, IMAccount.class);
	}

    /**
     * Get all values of property HasIMAccount     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<IMAccount> getAllHasIMAccount() {
		return Base.getAll(this.model, this.getResource(), HASIMACCOUNT, IMAccount.class);
	}

    /**
     * Get all values of property HasIMAccount as a ReactorResult of IMAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<IMAccount> getAllHasIMAccount_as() {
		return Base.getAll_as(this.model, this.getResource(), HASIMACCOUNT, IMAccount.class);
	}
 
    /**
     * Adds a value to property HasIMAccount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASIMACCOUNT, value);
	}
	
    /**
     * Adds a value to property HasIMAccount as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasIMAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASIMACCOUNT, value);
	}
    /**
     * Adds a value to property HasIMAccount from an instance of IMAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, IMAccount value) {
		Base.add(model, instanceResource, HASIMACCOUNT, value);
	}
	
    /**
     * Adds a value to property HasIMAccount from an instance of IMAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasIMAccount(IMAccount value) {
		Base.add(this.model, this.getResource(), HASIMACCOUNT, value);
	}
  

    /**
     * Sets a value of property HasIMAccount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASIMACCOUNT, value);
	}
	
    /**
     * Sets a value of property HasIMAccount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasIMAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASIMACCOUNT, value);
	}
    /**
     * Sets a value of property HasIMAccount from an instance of IMAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, IMAccount value) {
		Base.set(model, instanceResource, HASIMACCOUNT, value);
	}
	
    /**
     * Sets a value of property HasIMAccount from an instance of IMAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasIMAccount(IMAccount value) {
		Base.set(this.model, this.getResource(), HASIMACCOUNT, value);
	}
  


    /**
     * Removes a value of property HasIMAccount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASIMACCOUNT, value);
	}
	
    /**
     * Removes a value of property HasIMAccount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasIMAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASIMACCOUNT, value);
	}
    /**
     * Removes a value of property HasIMAccount given as an instance of IMAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, IMAccount value) {
		Base.remove(model, instanceResource, HASIMACCOUNT, value);
	}
	
    /**
     * Removes a value of property HasIMAccount given as an instance of IMAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasIMAccount(IMAccount value) {
		Base.remove(this.model, this.getResource(), HASIMACCOUNT, value);
	}
  
    /**
     * Removes all values of property HasIMAccount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASIMACCOUNT);
	}
	
    /**
     * Removes all values of property HasIMAccount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasIMAccount() {
		Base.removeAll(this.model, this.getResource(), HASIMACCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1dc8ea3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASPHONENUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1dc8ea3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasPhoneNumber() {
		return Base.has(this.model, this.getResource(), HASPHONENUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1dc8ea3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASPHONENUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1dc8ea3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasPhoneNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASPHONENUMBER);
	}

     /**
     * Get all values of property HasPhoneNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPhoneNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASPHONENUMBER);
	}
	
    /**
     * Get all values of property HasPhoneNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasPhoneNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASPHONENUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasPhoneNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPhoneNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASPHONENUMBER);
	}

    /**
     * Get all values of property HasPhoneNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasPhoneNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASPHONENUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasPhoneNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<PhoneNumber> getAllHasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASPHONENUMBER, PhoneNumber.class);
	}
	
    /**
     * Get all values of property HasPhoneNumber as a ReactorResult of PhoneNumber 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<PhoneNumber> getAllHasPhoneNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASPHONENUMBER, PhoneNumber.class);
	}

    /**
     * Get all values of property HasPhoneNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<PhoneNumber> getAllHasPhoneNumber() {
		return Base.getAll(this.model, this.getResource(), HASPHONENUMBER, PhoneNumber.class);
	}

    /**
     * Get all values of property HasPhoneNumber as a ReactorResult of PhoneNumber 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<PhoneNumber> getAllHasPhoneNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), HASPHONENUMBER, PhoneNumber.class);
	}
 
    /**
     * Adds a value to property HasPhoneNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasPhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASPHONENUMBER, value);
	}
	
    /**
     * Adds a value to property HasPhoneNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasPhoneNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASPHONENUMBER, value);
	}
    /**
     * Adds a value to property HasPhoneNumber from an instance of PhoneNumber 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, PhoneNumber value) {
		Base.add(model, instanceResource, HASPHONENUMBER, value);
	}
	
    /**
     * Adds a value to property HasPhoneNumber from an instance of PhoneNumber 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasPhoneNumber(PhoneNumber value) {
		Base.add(this.model, this.getResource(), HASPHONENUMBER, value);
	}
  

    /**
     * Sets a value of property HasPhoneNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasPhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASPHONENUMBER, value);
	}
	
    /**
     * Sets a value of property HasPhoneNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasPhoneNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASPHONENUMBER, value);
	}
    /**
     * Sets a value of property HasPhoneNumber from an instance of PhoneNumber 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, PhoneNumber value) {
		Base.set(model, instanceResource, HASPHONENUMBER, value);
	}
	
    /**
     * Sets a value of property HasPhoneNumber from an instance of PhoneNumber 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasPhoneNumber(PhoneNumber value) {
		Base.set(this.model, this.getResource(), HASPHONENUMBER, value);
	}
  


    /**
     * Removes a value of property HasPhoneNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasPhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASPHONENUMBER, value);
	}
	
    /**
     * Removes a value of property HasPhoneNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasPhoneNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASPHONENUMBER, value);
	}
    /**
     * Removes a value of property HasPhoneNumber given as an instance of PhoneNumber 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, PhoneNumber value) {
		Base.remove(model, instanceResource, HASPHONENUMBER, value);
	}
	
    /**
     * Removes a value of property HasPhoneNumber given as an instance of PhoneNumber 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasPhoneNumber(PhoneNumber value) {
		Base.remove(this.model, this.getResource(), HASPHONENUMBER, value);
	}
  
    /**
     * Removes all values of property HasPhoneNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasPhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASPHONENUMBER);
	}
	
    /**
     * Removes all values of property HasPhoneNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasPhoneNumber() {
		Base.removeAll(this.model, this.getResource(), HASPHONENUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d25538 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASPOSTALADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d25538 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasPostalAddress() {
		return Base.has(this.model, this.getResource(), HASPOSTALADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d25538 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASPOSTALADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d25538 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasPostalAddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASPOSTALADDRESS);
	}

     /**
     * Get all values of property HasPostalAddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPostalAddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASPOSTALADDRESS);
	}
	
    /**
     * Get all values of property HasPostalAddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasPostalAddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASPOSTALADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasPostalAddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPostalAddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASPOSTALADDRESS);
	}

    /**
     * Get all values of property HasPostalAddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasPostalAddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASPOSTALADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasPostalAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<PostalAddress> getAllHasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASPOSTALADDRESS, PostalAddress.class);
	}
	
    /**
     * Get all values of property HasPostalAddress as a ReactorResult of PostalAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<PostalAddress> getAllHasPostalAddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASPOSTALADDRESS, PostalAddress.class);
	}

    /**
     * Get all values of property HasPostalAddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<PostalAddress> getAllHasPostalAddress() {
		return Base.getAll(this.model, this.getResource(), HASPOSTALADDRESS, PostalAddress.class);
	}

    /**
     * Get all values of property HasPostalAddress as a ReactorResult of PostalAddress 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<PostalAddress> getAllHasPostalAddress_as() {
		return Base.getAll_as(this.model, this.getResource(), HASPOSTALADDRESS, PostalAddress.class);
	}
 
    /**
     * Adds a value to property HasPostalAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasPostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASPOSTALADDRESS, value);
	}
	
    /**
     * Adds a value to property HasPostalAddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasPostalAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASPOSTALADDRESS, value);
	}
    /**
     * Adds a value to property HasPostalAddress from an instance of PostalAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, PostalAddress value) {
		Base.add(model, instanceResource, HASPOSTALADDRESS, value);
	}
	
    /**
     * Adds a value to property HasPostalAddress from an instance of PostalAddress 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasPostalAddress(PostalAddress value) {
		Base.add(this.model, this.getResource(), HASPOSTALADDRESS, value);
	}
  

    /**
     * Sets a value of property HasPostalAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasPostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASPOSTALADDRESS, value);
	}
	
    /**
     * Sets a value of property HasPostalAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasPostalAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASPOSTALADDRESS, value);
	}
    /**
     * Sets a value of property HasPostalAddress from an instance of PostalAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, PostalAddress value) {
		Base.set(model, instanceResource, HASPOSTALADDRESS, value);
	}
	
    /**
     * Sets a value of property HasPostalAddress from an instance of PostalAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasPostalAddress(PostalAddress value) {
		Base.set(this.model, this.getResource(), HASPOSTALADDRESS, value);
	}
  


    /**
     * Removes a value of property HasPostalAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasPostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASPOSTALADDRESS, value);
	}
	
    /**
     * Removes a value of property HasPostalAddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasPostalAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASPOSTALADDRESS, value);
	}
    /**
     * Removes a value of property HasPostalAddress given as an instance of PostalAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, PostalAddress value) {
		Base.remove(model, instanceResource, HASPOSTALADDRESS, value);
	}
	
    /**
     * Removes a value of property HasPostalAddress given as an instance of PostalAddress 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasPostalAddress(PostalAddress value) {
		Base.remove(this.model, this.getResource(), HASPOSTALADDRESS, value);
	}
  
    /**
     * Removes all values of property HasPostalAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasPostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASPOSTALADDRESS);
	}
	
    /**
     * Removes all values of property HasPostalAddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasPostalAddress() {
		Base.removeAll(this.model, this.getResource(), HASPOSTALADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1acb189 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, URL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1acb189 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUrl() {
		return Base.has(this.model, this.getResource(), URL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1acb189 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, URL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1acb189 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), URL);
	}

     /**
     * Get all values of property Url as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, URL);
	}
	
    /**
     * Get all values of property Url as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Url as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), URL);
	}

    /**
     * Get all values of property Url as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), URL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Url     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Url as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Url     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl() {
		return Base.getAll(this.model, this.getResource(), URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Url as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Url as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, URL, value);
	}
	
    /**
     * Adds a value to property Url as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), URL, value);
	}
    /**
     * Adds a value to property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, URL, value);
	}
	
    /**
     * Adds a value to property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), URL, value);
	}
  

    /**
     * Sets a value of property Url from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, URL, value);
	}
	
    /**
     * Sets a value of property Url from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), URL, value);
	}
    /**
     * Sets a value of property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, URL, value);
	}
	
    /**
     * Sets a value of property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), URL, value);
	}
  


    /**
     * Removes a value of property Url as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, URL, value);
	}
	
    /**
     * Removes a value of property Url as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), URL, value);
	}
    /**
     * Removes a value of property Url given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, URL, value);
	}
	
    /**
     * Removes a value of property Url given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), URL, value);
	}
  
    /**
     * Removes all values of property Url     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, URL);
	}
	
    /**
     * Removes all values of property Url	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUrl() {
		Base.removeAll(this.model, this.getResource(), URL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c123d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WEBSITEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c123d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWebsiteUrl() {
		return Base.has(this.model, this.getResource(), WEBSITEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c123d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WEBSITEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c123d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWebsiteUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WEBSITEURL);
	}

     /**
     * Get all values of property WebsiteUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WEBSITEURL);
	}
	
    /**
     * Get all values of property WebsiteUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WEBSITEURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WebsiteUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WEBSITEURL);
	}

    /**
     * Get all values of property WebsiteUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WEBSITEURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WebsiteUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property WebsiteUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property WebsiteUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl() {
		return Base.getAll(this.model, this.getResource(), WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property WebsiteUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property WebsiteUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Adds a value to property WebsiteUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWebsiteUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WEBSITEURL, value);
	}
    /**
     * Adds a value to property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Adds a value to property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWebsiteUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), WEBSITEURL, value);
	}
  

    /**
     * Sets a value of property WebsiteUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Sets a value of property WebsiteUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWebsiteUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WEBSITEURL, value);
	}
    /**
     * Sets a value of property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Sets a value of property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWebsiteUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), WEBSITEURL, value);
	}
  


    /**
     * Removes a value of property WebsiteUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Removes a value of property WebsiteUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWebsiteUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WEBSITEURL, value);
	}
    /**
     * Removes a value of property WebsiteUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Removes a value of property WebsiteUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWebsiteUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), WEBSITEURL, value);
	}
  
    /**
     * Removes all values of property WebsiteUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WEBSITEURL);
	}
	
    /**
     * Removes all values of property WebsiteUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWebsiteUrl() {
		Base.removeAll(this.model, this.getResource(), WEBSITEURL);
	}
 }