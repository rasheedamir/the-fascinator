/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 11:49 AM
 */
package au.edu.usq.fascinator.common.nfo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ByteSize </li>
 *   <li> Created </li>
 *   <li> Creator </li>
 *   <li> Date </li>
 *   <li> FrontChannels </li>
 *   <li> IsPartOf </li>
 *   <li> LfeChannels </li>
 *   <li> Links </li>
 *   <li> LogicalPart </li>
 *   <li> Part </li>
 *   <li> RearChannels </li>
 *   <li> SideChannels </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 11:49 AM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize */
    @SuppressWarnings("hiding")
	public static final URI BYTESIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created */
    @SuppressWarnings("hiding")
	public static final URI CREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator */
    @SuppressWarnings("hiding")
	public static final URI CREATOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator",false);

    /** http://purl.org/dc/elements/1.1/date */
    @SuppressWarnings("hiding")
	public static final URI DATE = new URIImpl("http://purl.org/dc/elements/1.1/date",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels */
    @SuppressWarnings("hiding")
	public static final URI FRONTCHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf */
    @SuppressWarnings("hiding")
	public static final URI ISPARTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels */
    @SuppressWarnings("hiding")
	public static final URI LFECHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links */
    @SuppressWarnings("hiding")
	public static final URI LINKS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart */
    @SuppressWarnings("hiding")
	public static final URI LOGICALPART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart */
    @SuppressWarnings("hiding")
	public static final URI PART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels */
    @SuppressWarnings("hiding")
	public static final URI REARCHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels */
    @SuppressWarnings("hiding")
	public static final URI SIDECHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator",false),
      new URIImpl("http://purl.org/dc/elements/1.1/date",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ByteSize' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllByteSize_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BYTESIZE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ByteSize' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllByteSize_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BYTESIZE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ByteSize' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllByteSize_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BYTESIZE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCreated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ISPARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ISPARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ISPARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Links' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLinks_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LINKS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Links' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLinks_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LINKS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Links' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLinks_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LINKS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'LogicalPart' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLogicalPart_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LOGICALPART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'LogicalPart' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLogicalPart_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LOGICALPART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'LogicalPart' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLogicalPart_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LOGICALPART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fd541 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYTESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fd541 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByteSize() {
		return Base.has(this.model, this.getResource(), BYTESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fd541 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYTESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fd541 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByteSize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYTESIZE);
	}

     /**
     * Get all values of property ByteSize as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByteSize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYTESIZE);
	}
	
    /**
     * Get all values of property ByteSize as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByteSize_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYTESIZE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ByteSize as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByteSize_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYTESIZE);
	}

    /**
     * Get all values of property ByteSize as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByteSize_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYTESIZE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ByteSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYTESIZE, Thing.class);
	}
	
    /**
     * Get all values of property ByteSize as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllByteSize_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYTESIZE, Thing.class);
	}

    /**
     * Get all values of property ByteSize     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllByteSize() {
		return Base.getAll(this.model, this.getResource(), BYTESIZE, Thing.class);
	}

    /**
     * Get all values of property ByteSize as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllByteSize_as() {
		return Base.getAll_as(this.model, this.getResource(), BYTESIZE, Thing.class);
	}
 
    /**
     * Adds a value to property ByteSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Adds a value to property ByteSize as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addByteSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYTESIZE, value);
	}
    /**
     * Adds a value to property ByteSize from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Adds a value to property ByteSize from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addByteSize(Thing value) {
		Base.add(this.model, this.getResource(), BYTESIZE, value);
	}
  

    /**
     * Sets a value of property ByteSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Sets a value of property ByteSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByteSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYTESIZE, value);
	}
    /**
     * Sets a value of property ByteSize from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Sets a value of property ByteSize from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByteSize(Thing value) {
		Base.set(this.model, this.getResource(), BYTESIZE, value);
	}
  


    /**
     * Removes a value of property ByteSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Removes a value of property ByteSize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByteSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYTESIZE, value);
	}
    /**
     * Removes a value of property ByteSize given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByteSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BYTESIZE, value);
	}
	
    /**
     * Removes a value of property ByteSize given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByteSize(Thing value) {
		Base.remove(this.model, this.getResource(), BYTESIZE, value);
	}
  
    /**
     * Removes all values of property ByteSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByteSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYTESIZE);
	}
	
    /**
     * Removes all values of property ByteSize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByteSize() {
		Base.removeAll(this.model, this.getResource(), BYTESIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9f26c7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9f26c7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreated() {
		return Base.has(this.model, this.getResource(), CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9f26c7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9f26c7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATED);
	}

     /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATED);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATED);
	}

    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATED, Thing.class);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, Thing.class);
	}

    /**
     * Get all values of property Created     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCreated() {
		return Base.getAll(this.model, this.getResource(), CREATED, Thing.class);
	}

    /**
     * Get all values of property Created as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, Thing.class);
	}
 
    /**
     * Adds a value to property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Adds a value to property Created from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCreated(Thing value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
  

    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Sets a value of property Created from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreated(Thing value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
  


    /**
     * Removes a value of property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Removes a value of property Created given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreated(Thing value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
  
    /**
     * Removes all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATED);
	}
	
    /**
     * Removes all values of property Created	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreated() {
		Base.removeAll(this.model, this.getResource(), CREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e77ca4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e77ca4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreator() {
		return Base.has(this.model, this.getResource(), CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e77ca4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e77ca4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOR);
	}

     /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATOR);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATOR);
	}

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATOR, Thing.class);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCreator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, Thing.class);
	}

    /**
     * Get all values of property Creator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCreator() {
		return Base.getAll(this.model, this.getResource(), CREATOR, Thing.class);
	}

    /**
     * Get all values of property Creator as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCreator_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, Thing.class);
	}
 
    /**
     * Adds a value to property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Adds a value to property Creator from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCreator(Thing value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
  

    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Sets a value of property Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreator(Thing value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
  


    /**
     * Removes a value of property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Removes a value of property Creator given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreator(Thing value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
  
    /**
     * Removes all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATOR);
	}
	
    /**
     * Removes all values of property Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreator() {
		Base.removeAll(this.model, this.getResource(), CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6529c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6529c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDate() {
		return Base.has(this.model, this.getResource(), DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6529c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6529c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATE);
	}

     /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATE);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATE);
	}

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATE, Thing.class);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, Thing.class);
	}

    /**
     * Get all values of property Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDate() {
		return Base.getAll(this.model, this.getResource(), DATE, Thing.class);
	}

    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDate_as() {
		return Base.getAll_as(this.model, this.getResource(), DATE, Thing.class);
	}
 
    /**
     * Adds a value to property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
    /**
     * Adds a value to property Date from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDate(Thing value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
  

    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDate(Thing value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
  


    /**
     * Removes a value of property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
    /**
     * Removes a value of property Date given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDate(Thing value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
  
    /**
     * Removes all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATE);
	}
	
    /**
     * Removes all values of property Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDate() {
		Base.removeAll(this.model, this.getResource(), DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@93f61c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FRONTCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@93f61c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFrontChannels() {
		return Base.has(this.model, this.getResource(), FRONTCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@93f61c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FRONTCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@93f61c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFrontChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FRONTCHANNELS);
	}

     /**
     * Get all values of property FrontChannels as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFrontChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FRONTCHANNELS);
	}
	
    /**
     * Get all values of property FrontChannels as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFrontChannels_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FRONTCHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FrontChannels as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFrontChannels_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FRONTCHANNELS);
	}

    /**
     * Get all values of property FrontChannels as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFrontChannels_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FRONTCHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FrontChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FRONTCHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property FrontChannels as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllFrontChannels_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FRONTCHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property FrontChannels     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllFrontChannels() {
		return Base.getAll(this.model, this.getResource(), FRONTCHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property FrontChannels as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllFrontChannels_as() {
		return Base.getAll_as(this.model, this.getResource(), FRONTCHANNELS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property FrontChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Adds a value to property FrontChannels as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFrontChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FRONTCHANNELS, value);
	}
    /**
     * Adds a value to property FrontChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Adds a value to property FrontChannels from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFrontChannels(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), FRONTCHANNELS, value);
	}
  

    /**
     * Sets a value of property FrontChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Sets a value of property FrontChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFrontChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FRONTCHANNELS, value);
	}
    /**
     * Sets a value of property FrontChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Sets a value of property FrontChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFrontChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), FRONTCHANNELS, value);
	}
  


    /**
     * Removes a value of property FrontChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Removes a value of property FrontChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFrontChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FRONTCHANNELS, value);
	}
    /**
     * Removes a value of property FrontChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Removes a value of property FrontChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFrontChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), FRONTCHANNELS, value);
	}
  
    /**
     * Removes all values of property FrontChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FRONTCHANNELS);
	}
	
    /**
     * Removes all values of property FrontChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFrontChannels() {
		Base.removeAll(this.model, this.getResource(), FRONTCHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d115db has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d115db has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsPartOf() {
		return Base.has(this.model, this.getResource(), ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d115db has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d115db has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISPARTOF);
	}

     /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISPARTOF);
	}
	
    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
	}

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISPARTOF, Thing.class);
	}
	
    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllIsPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISPARTOF, Thing.class);
	}

    /**
     * Get all values of property IsPartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllIsPartOf() {
		return Base.getAll(this.model, this.getResource(), ISPARTOF, Thing.class);
	}

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllIsPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISPARTOF, Thing.class);
	}
 
    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Adds a value to property IsPartOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Adds a value to property IsPartOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsPartOf(Thing value) {
		Base.add(this.model, this.getResource(), ISPARTOF, value);
	}
  

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsPartOf(Thing value) {
		Base.set(this.model, this.getResource(), ISPARTOF, value);
	}
  


    /**
     * Removes a value of property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Removes a value of property IsPartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISPARTOF, value);
	}
    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ISPARTOF, value);
	}
	
    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsPartOf(Thing value) {
		Base.remove(this.model, this.getResource(), ISPARTOF, value);
	}
  
    /**
     * Removes all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISPARTOF);
	}
	
    /**
     * Removes all values of property IsPartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsPartOf() {
		Base.removeAll(this.model, this.getResource(), ISPARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154bb1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LFECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154bb1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLfeChannels() {
		return Base.has(this.model, this.getResource(), LFECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154bb1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LFECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154bb1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLfeChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LFECHANNELS);
	}

     /**
     * Get all values of property LfeChannels as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLfeChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LFECHANNELS);
	}
	
    /**
     * Get all values of property LfeChannels as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLfeChannels_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LFECHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LfeChannels as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLfeChannels_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LFECHANNELS);
	}

    /**
     * Get all values of property LfeChannels as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLfeChannels_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LFECHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LfeChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LFECHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property LfeChannels as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllLfeChannels_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LFECHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property LfeChannels     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllLfeChannels() {
		return Base.getAll(this.model, this.getResource(), LFECHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property LfeChannels as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllLfeChannels_as() {
		return Base.getAll_as(this.model, this.getResource(), LFECHANNELS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property LfeChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Adds a value to property LfeChannels as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLfeChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LFECHANNELS, value);
	}
    /**
     * Adds a value to property LfeChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Adds a value to property LfeChannels from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLfeChannels(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), LFECHANNELS, value);
	}
  

    /**
     * Sets a value of property LfeChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Sets a value of property LfeChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLfeChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LFECHANNELS, value);
	}
    /**
     * Sets a value of property LfeChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Sets a value of property LfeChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLfeChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), LFECHANNELS, value);
	}
  


    /**
     * Removes a value of property LfeChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Removes a value of property LfeChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLfeChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LFECHANNELS, value);
	}
    /**
     * Removes a value of property LfeChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Removes a value of property LfeChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLfeChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), LFECHANNELS, value);
	}
  
    /**
     * Removes all values of property LfeChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LFECHANNELS);
	}
	
    /**
     * Removes all values of property LfeChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLfeChannels() {
		Base.removeAll(this.model, this.getResource(), LFECHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ad419 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LINKS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ad419 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLinks() {
		return Base.has(this.model, this.getResource(), LINKS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ad419 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LINKS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ad419 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLinks( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LINKS);
	}

     /**
     * Get all values of property Links as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LINKS);
	}
	
    /**
     * Get all values of property Links as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Links as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LINKS);
	}

    /**
     * Get all values of property Links as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LINKS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Links     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LINKS, Thing.class);
	}
	
    /**
     * Get all values of property Links as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllLinks_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKS, Thing.class);
	}

    /**
     * Get all values of property Links     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllLinks() {
		return Base.getAll(this.model, this.getResource(), LINKS, Thing.class);
	}

    /**
     * Get all values of property Links as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllLinks_as() {
		return Base.getAll_as(this.model, this.getResource(), LINKS, Thing.class);
	}
 
    /**
     * Adds a value to property Links as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LINKS, value);
	}
	
    /**
     * Adds a value to property Links as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLinks( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LINKS, value);
	}
    /**
     * Adds a value to property Links from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, LINKS, value);
	}
	
    /**
     * Adds a value to property Links from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLinks(Thing value) {
		Base.add(this.model, this.getResource(), LINKS, value);
	}
  

    /**
     * Sets a value of property Links from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LINKS, value);
	}
	
    /**
     * Sets a value of property Links from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLinks( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LINKS, value);
	}
    /**
     * Sets a value of property Links from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, LINKS, value);
	}
	
    /**
     * Sets a value of property Links from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLinks(Thing value) {
		Base.set(this.model, this.getResource(), LINKS, value);
	}
  


    /**
     * Removes a value of property Links as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LINKS, value);
	}
	
    /**
     * Removes a value of property Links as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLinks( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LINKS, value);
	}
    /**
     * Removes a value of property Links given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, LINKS, value);
	}
	
    /**
     * Removes a value of property Links given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLinks(Thing value) {
		Base.remove(this.model, this.getResource(), LINKS, value);
	}
  
    /**
     * Removes all values of property Links     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LINKS);
	}
	
    /**
     * Removes all values of property Links	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLinks() {
		Base.removeAll(this.model, this.getResource(), LINKS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad4bb0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOGICALPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad4bb0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLogicalPart() {
		return Base.has(this.model, this.getResource(), LOGICALPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad4bb0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOGICALPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ad4bb0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLogicalPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOGICALPART);
	}

     /**
     * Get all values of property LogicalPart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOGICALPART);
	}
	
    /**
     * Get all values of property LogicalPart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGICALPART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LogicalPart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOGICALPART);
	}

    /**
     * Get all values of property LogicalPart as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOGICALPART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LogicalPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOGICALPART, Thing.class);
	}
	
    /**
     * Get all values of property LogicalPart as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllLogicalPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGICALPART, Thing.class);
	}

    /**
     * Get all values of property LogicalPart     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllLogicalPart() {
		return Base.getAll(this.model, this.getResource(), LOGICALPART, Thing.class);
	}

    /**
     * Get all values of property LogicalPart as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllLogicalPart_as() {
		return Base.getAll_as(this.model, this.getResource(), LOGICALPART, Thing.class);
	}
 
    /**
     * Adds a value to property LogicalPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Adds a value to property LogicalPart as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLogicalPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOGICALPART, value);
	}
    /**
     * Adds a value to property LogicalPart from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Adds a value to property LogicalPart from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLogicalPart(Thing value) {
		Base.add(this.model, this.getResource(), LOGICALPART, value);
	}
  

    /**
     * Sets a value of property LogicalPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Sets a value of property LogicalPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLogicalPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOGICALPART, value);
	}
    /**
     * Sets a value of property LogicalPart from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Sets a value of property LogicalPart from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLogicalPart(Thing value) {
		Base.set(this.model, this.getResource(), LOGICALPART, value);
	}
  


    /**
     * Removes a value of property LogicalPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Removes a value of property LogicalPart as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLogicalPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOGICALPART, value);
	}
    /**
     * Removes a value of property LogicalPart given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Removes a value of property LogicalPart given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLogicalPart(Thing value) {
		Base.remove(this.model, this.getResource(), LOGICALPART, value);
	}
  
    /**
     * Removes all values of property LogicalPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOGICALPART);
	}
	
    /**
     * Removes all values of property LogicalPart	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLogicalPart() {
		Base.removeAll(this.model, this.getResource(), LOGICALPART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13ebc5c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13ebc5c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPart() {
		return Base.has(this.model, this.getResource(), PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13ebc5c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13ebc5c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PART);
	}

     /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PART);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PART);
	}

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PART, Thing.class);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, Thing.class);
	}

    /**
     * Get all values of property Part     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPart() {
		return Base.getAll(this.model, this.getResource(), PART, Thing.class);
	}

    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPart_as() {
		return Base.getAll_as(this.model, this.getResource(), PART, Thing.class);
	}
 
    /**
     * Adds a value to property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
    /**
     * Adds a value to property Part from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPart(Thing value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
  

    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPart(Thing value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
  


    /**
     * Removes a value of property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
    /**
     * Removes a value of property Part given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePart(Thing value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
  
    /**
     * Removes all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PART);
	}
	
    /**
     * Removes all values of property Part	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPart() {
		Base.removeAll(this.model, this.getResource(), PART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11a4131 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REARCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11a4131 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRearChannels() {
		return Base.has(this.model, this.getResource(), REARCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11a4131 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REARCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11a4131 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRearChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REARCHANNELS);
	}

     /**
     * Get all values of property RearChannels as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRearChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REARCHANNELS);
	}
	
    /**
     * Get all values of property RearChannels as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRearChannels_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REARCHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RearChannels as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRearChannels_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REARCHANNELS);
	}

    /**
     * Get all values of property RearChannels as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRearChannels_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REARCHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RearChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REARCHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property RearChannels as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllRearChannels_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REARCHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property RearChannels     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllRearChannels() {
		return Base.getAll(this.model, this.getResource(), REARCHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property RearChannels as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllRearChannels_as() {
		return Base.getAll_as(this.model, this.getResource(), REARCHANNELS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property RearChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Adds a value to property RearChannels as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRearChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REARCHANNELS, value);
	}
    /**
     * Adds a value to property RearChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Adds a value to property RearChannels from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRearChannels(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), REARCHANNELS, value);
	}
  

    /**
     * Sets a value of property RearChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Sets a value of property RearChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRearChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REARCHANNELS, value);
	}
    /**
     * Sets a value of property RearChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Sets a value of property RearChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRearChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), REARCHANNELS, value);
	}
  


    /**
     * Removes a value of property RearChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Removes a value of property RearChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRearChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REARCHANNELS, value);
	}
    /**
     * Removes a value of property RearChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Removes a value of property RearChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRearChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), REARCHANNELS, value);
	}
  
    /**
     * Removes all values of property RearChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REARCHANNELS);
	}
	
    /**
     * Removes all values of property RearChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRearChannels() {
		Base.removeAll(this.model, this.getResource(), REARCHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7359f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIDECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7359f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSideChannels() {
		return Base.has(this.model, this.getResource(), SIDECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7359f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIDECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7359f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSideChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIDECHANNELS);
	}

     /**
     * Get all values of property SideChannels as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSideChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIDECHANNELS);
	}
	
    /**
     * Get all values of property SideChannels as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSideChannels_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIDECHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SideChannels as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSideChannels_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIDECHANNELS);
	}

    /**
     * Get all values of property SideChannels as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSideChannels_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIDECHANNELS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SideChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIDECHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property SideChannels as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSideChannels_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIDECHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property SideChannels     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSideChannels() {
		return Base.getAll(this.model, this.getResource(), SIDECHANNELS, java.lang.Integer.class);
	}

    /**
     * Get all values of property SideChannels as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSideChannels_as() {
		return Base.getAll_as(this.model, this.getResource(), SIDECHANNELS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property SideChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Adds a value to property SideChannels as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSideChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SIDECHANNELS, value);
	}
    /**
     * Adds a value to property SideChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Adds a value to property SideChannels from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSideChannels(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), SIDECHANNELS, value);
	}
  

    /**
     * Sets a value of property SideChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Sets a value of property SideChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSideChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIDECHANNELS, value);
	}
    /**
     * Sets a value of property SideChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Sets a value of property SideChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSideChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SIDECHANNELS, value);
	}
  


    /**
     * Removes a value of property SideChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Removes a value of property SideChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSideChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIDECHANNELS, value);
	}
    /**
     * Removes a value of property SideChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Removes a value of property SideChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSideChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SIDECHANNELS, value);
	}
  
    /**
     * Removes all values of property SideChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIDECHANNELS);
	}
	
    /**
     * Removes all values of property SideChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSideChannels() {
		Base.removeAll(this.model, this.getResource(), SIDECHANNELS);
	}
 }