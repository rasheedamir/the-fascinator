import time
from au.edu.usq.fascinator.indexer.rules import AddField, CopyField, XslTransform

#
# Available objects:
#    indexer    : Indexer instance
#    jsonConfig : JsonConfigHelper of our harvest config file
#    rules      : RuleManager instance
#    object     : DigitalObject to index
#    payload    : Payload to index
#    params     : Metadata Properties object
#    pyUtils    : Utility object for accessing app logic
#

# dc to solr transform
rules.add(XslTransform(pyUtils.getResource("/xsl/DublinCoreToSolr.xsl")))

oid = object.getId()
pid = payload.getId()
metaPid = params.getProperty("metaPid", "DC")
if pid == metaPid:
    itemType = "object"
else:
    oid += "/" + pid
    itemType = "datastream"
    rules.add(AddField("identifier", pid))

rules.add(AddField("id", oid))
rules.add(AddField("storageId", oid))
rules.add(AddField("last_modified", time.strftime("%Y-%m-%dT%H:%M:%SZ")))
rules.add(AddField("item_type", itemType))
rules.add(AddField("item_class", "document"))

# Security
roles = pyUtils.getRolesWithAccess(oid)
if roles is not None:
    for role in roles:
        rules.add(AddField("security_filter", role))
else:
    # Default to guest access if Null object returned
    schema = pyUtils.getAccessSchema("simple");
    schema.setRecordId(oid)
    schema.set("role", "guest")
    pyUtils.setAccessSchema(schema, "simple")
    rules.add(AddField("security_filter", "guest"))

rules.add(AddField("repository_name", params["repository.name"]))
rules.add(AddField("repository_type", params["repository.type"]))

rules.add(CopyField("title", "dc.title"))
rules.add(CopyField("description", "dc.description"))

#pyUtils.registerNamespace("oai_dc", "http://www.openarchives.org/OAI/2.0/oai_dc/")
#pyUtils.registerNamespace("dc", "http://purl.org/dc/elements/1.1/")

#dc = pyUtils.getXmlDocument(object.getMetadata())
#titles = dc.selectNodes("//dc:title")
#for title in titles:
#    print " ***", title.getText()

