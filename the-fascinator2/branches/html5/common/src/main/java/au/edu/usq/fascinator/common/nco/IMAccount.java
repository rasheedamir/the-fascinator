/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 12:54 PM
 */
package au.edu.usq.fascinator.common.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ImAccountType </li>
 *   <li> ImID </li>
 *   <li> ImNickname </li>
 *   <li> ImStatus </li>
 *   <li> ImStatusMessage </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 12:54 PM
 */
public class IMAccount extends ContactMedium {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType */
    @SuppressWarnings("hiding")
	public static final URI IMACCOUNTTYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID */
    @SuppressWarnings("hiding")
	public static final URI IMID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname */
    @SuppressWarnings("hiding")
	public static final URI IMNICKNAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatus */
    @SuppressWarnings("hiding")
	public static final URI IMSTATUS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatus",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage */
    @SuppressWarnings("hiding")
	public static final URI IMSTATUSMESSAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imAccountType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imNickname",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatus",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#imStatusMessage",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected IMAccount ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public IMAccount ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public IMAccount ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public IMAccount ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public IMAccount ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of IMAccount  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static IMAccount  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, IMAccount.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#IMAccount).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends IMAccount> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, IMAccount.class );
	}

    /**
	 * Remove rdf:type IMAccount from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasIMAccount' to this IMAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasIMAccount_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Role.HASIMACCOUNT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasIMAccount' to this IMAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasIMAccount_Inverse() {
		return Base.getAll_Inverse(this.model, Role.HASIMACCOUNT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasIMAccount' to this IMAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHasIMAccount_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Role.HASIMACCOUNT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f634c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImAccountType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMACCOUNTTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f634c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImAccountType() {
		return Base.has(this.model, this.getResource(), IMACCOUNTTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f634c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImAccountType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMACCOUNTTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f634c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImAccountType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMACCOUNTTYPE);
	}

     /**
     * Get all values of property ImAccountType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImAccountType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMACCOUNTTYPE);
	}
	
    /**
     * Get all values of property ImAccountType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImAccountType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMACCOUNTTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImAccountType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImAccountType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMACCOUNTTYPE);
	}

    /**
     * Get all values of property ImAccountType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImAccountType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMACCOUNTTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImAccountType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImAccountType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMACCOUNTTYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImAccountType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImAccountType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMACCOUNTTYPE, java.lang.String.class);
	}

    /**
     * Get all values of property ImAccountType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImAccountType() {
		return Base.getAll(this.model, this.getResource(), IMACCOUNTTYPE, java.lang.String.class);
	}

    /**
     * Get all values of property ImAccountType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImAccountType_as() {
		return Base.getAll_as(this.model, this.getResource(), IMACCOUNTTYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImAccountType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImAccountType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMACCOUNTTYPE, value);
	}
	
    /**
     * Adds a value to property ImAccountType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImAccountType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMACCOUNTTYPE, value);
	}
    /**
     * Adds a value to property ImAccountType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImAccountType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMACCOUNTTYPE, value);
	}
	
    /**
     * Adds a value to property ImAccountType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImAccountType(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMACCOUNTTYPE, value);
	}
  

    /**
     * Sets a value of property ImAccountType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImAccountType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMACCOUNTTYPE, value);
	}
	
    /**
     * Sets a value of property ImAccountType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImAccountType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMACCOUNTTYPE, value);
	}
    /**
     * Sets a value of property ImAccountType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImAccountType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMACCOUNTTYPE, value);
	}
	
    /**
     * Sets a value of property ImAccountType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImAccountType(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMACCOUNTTYPE, value);
	}
  


    /**
     * Removes a value of property ImAccountType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImAccountType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMACCOUNTTYPE, value);
	}
	
    /**
     * Removes a value of property ImAccountType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImAccountType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMACCOUNTTYPE, value);
	}
    /**
     * Removes a value of property ImAccountType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImAccountType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMACCOUNTTYPE, value);
	}
	
    /**
     * Removes a value of property ImAccountType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImAccountType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMACCOUNTTYPE, value);
	}
  
    /**
     * Removes all values of property ImAccountType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImAccountType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMACCOUNTTYPE);
	}
	
    /**
     * Removes all values of property ImAccountType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImAccountType() {
		Base.removeAll(this.model, this.getResource(), IMACCOUNTTYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d75b9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d75b9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImID() {
		return Base.has(this.model, this.getResource(), IMID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d75b9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d75b9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMID);
	}

     /**
     * Get all values of property ImID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMID);
	}
	
    /**
     * Get all values of property ImID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMID);
	}

    /**
     * Get all values of property ImID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMID, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImID as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMID, java.lang.String.class);
	}

    /**
     * Get all values of property ImID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImID() {
		return Base.getAll(this.model, this.getResource(), IMID, java.lang.String.class);
	}

    /**
     * Get all values of property ImID as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImID_as() {
		return Base.getAll_as(this.model, this.getResource(), IMID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMID, value);
	}
	
    /**
     * Adds a value to property ImID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMID, value);
	}
    /**
     * Adds a value to property ImID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMID, value);
	}
	
    /**
     * Adds a value to property ImID from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImID(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMID, value);
	}
  

    /**
     * Sets a value of property ImID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMID, value);
	}
	
    /**
     * Sets a value of property ImID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMID, value);
	}
    /**
     * Sets a value of property ImID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMID, value);
	}
	
    /**
     * Sets a value of property ImID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImID(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMID, value);
	}
  


    /**
     * Removes a value of property ImID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMID, value);
	}
	
    /**
     * Removes a value of property ImID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMID, value);
	}
    /**
     * Removes a value of property ImID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMID, value);
	}
	
    /**
     * Removes a value of property ImID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMID, value);
	}
  
    /**
     * Removes all values of property ImID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMID);
	}
	
    /**
     * Removes all values of property ImID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImID() {
		Base.removeAll(this.model, this.getResource(), IMID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16a7c99 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMNICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16a7c99 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImNickname() {
		return Base.has(this.model, this.getResource(), IMNICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16a7c99 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMNICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16a7c99 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImNickname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMNICKNAME);
	}

     /**
     * Get all values of property ImNickname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImNickname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMNICKNAME);
	}
	
    /**
     * Get all values of property ImNickname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImNickname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMNICKNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImNickname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImNickname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMNICKNAME);
	}

    /**
     * Get all values of property ImNickname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImNickname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMNICKNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImNickname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMNICKNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImNickname as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImNickname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMNICKNAME, java.lang.String.class);
	}

    /**
     * Get all values of property ImNickname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImNickname() {
		return Base.getAll(this.model, this.getResource(), IMNICKNAME, java.lang.String.class);
	}

    /**
     * Get all values of property ImNickname as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImNickname_as() {
		return Base.getAll_as(this.model, this.getResource(), IMNICKNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImNickname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMNICKNAME, value);
	}
	
    /**
     * Adds a value to property ImNickname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMNICKNAME, value);
	}
    /**
     * Adds a value to property ImNickname from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMNICKNAME, value);
	}
	
    /**
     * Adds a value to property ImNickname from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImNickname(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMNICKNAME, value);
	}
  

    /**
     * Sets a value of property ImNickname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMNICKNAME, value);
	}
	
    /**
     * Sets a value of property ImNickname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMNICKNAME, value);
	}
    /**
     * Sets a value of property ImNickname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMNICKNAME, value);
	}
	
    /**
     * Sets a value of property ImNickname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImNickname(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMNICKNAME, value);
	}
  


    /**
     * Removes a value of property ImNickname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMNICKNAME, value);
	}
	
    /**
     * Removes a value of property ImNickname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMNICKNAME, value);
	}
    /**
     * Removes a value of property ImNickname given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMNICKNAME, value);
	}
	
    /**
     * Removes a value of property ImNickname given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImNickname(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMNICKNAME, value);
	}
  
    /**
     * Removes all values of property ImNickname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMNICKNAME);
	}
	
    /**
     * Removes all values of property ImNickname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImNickname() {
		Base.removeAll(this.model, this.getResource(), IMNICKNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f34a08 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f34a08 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImStatus() {
		return Base.has(this.model, this.getResource(), IMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f34a08 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f34a08 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImStatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMSTATUS);
	}

     /**
     * Get all values of property ImStatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImStatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMSTATUS);
	}
	
    /**
     * Get all values of property ImStatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImStatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImStatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImStatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMSTATUS);
	}

    /**
     * Get all values of property ImStatus as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImStatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMSTATUS, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImStatus as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImStatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMSTATUS, java.lang.String.class);
	}

    /**
     * Get all values of property ImStatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImStatus() {
		return Base.getAll(this.model, this.getResource(), IMSTATUS, java.lang.String.class);
	}

    /**
     * Get all values of property ImStatus as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImStatus_as() {
		return Base.getAll_as(this.model, this.getResource(), IMSTATUS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMSTATUS, value);
	}
	
    /**
     * Adds a value to property ImStatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMSTATUS, value);
	}
    /**
     * Adds a value to property ImStatus from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMSTATUS, value);
	}
	
    /**
     * Adds a value to property ImStatus from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImStatus(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMSTATUS, value);
	}
  

    /**
     * Sets a value of property ImStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMSTATUS, value);
	}
	
    /**
     * Sets a value of property ImStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMSTATUS, value);
	}
    /**
     * Sets a value of property ImStatus from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMSTATUS, value);
	}
	
    /**
     * Sets a value of property ImStatus from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImStatus(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMSTATUS, value);
	}
  


    /**
     * Removes a value of property ImStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMSTATUS, value);
	}
	
    /**
     * Removes a value of property ImStatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMSTATUS, value);
	}
    /**
     * Removes a value of property ImStatus given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMSTATUS, value);
	}
	
    /**
     * Removes a value of property ImStatus given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImStatus(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMSTATUS, value);
	}
  
    /**
     * Removes all values of property ImStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMSTATUS);
	}
	
    /**
     * Removes all values of property ImStatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImStatus() {
		Base.removeAll(this.model, this.getResource(), IMSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7946a2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImStatusMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMSTATUSMESSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7946a2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImStatusMessage() {
		return Base.has(this.model, this.getResource(), IMSTATUSMESSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7946a2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImStatusMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMSTATUSMESSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7946a2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImStatusMessage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMSTATUSMESSAGE);
	}

     /**
     * Get all values of property ImStatusMessage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImStatusMessage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMSTATUSMESSAGE);
	}
	
    /**
     * Get all values of property ImStatusMessage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImStatusMessage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMSTATUSMESSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImStatusMessage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImStatusMessage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMSTATUSMESSAGE);
	}

    /**
     * Get all values of property ImStatusMessage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImStatusMessage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMSTATUSMESSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImStatusMessage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImStatusMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMSTATUSMESSAGE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImStatusMessage as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImStatusMessage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMSTATUSMESSAGE, java.lang.String.class);
	}

    /**
     * Get all values of property ImStatusMessage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImStatusMessage() {
		return Base.getAll(this.model, this.getResource(), IMSTATUSMESSAGE, java.lang.String.class);
	}

    /**
     * Get all values of property ImStatusMessage as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImStatusMessage_as() {
		return Base.getAll_as(this.model, this.getResource(), IMSTATUSMESSAGE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImStatusMessage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImStatusMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMSTATUSMESSAGE, value);
	}
	
    /**
     * Adds a value to property ImStatusMessage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImStatusMessage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMSTATUSMESSAGE, value);
	}
    /**
     * Adds a value to property ImStatusMessage from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImStatusMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMSTATUSMESSAGE, value);
	}
	
    /**
     * Adds a value to property ImStatusMessage from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImStatusMessage(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMSTATUSMESSAGE, value);
	}
  

    /**
     * Sets a value of property ImStatusMessage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImStatusMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMSTATUSMESSAGE, value);
	}
	
    /**
     * Sets a value of property ImStatusMessage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImStatusMessage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMSTATUSMESSAGE, value);
	}
    /**
     * Sets a value of property ImStatusMessage from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImStatusMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMSTATUSMESSAGE, value);
	}
	
    /**
     * Sets a value of property ImStatusMessage from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImStatusMessage(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMSTATUSMESSAGE, value);
	}
  


    /**
     * Removes a value of property ImStatusMessage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImStatusMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMSTATUSMESSAGE, value);
	}
	
    /**
     * Removes a value of property ImStatusMessage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImStatusMessage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMSTATUSMESSAGE, value);
	}
    /**
     * Removes a value of property ImStatusMessage given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImStatusMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMSTATUSMESSAGE, value);
	}
	
    /**
     * Removes a value of property ImStatusMessage given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImStatusMessage(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMSTATUSMESSAGE, value);
	}
  
    /**
     * Removes all values of property ImStatusMessage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImStatusMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMSTATUSMESSAGE);
	}
	
    /**
     * Removes all values of property ImStatusMessage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImStatusMessage() {
		Base.removeAll(this.model, this.getResource(), IMSTATUSMESSAGE);
	}
 }