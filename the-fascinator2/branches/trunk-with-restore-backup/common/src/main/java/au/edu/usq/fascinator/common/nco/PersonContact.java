/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 12:54 PM
 */
package au.edu.usq.fascinator.common.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Gender </li>
 *   <li> HasAffiliation </li>
 *   <li> Hobby </li>
 *   <li> NameAdditional </li>
 *   <li> NameFamily </li>
 *   <li> NameGiven </li>
 *   <li> NameHonorificPrefix </li>
 *   <li> NameHonorificSuffix </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 12:54 PM
 */
public class PersonContact extends Contact {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender */
    @SuppressWarnings("hiding")
	public static final URI GENDER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation */
    @SuppressWarnings("hiding")
	public static final URI HASAFFILIATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby */
    @SuppressWarnings("hiding")
	public static final URI HOBBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional */
    @SuppressWarnings("hiding")
	public static final URI NAMEADDITIONAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily */
    @SuppressWarnings("hiding")
	public static final URI NAMEFAMILY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven */
    @SuppressWarnings("hiding")
	public static final URI NAMEGIVEN = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix */
    @SuppressWarnings("hiding")
	public static final URI NAMEHONORIFICPREFIX = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix */
    @SuppressWarnings("hiding")
	public static final URI NAMEHONORIFICSUFFIX = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected PersonContact ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public PersonContact ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public PersonContact ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public PersonContact ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public PersonContact ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PersonContact  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static PersonContact  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PersonContact.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends PersonContact> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PersonContact.class );
	}

    /**
	 * Remove rdf:type PersonContact from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@324ff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@324ff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGender() {
		return Base.has(this.model, this.getResource(), GENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@324ff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@324ff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGender( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENDER);
	}

     /**
     * Get all values of property Gender as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGender_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENDER);
	}
	
    /**
     * Get all values of property Gender as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGender_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENDER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Gender as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGender_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENDER);
	}

    /**
     * Get all values of property Gender as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGender_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENDER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Gender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Gender> getAllGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENDER, Gender.class);
	}
	
    /**
     * Get all values of property Gender as a ReactorResult of Gender 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Gender> getAllGender_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENDER, Gender.class);
	}

    /**
     * Get all values of property Gender     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Gender> getAllGender() {
		return Base.getAll(this.model, this.getResource(), GENDER, Gender.class);
	}

    /**
     * Get all values of property Gender as a ReactorResult of Gender 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Gender> getAllGender_as() {
		return Base.getAll_as(this.model, this.getResource(), GENDER, Gender.class);
	}
 
    /**
     * Adds a value to property Gender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENDER, value);
	}
	
    /**
     * Adds a value to property Gender as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGender( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENDER, value);
	}
    /**
     * Adds a value to property Gender from an instance of Gender 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Gender value) {
		Base.add(model, instanceResource, GENDER, value);
	}
	
    /**
     * Adds a value to property Gender from an instance of Gender 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGender(Gender value) {
		Base.add(this.model, this.getResource(), GENDER, value);
	}
  

    /**
     * Sets a value of property Gender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENDER, value);
	}
	
    /**
     * Sets a value of property Gender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGender( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENDER, value);
	}
    /**
     * Sets a value of property Gender from an instance of Gender 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Gender value) {
		Base.set(model, instanceResource, GENDER, value);
	}
	
    /**
     * Sets a value of property Gender from an instance of Gender 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGender(Gender value) {
		Base.set(this.model, this.getResource(), GENDER, value);
	}
  


    /**
     * Removes a value of property Gender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENDER, value);
	}
	
    /**
     * Removes a value of property Gender as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGender( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENDER, value);
	}
    /**
     * Removes a value of property Gender given as an instance of Gender 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Gender value) {
		Base.remove(model, instanceResource, GENDER, value);
	}
	
    /**
     * Removes a value of property Gender given as an instance of Gender 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGender(Gender value) {
		Base.remove(this.model, this.getResource(), GENDER, value);
	}
  
    /**
     * Removes all values of property Gender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENDER);
	}
	
    /**
     * Removes all values of property Gender	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGender() {
		Base.removeAll(this.model, this.getResource(), GENDER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16999c8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASAFFILIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16999c8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasAffiliation() {
		return Base.has(this.model, this.getResource(), HASAFFILIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16999c8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASAFFILIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16999c8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasAffiliation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASAFFILIATION);
	}

     /**
     * Get all values of property HasAffiliation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasAffiliation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASAFFILIATION);
	}
	
    /**
     * Get all values of property HasAffiliation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasAffiliation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASAFFILIATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasAffiliation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasAffiliation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASAFFILIATION);
	}

    /**
     * Get all values of property HasAffiliation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasAffiliation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASAFFILIATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasAffiliation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Affiliation> getAllHasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASAFFILIATION, Affiliation.class);
	}
	
    /**
     * Get all values of property HasAffiliation as a ReactorResult of Affiliation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Affiliation> getAllHasAffiliation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASAFFILIATION, Affiliation.class);
	}

    /**
     * Get all values of property HasAffiliation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Affiliation> getAllHasAffiliation() {
		return Base.getAll(this.model, this.getResource(), HASAFFILIATION, Affiliation.class);
	}

    /**
     * Get all values of property HasAffiliation as a ReactorResult of Affiliation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Affiliation> getAllHasAffiliation_as() {
		return Base.getAll_as(this.model, this.getResource(), HASAFFILIATION, Affiliation.class);
	}
 
    /**
     * Adds a value to property HasAffiliation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASAFFILIATION, value);
	}
	
    /**
     * Adds a value to property HasAffiliation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasAffiliation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASAFFILIATION, value);
	}
    /**
     * Adds a value to property HasAffiliation from an instance of Affiliation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Affiliation value) {
		Base.add(model, instanceResource, HASAFFILIATION, value);
	}
	
    /**
     * Adds a value to property HasAffiliation from an instance of Affiliation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasAffiliation(Affiliation value) {
		Base.add(this.model, this.getResource(), HASAFFILIATION, value);
	}
  

    /**
     * Sets a value of property HasAffiliation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASAFFILIATION, value);
	}
	
    /**
     * Sets a value of property HasAffiliation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasAffiliation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASAFFILIATION, value);
	}
    /**
     * Sets a value of property HasAffiliation from an instance of Affiliation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Affiliation value) {
		Base.set(model, instanceResource, HASAFFILIATION, value);
	}
	
    /**
     * Sets a value of property HasAffiliation from an instance of Affiliation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasAffiliation(Affiliation value) {
		Base.set(this.model, this.getResource(), HASAFFILIATION, value);
	}
  


    /**
     * Removes a value of property HasAffiliation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASAFFILIATION, value);
	}
	
    /**
     * Removes a value of property HasAffiliation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasAffiliation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASAFFILIATION, value);
	}
    /**
     * Removes a value of property HasAffiliation given as an instance of Affiliation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Affiliation value) {
		Base.remove(model, instanceResource, HASAFFILIATION, value);
	}
	
    /**
     * Removes a value of property HasAffiliation given as an instance of Affiliation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasAffiliation(Affiliation value) {
		Base.remove(this.model, this.getResource(), HASAFFILIATION, value);
	}
  
    /**
     * Removes all values of property HasAffiliation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASAFFILIATION);
	}
	
    /**
     * Removes all values of property HasAffiliation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasAffiliation() {
		Base.removeAll(this.model, this.getResource(), HASAFFILIATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@193b604 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HOBBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@193b604 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHobby() {
		return Base.has(this.model, this.getResource(), HOBBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@193b604 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HOBBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@193b604 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHobby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HOBBY);
	}

     /**
     * Get all values of property Hobby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HOBBY);
	}
	
    /**
     * Get all values of property Hobby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOBBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Hobby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HOBBY);
	}

    /**
     * Get all values of property Hobby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HOBBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Hobby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HOBBY, java.lang.String.class);
	}
	
    /**
     * Get all values of property Hobby as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllHobby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOBBY, java.lang.String.class);
	}

    /**
     * Get all values of property Hobby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllHobby() {
		return Base.getAll(this.model, this.getResource(), HOBBY, java.lang.String.class);
	}

    /**
     * Get all values of property Hobby as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllHobby_as() {
		return Base.getAll_as(this.model, this.getResource(), HOBBY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Hobby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Adds a value to property Hobby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHobby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HOBBY, value);
	}
    /**
     * Adds a value to property Hobby from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Adds a value to property Hobby from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHobby(java.lang.String value) {
		Base.add(this.model, this.getResource(), HOBBY, value);
	}
  

    /**
     * Sets a value of property Hobby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Sets a value of property Hobby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHobby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HOBBY, value);
	}
    /**
     * Sets a value of property Hobby from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Sets a value of property Hobby from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHobby(java.lang.String value) {
		Base.set(this.model, this.getResource(), HOBBY, value);
	}
  


    /**
     * Removes a value of property Hobby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Removes a value of property Hobby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHobby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HOBBY, value);
	}
    /**
     * Removes a value of property Hobby given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Removes a value of property Hobby given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHobby(java.lang.String value) {
		Base.remove(this.model, this.getResource(), HOBBY, value);
	}
  
    /**
     * Removes all values of property Hobby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HOBBY);
	}
	
    /**
     * Removes all values of property Hobby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHobby() {
		Base.removeAll(this.model, this.getResource(), HOBBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18806f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNameAdditional(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAMEADDITIONAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18806f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNameAdditional() {
		return Base.has(this.model, this.getResource(), NAMEADDITIONAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18806f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNameAdditional(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAMEADDITIONAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18806f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNameAdditional( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAMEADDITIONAL);
	}

     /**
     * Get all values of property NameAdditional as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameAdditional_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAMEADDITIONAL);
	}
	
    /**
     * Get all values of property NameAdditional as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameAdditional_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEADDITIONAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NameAdditional as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameAdditional_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAMEADDITIONAL);
	}

    /**
     * Get all values of property NameAdditional as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameAdditional_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAMEADDITIONAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NameAdditional     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNameAdditional(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAMEADDITIONAL, java.lang.String.class);
	}
	
    /**
     * Get all values of property NameAdditional as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNameAdditional_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEADDITIONAL, java.lang.String.class);
	}

    /**
     * Get all values of property NameAdditional     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNameAdditional() {
		return Base.getAll(this.model, this.getResource(), NAMEADDITIONAL, java.lang.String.class);
	}

    /**
     * Get all values of property NameAdditional as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNameAdditional_as() {
		return Base.getAll_as(this.model, this.getResource(), NAMEADDITIONAL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NameAdditional as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNameAdditional( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAMEADDITIONAL, value);
	}
	
    /**
     * Adds a value to property NameAdditional as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNameAdditional( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAMEADDITIONAL, value);
	}
    /**
     * Adds a value to property NameAdditional from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNameAdditional(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAMEADDITIONAL, value);
	}
	
    /**
     * Adds a value to property NameAdditional from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNameAdditional(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAMEADDITIONAL, value);
	}
  

    /**
     * Sets a value of property NameAdditional from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNameAdditional( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAMEADDITIONAL, value);
	}
	
    /**
     * Sets a value of property NameAdditional from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNameAdditional( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAMEADDITIONAL, value);
	}
    /**
     * Sets a value of property NameAdditional from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNameAdditional(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAMEADDITIONAL, value);
	}
	
    /**
     * Sets a value of property NameAdditional from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNameAdditional(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAMEADDITIONAL, value);
	}
  


    /**
     * Removes a value of property NameAdditional as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNameAdditional( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAMEADDITIONAL, value);
	}
	
    /**
     * Removes a value of property NameAdditional as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNameAdditional( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAMEADDITIONAL, value);
	}
    /**
     * Removes a value of property NameAdditional given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNameAdditional(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAMEADDITIONAL, value);
	}
	
    /**
     * Removes a value of property NameAdditional given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNameAdditional(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAMEADDITIONAL, value);
	}
  
    /**
     * Removes all values of property NameAdditional     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNameAdditional( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAMEADDITIONAL);
	}
	
    /**
     * Removes all values of property NameAdditional	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNameAdditional() {
		Base.removeAll(this.model, this.getResource(), NAMEADDITIONAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4ee5e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNameFamily(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAMEFAMILY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4ee5e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNameFamily() {
		return Base.has(this.model, this.getResource(), NAMEFAMILY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4ee5e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNameFamily(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAMEFAMILY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b4ee5e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNameFamily( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAMEFAMILY);
	}

     /**
     * Get all values of property NameFamily as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameFamily_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAMEFAMILY);
	}
	
    /**
     * Get all values of property NameFamily as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameFamily_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEFAMILY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NameFamily as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameFamily_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAMEFAMILY);
	}

    /**
     * Get all values of property NameFamily as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameFamily_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAMEFAMILY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NameFamily     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNameFamily(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAMEFAMILY, java.lang.String.class);
	}
	
    /**
     * Get all values of property NameFamily as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNameFamily_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEFAMILY, java.lang.String.class);
	}

    /**
     * Get all values of property NameFamily     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNameFamily() {
		return Base.getAll(this.model, this.getResource(), NAMEFAMILY, java.lang.String.class);
	}

    /**
     * Get all values of property NameFamily as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNameFamily_as() {
		return Base.getAll_as(this.model, this.getResource(), NAMEFAMILY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NameFamily as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNameFamily( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAMEFAMILY, value);
	}
	
    /**
     * Adds a value to property NameFamily as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNameFamily( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAMEFAMILY, value);
	}
    /**
     * Adds a value to property NameFamily from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNameFamily(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAMEFAMILY, value);
	}
	
    /**
     * Adds a value to property NameFamily from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNameFamily(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAMEFAMILY, value);
	}
  

    /**
     * Sets a value of property NameFamily from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNameFamily( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAMEFAMILY, value);
	}
	
    /**
     * Sets a value of property NameFamily from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNameFamily( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAMEFAMILY, value);
	}
    /**
     * Sets a value of property NameFamily from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNameFamily(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAMEFAMILY, value);
	}
	
    /**
     * Sets a value of property NameFamily from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNameFamily(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAMEFAMILY, value);
	}
  


    /**
     * Removes a value of property NameFamily as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNameFamily( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAMEFAMILY, value);
	}
	
    /**
     * Removes a value of property NameFamily as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNameFamily( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAMEFAMILY, value);
	}
    /**
     * Removes a value of property NameFamily given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNameFamily(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAMEFAMILY, value);
	}
	
    /**
     * Removes a value of property NameFamily given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNameFamily(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAMEFAMILY, value);
	}
  
    /**
     * Removes all values of property NameFamily     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNameFamily( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAMEFAMILY);
	}
	
    /**
     * Removes all values of property NameFamily	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNameFamily() {
		Base.removeAll(this.model, this.getResource(), NAMEFAMILY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a9ec16 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNameGiven(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAMEGIVEN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a9ec16 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNameGiven() {
		return Base.has(this.model, this.getResource(), NAMEGIVEN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a9ec16 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNameGiven(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAMEGIVEN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a9ec16 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNameGiven( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAMEGIVEN);
	}

     /**
     * Get all values of property NameGiven as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameGiven_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAMEGIVEN);
	}
	
    /**
     * Get all values of property NameGiven as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameGiven_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEGIVEN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NameGiven as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameGiven_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAMEGIVEN);
	}

    /**
     * Get all values of property NameGiven as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameGiven_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAMEGIVEN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NameGiven     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNameGiven(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAMEGIVEN, java.lang.String.class);
	}
	
    /**
     * Get all values of property NameGiven as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNameGiven_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEGIVEN, java.lang.String.class);
	}

    /**
     * Get all values of property NameGiven     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNameGiven() {
		return Base.getAll(this.model, this.getResource(), NAMEGIVEN, java.lang.String.class);
	}

    /**
     * Get all values of property NameGiven as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNameGiven_as() {
		return Base.getAll_as(this.model, this.getResource(), NAMEGIVEN, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NameGiven as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNameGiven( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAMEGIVEN, value);
	}
	
    /**
     * Adds a value to property NameGiven as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNameGiven( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAMEGIVEN, value);
	}
    /**
     * Adds a value to property NameGiven from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNameGiven(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAMEGIVEN, value);
	}
	
    /**
     * Adds a value to property NameGiven from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNameGiven(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAMEGIVEN, value);
	}
  

    /**
     * Sets a value of property NameGiven from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNameGiven( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAMEGIVEN, value);
	}
	
    /**
     * Sets a value of property NameGiven from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNameGiven( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAMEGIVEN, value);
	}
    /**
     * Sets a value of property NameGiven from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNameGiven(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAMEGIVEN, value);
	}
	
    /**
     * Sets a value of property NameGiven from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNameGiven(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAMEGIVEN, value);
	}
  


    /**
     * Removes a value of property NameGiven as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNameGiven( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAMEGIVEN, value);
	}
	
    /**
     * Removes a value of property NameGiven as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNameGiven( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAMEGIVEN, value);
	}
    /**
     * Removes a value of property NameGiven given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNameGiven(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAMEGIVEN, value);
	}
	
    /**
     * Removes a value of property NameGiven given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNameGiven(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAMEGIVEN, value);
	}
  
    /**
     * Removes all values of property NameGiven     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNameGiven( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAMEGIVEN);
	}
	
    /**
     * Removes all values of property NameGiven	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNameGiven() {
		Base.removeAll(this.model, this.getResource(), NAMEGIVEN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eea96c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNameHonorificPrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAMEHONORIFICPREFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eea96c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNameHonorificPrefix() {
		return Base.has(this.model, this.getResource(), NAMEHONORIFICPREFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eea96c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNameHonorificPrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAMEHONORIFICPREFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eea96c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNameHonorificPrefix( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAMEHONORIFICPREFIX);
	}

     /**
     * Get all values of property NameHonorificPrefix as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificPrefix_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAMEHONORIFICPREFIX);
	}
	
    /**
     * Get all values of property NameHonorificPrefix as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificPrefix_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEHONORIFICPREFIX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NameHonorificPrefix as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificPrefix_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAMEHONORIFICPREFIX);
	}

    /**
     * Get all values of property NameHonorificPrefix as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificPrefix_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAMEHONORIFICPREFIX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NameHonorificPrefix     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNameHonorificPrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAMEHONORIFICPREFIX, java.lang.String.class);
	}
	
    /**
     * Get all values of property NameHonorificPrefix as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNameHonorificPrefix_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEHONORIFICPREFIX, java.lang.String.class);
	}

    /**
     * Get all values of property NameHonorificPrefix     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNameHonorificPrefix() {
		return Base.getAll(this.model, this.getResource(), NAMEHONORIFICPREFIX, java.lang.String.class);
	}

    /**
     * Get all values of property NameHonorificPrefix as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNameHonorificPrefix_as() {
		return Base.getAll_as(this.model, this.getResource(), NAMEHONORIFICPREFIX, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NameHonorificPrefix as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNameHonorificPrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAMEHONORIFICPREFIX, value);
	}
	
    /**
     * Adds a value to property NameHonorificPrefix as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNameHonorificPrefix( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAMEHONORIFICPREFIX, value);
	}
    /**
     * Adds a value to property NameHonorificPrefix from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNameHonorificPrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAMEHONORIFICPREFIX, value);
	}
	
    /**
     * Adds a value to property NameHonorificPrefix from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNameHonorificPrefix(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAMEHONORIFICPREFIX, value);
	}
  

    /**
     * Sets a value of property NameHonorificPrefix from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNameHonorificPrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAMEHONORIFICPREFIX, value);
	}
	
    /**
     * Sets a value of property NameHonorificPrefix from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNameHonorificPrefix( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAMEHONORIFICPREFIX, value);
	}
    /**
     * Sets a value of property NameHonorificPrefix from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNameHonorificPrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAMEHONORIFICPREFIX, value);
	}
	
    /**
     * Sets a value of property NameHonorificPrefix from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNameHonorificPrefix(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAMEHONORIFICPREFIX, value);
	}
  


    /**
     * Removes a value of property NameHonorificPrefix as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNameHonorificPrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAMEHONORIFICPREFIX, value);
	}
	
    /**
     * Removes a value of property NameHonorificPrefix as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNameHonorificPrefix( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAMEHONORIFICPREFIX, value);
	}
    /**
     * Removes a value of property NameHonorificPrefix given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNameHonorificPrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAMEHONORIFICPREFIX, value);
	}
	
    /**
     * Removes a value of property NameHonorificPrefix given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNameHonorificPrefix(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAMEHONORIFICPREFIX, value);
	}
  
    /**
     * Removes all values of property NameHonorificPrefix     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNameHonorificPrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAMEHONORIFICPREFIX);
	}
	
    /**
     * Removes all values of property NameHonorificPrefix	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNameHonorificPrefix() {
		Base.removeAll(this.model, this.getResource(), NAMEHONORIFICPREFIX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c242 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNameHonorificSuffix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAMEHONORIFICSUFFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c242 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNameHonorificSuffix() {
		return Base.has(this.model, this.getResource(), NAMEHONORIFICSUFFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c242 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNameHonorificSuffix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAMEHONORIFICSUFFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c242 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNameHonorificSuffix( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAMEHONORIFICSUFFIX);
	}

     /**
     * Get all values of property NameHonorificSuffix as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificSuffix_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAMEHONORIFICSUFFIX);
	}
	
    /**
     * Get all values of property NameHonorificSuffix as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificSuffix_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEHONORIFICSUFFIX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NameHonorificSuffix as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificSuffix_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAMEHONORIFICSUFFIX);
	}

    /**
     * Get all values of property NameHonorificSuffix as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNameHonorificSuffix_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAMEHONORIFICSUFFIX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NameHonorificSuffix     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNameHonorificSuffix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAMEHONORIFICSUFFIX, java.lang.String.class);
	}
	
    /**
     * Get all values of property NameHonorificSuffix as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNameHonorificSuffix_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAMEHONORIFICSUFFIX, java.lang.String.class);
	}

    /**
     * Get all values of property NameHonorificSuffix     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNameHonorificSuffix() {
		return Base.getAll(this.model, this.getResource(), NAMEHONORIFICSUFFIX, java.lang.String.class);
	}

    /**
     * Get all values of property NameHonorificSuffix as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNameHonorificSuffix_as() {
		return Base.getAll_as(this.model, this.getResource(), NAMEHONORIFICSUFFIX, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NameHonorificSuffix as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNameHonorificSuffix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAMEHONORIFICSUFFIX, value);
	}
	
    /**
     * Adds a value to property NameHonorificSuffix as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNameHonorificSuffix( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAMEHONORIFICSUFFIX, value);
	}
    /**
     * Adds a value to property NameHonorificSuffix from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNameHonorificSuffix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAMEHONORIFICSUFFIX, value);
	}
	
    /**
     * Adds a value to property NameHonorificSuffix from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNameHonorificSuffix(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAMEHONORIFICSUFFIX, value);
	}
  

    /**
     * Sets a value of property NameHonorificSuffix from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNameHonorificSuffix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAMEHONORIFICSUFFIX, value);
	}
	
    /**
     * Sets a value of property NameHonorificSuffix from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNameHonorificSuffix( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAMEHONORIFICSUFFIX, value);
	}
    /**
     * Sets a value of property NameHonorificSuffix from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNameHonorificSuffix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAMEHONORIFICSUFFIX, value);
	}
	
    /**
     * Sets a value of property NameHonorificSuffix from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNameHonorificSuffix(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAMEHONORIFICSUFFIX, value);
	}
  


    /**
     * Removes a value of property NameHonorificSuffix as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNameHonorificSuffix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAMEHONORIFICSUFFIX, value);
	}
	
    /**
     * Removes a value of property NameHonorificSuffix as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNameHonorificSuffix( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAMEHONORIFICSUFFIX, value);
	}
    /**
     * Removes a value of property NameHonorificSuffix given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNameHonorificSuffix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAMEHONORIFICSUFFIX, value);
	}
	
    /**
     * Removes a value of property NameHonorificSuffix given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNameHonorificSuffix(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAMEHONORIFICSUFFIX, value);
	}
  
    /**
     * Removes all values of property NameHonorificSuffix     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNameHonorificSuffix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAMEHONORIFICSUFFIX);
	}
	
    /**
     * Removes all values of property NameHonorificSuffix	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNameHonorificSuffix() {
		Base.removeAll(this.model, this.getResource(), NAMEHONORIFICSUFFIX);
	}
 }