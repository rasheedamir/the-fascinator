/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 12:54 PM
 */
package au.edu.usq.fascinator.common.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AddressLocation </li>
 *   <li> BirthDate </li>
 *   <li> ContactUID </li>
 *   <li> Fullname </li>
 *   <li> HasLocation </li>
 *   <li> Key </li>
 *   <li> Nickname </li>
 *   <li> Note </li>
 *   <li> Photo </li>
 *   <li> Representative </li>
 *   <li> Sound </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 12:54 PM
 */
public class Contact extends InformationElement {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup */
    @SuppressWarnings("hiding")
	public static final URI ADDRESSLOCATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate */
    @SuppressWarnings("hiding")
	public static final URI BIRTHDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID */
    @SuppressWarnings("hiding")
	public static final URI CONTACTUID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname */
    @SuppressWarnings("hiding")
	public static final URI FULLNAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation */
    @SuppressWarnings("hiding")
	public static final URI HASLOCATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key */
    @SuppressWarnings("hiding")
	public static final URI KEY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname */
    @SuppressWarnings("hiding")
	public static final URI NICKNAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note */
    @SuppressWarnings("hiding")
	public static final URI NOTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo */
    @SuppressWarnings("hiding")
	public static final URI PHOTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative */
    @SuppressWarnings("hiding")
	public static final URI REPRESENTATIVE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound */
    @SuppressWarnings("hiding")
	public static final URI SOUND = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#birthDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#fullname",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nickname",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Contact ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Contact ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Contact ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Contact ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Contact ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Contact  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Contact  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Contact.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Contact> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Contact.class );
	}

    /**
	 * Remove rdf:type Contact from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Representative' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepresentative_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Contact.REPRESENTATIVE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Representative' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepresentative_Inverse() {
		return Base.getAll_Inverse(this.model, Contact.REPRESENTATIVE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Representative' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRepresentative_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Contact.REPRESENTATIVE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.CONTRIBUTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.CONTRIBUTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Contributor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.CONTRIBUTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creator' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NcoPublisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNcoPublisher_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, InformationElement.NCOPUBLISHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NcoPublisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNcoPublisher_Inverse() {
		return Base.getAll_Inverse(this.model, InformationElement.NCOPUBLISHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NcoPublisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNcoPublisher_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, InformationElement.NCOPUBLISHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1966070 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ADDRESSLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1966070 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAddressLocation() {
		return Base.has(this.model, this.getResource(), ADDRESSLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1966070 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADDRESSLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1966070 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAddressLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADDRESSLOCATION);
	}

     /**
     * Get all values of property AddressLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ADDRESSLOCATION);
	}
	
    /**
     * Get all values of property AddressLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADDRESSLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AddressLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADDRESSLOCATION);
	}

    /**
     * Get all values of property AddressLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAddressLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AddressLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<ContactGroup> getAllAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ADDRESSLOCATION, ContactGroup.class);
	}
	
    /**
     * Get all values of property AddressLocation as a ReactorResult of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<ContactGroup> getAllAddressLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADDRESSLOCATION, ContactGroup.class);
	}

    /**
     * Get all values of property AddressLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<ContactGroup> getAllAddressLocation() {
		return Base.getAll(this.model, this.getResource(), ADDRESSLOCATION, ContactGroup.class);
	}

    /**
     * Get all values of property AddressLocation as a ReactorResult of ContactGroup 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<ContactGroup> getAllAddressLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSLOCATION, ContactGroup.class);
	}
 
    /**
     * Adds a value to property AddressLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Adds a value to property AddressLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAddressLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
    /**
     * Adds a value to property AddressLocation from an instance of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, ContactGroup value) {
		Base.add(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Adds a value to property AddressLocation from an instance of ContactGroup 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAddressLocation(ContactGroup value) {
		Base.add(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
  

    /**
     * Sets a value of property AddressLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Sets a value of property AddressLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAddressLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
    /**
     * Sets a value of property AddressLocation from an instance of ContactGroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, ContactGroup value) {
		Base.set(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Sets a value of property AddressLocation from an instance of ContactGroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAddressLocation(ContactGroup value) {
		Base.set(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
  


    /**
     * Removes a value of property AddressLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Removes a value of property AddressLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAddressLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
    /**
     * Removes a value of property AddressLocation given as an instance of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAddressLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, ContactGroup value) {
		Base.remove(model, instanceResource, ADDRESSLOCATION, value);
	}
	
    /**
     * Removes a value of property AddressLocation given as an instance of ContactGroup 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAddressLocation(ContactGroup value) {
		Base.remove(this.model, this.getResource(), ADDRESSLOCATION, value);
	}
  
    /**
     * Removes all values of property AddressLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAddressLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ADDRESSLOCATION);
	}
	
    /**
     * Removes all values of property AddressLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAddressLocation() {
		Base.removeAll(this.model, this.getResource(), ADDRESSLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@930120 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BIRTHDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@930120 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBirthDate() {
		return Base.has(this.model, this.getResource(), BIRTHDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@930120 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BIRTHDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@930120 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBirthDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BIRTHDATE);
	}

     /**
     * Get all values of property BirthDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BIRTHDATE);
	}
	
    /**
     * Get all values of property BirthDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIRTHDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BirthDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BIRTHDATE);
	}

    /**
     * Get all values of property BirthDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BIRTHDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BirthDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BIRTHDATE, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property BirthDate as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllBirthDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIRTHDATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property BirthDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllBirthDate() {
		return Base.getAll(this.model, this.getResource(), BIRTHDATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property BirthDate as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllBirthDate_as() {
		return Base.getAll_as(this.model, this.getResource(), BIRTHDATE, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property BirthDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Adds a value to property BirthDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBirthDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BIRTHDATE, value);
	}
    /**
     * Adds a value to property BirthDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Adds a value to property BirthDate from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBirthDate(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), BIRTHDATE, value);
	}
  

    /**
     * Sets a value of property BirthDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Sets a value of property BirthDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBirthDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BIRTHDATE, value);
	}
    /**
     * Sets a value of property BirthDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Sets a value of property BirthDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBirthDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), BIRTHDATE, value);
	}
  


    /**
     * Removes a value of property BirthDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Removes a value of property BirthDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBirthDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BIRTHDATE, value);
	}
    /**
     * Removes a value of property BirthDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Removes a value of property BirthDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBirthDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), BIRTHDATE, value);
	}
  
    /**
     * Removes all values of property BirthDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BIRTHDATE);
	}
	
    /**
     * Removes all values of property BirthDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBirthDate() {
		Base.removeAll(this.model, this.getResource(), BIRTHDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11bda67 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTACTUID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11bda67 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContactUID() {
		return Base.has(this.model, this.getResource(), CONTACTUID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11bda67 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTACTUID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11bda67 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContactUID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTACTUID);
	}

     /**
     * Get all values of property ContactUID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContactUID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTACTUID);
	}
	
    /**
     * Get all values of property ContactUID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContactUID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTACTUID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContactUID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContactUID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTACTUID);
	}

    /**
     * Get all values of property ContactUID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContactUID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTACTUID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContactUID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTACTUID, java.lang.String.class);
	}
	
    /**
     * Get all values of property ContactUID as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllContactUID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTACTUID, java.lang.String.class);
	}

    /**
     * Get all values of property ContactUID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllContactUID() {
		return Base.getAll(this.model, this.getResource(), CONTACTUID, java.lang.String.class);
	}

    /**
     * Get all values of property ContactUID as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllContactUID_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTACTUID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ContactUID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Adds a value to property ContactUID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContactUID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTACTUID, value);
	}
    /**
     * Adds a value to property ContactUID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Adds a value to property ContactUID from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContactUID(java.lang.String value) {
		Base.add(this.model, this.getResource(), CONTACTUID, value);
	}
  

    /**
     * Sets a value of property ContactUID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Sets a value of property ContactUID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContactUID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTACTUID, value);
	}
    /**
     * Sets a value of property ContactUID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Sets a value of property ContactUID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContactUID(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTACTUID, value);
	}
  


    /**
     * Removes a value of property ContactUID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Removes a value of property ContactUID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContactUID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTACTUID, value);
	}
    /**
     * Removes a value of property ContactUID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Removes a value of property ContactUID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContactUID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTACTUID, value);
	}
  
    /**
     * Removes all values of property ContactUID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTACTUID);
	}
	
    /**
     * Removes all values of property ContactUID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContactUID() {
		Base.removeAll(this.model, this.getResource(), CONTACTUID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29b849 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFullname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FULLNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29b849 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFullname() {
		return Base.has(this.model, this.getResource(), FULLNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29b849 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFullname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FULLNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29b849 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFullname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FULLNAME);
	}

     /**
     * Get all values of property Fullname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFullname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FULLNAME);
	}
	
    /**
     * Get all values of property Fullname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFullname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FULLNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Fullname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFullname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FULLNAME);
	}

    /**
     * Get all values of property Fullname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFullname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FULLNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Fullname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFullname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FULLNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Fullname as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFullname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FULLNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Fullname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFullname() {
		return Base.getAll(this.model, this.getResource(), FULLNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Fullname as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFullname_as() {
		return Base.getAll_as(this.model, this.getResource(), FULLNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Fullname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFullname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Adds a value to property Fullname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFullname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FULLNAME, value);
	}
    /**
     * Adds a value to property Fullname from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFullname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Adds a value to property Fullname from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFullname(java.lang.String value) {
		Base.add(this.model, this.getResource(), FULLNAME, value);
	}
  

    /**
     * Sets a value of property Fullname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFullname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Sets a value of property Fullname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFullname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FULLNAME, value);
	}
    /**
     * Sets a value of property Fullname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFullname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Sets a value of property Fullname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFullname(java.lang.String value) {
		Base.set(this.model, this.getResource(), FULLNAME, value);
	}
  


    /**
     * Removes a value of property Fullname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFullname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Removes a value of property Fullname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFullname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FULLNAME, value);
	}
    /**
     * Removes a value of property Fullname given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFullname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Removes a value of property Fullname given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFullname(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FULLNAME, value);
	}
  
    /**
     * Removes all values of property Fullname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFullname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FULLNAME);
	}
	
    /**
     * Removes all values of property Fullname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFullname() {
		Base.removeAll(this.model, this.getResource(), FULLNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@166ff9c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@166ff9c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasLocation() {
		return Base.has(this.model, this.getResource(), HASLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@166ff9c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@166ff9c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASLOCATION);
	}

     /**
     * Get all values of property HasLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASLOCATION);
	}
	
    /**
     * Get all values of property HasLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASLOCATION);
	}

    /**
     * Get all values of property HasLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Point> getAllHasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASLOCATION, Point.class);
	}
	
    /**
     * Get all values of property HasLocation as a ReactorResult of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Point> getAllHasLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASLOCATION, Point.class);
	}

    /**
     * Get all values of property HasLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Point> getAllHasLocation() {
		return Base.getAll(this.model, this.getResource(), HASLOCATION, Point.class);
	}

    /**
     * Get all values of property HasLocation as a ReactorResult of Point 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Point> getAllHasLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), HASLOCATION, Point.class);
	}
 
    /**
     * Adds a value to property HasLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASLOCATION, value);
	}
	
    /**
     * Adds a value to property HasLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASLOCATION, value);
	}
    /**
     * Adds a value to property HasLocation from an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Point value) {
		Base.add(model, instanceResource, HASLOCATION, value);
	}
	
    /**
     * Adds a value to property HasLocation from an instance of Point 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasLocation(Point value) {
		Base.add(this.model, this.getResource(), HASLOCATION, value);
	}
  

    /**
     * Sets a value of property HasLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASLOCATION, value);
	}
	
    /**
     * Sets a value of property HasLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASLOCATION, value);
	}
    /**
     * Sets a value of property HasLocation from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Point value) {
		Base.set(model, instanceResource, HASLOCATION, value);
	}
	
    /**
     * Sets a value of property HasLocation from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasLocation(Point value) {
		Base.set(this.model, this.getResource(), HASLOCATION, value);
	}
  


    /**
     * Removes a value of property HasLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASLOCATION, value);
	}
	
    /**
     * Removes a value of property HasLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASLOCATION, value);
	}
    /**
     * Removes a value of property HasLocation given as an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Point value) {
		Base.remove(model, instanceResource, HASLOCATION, value);
	}
	
    /**
     * Removes a value of property HasLocation given as an instance of Point 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasLocation(Point value) {
		Base.remove(this.model, this.getResource(), HASLOCATION, value);
	}
  
    /**
     * Removes all values of property HasLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASLOCATION);
	}
	
    /**
     * Removes all values of property HasLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasLocation() {
		Base.removeAll(this.model, this.getResource(), HASLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dbd794 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dbd794 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasKey() {
		return Base.has(this.model, this.getResource(), KEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dbd794 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dbd794 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasKey( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KEY);
	}

     /**
     * Get all values of property Key as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KEY);
	}
	
    /**
     * Get all values of property Key as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Key as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KEY);
	}

    /**
     * Get all values of property Key as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KEY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Key     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataObject> getAllKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KEY, DataObject.class);
	}
	
    /**
     * Get all values of property Key as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataObject> getAllKey_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEY, DataObject.class);
	}

    /**
     * Get all values of property Key     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataObject> getAllKey() {
		return Base.getAll(this.model, this.getResource(), KEY, DataObject.class);
	}

    /**
     * Get all values of property Key as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataObject> getAllKey_as() {
		return Base.getAll_as(this.model, this.getResource(), KEY, DataObject.class);
	}
 
    /**
     * Adds a value to property Key as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KEY, value);
	}
	
    /**
     * Adds a value to property Key as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KEY, value);
	}
    /**
     * Adds a value to property Key from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.add(model, instanceResource, KEY, value);
	}
	
    /**
     * Adds a value to property Key from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addKey(DataObject value) {
		Base.add(this.model, this.getResource(), KEY, value);
	}
  

    /**
     * Sets a value of property Key from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KEY, value);
	}
	
    /**
     * Sets a value of property Key from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KEY, value);
	}
    /**
     * Sets a value of property Key from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.set(model, instanceResource, KEY, value);
	}
	
    /**
     * Sets a value of property Key from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setKey(DataObject value) {
		Base.set(this.model, this.getResource(), KEY, value);
	}
  


    /**
     * Removes a value of property Key as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KEY, value);
	}
	
    /**
     * Removes a value of property Key as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KEY, value);
	}
    /**
     * Removes a value of property Key given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.remove(model, instanceResource, KEY, value);
	}
	
    /**
     * Removes a value of property Key given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeKey(DataObject value) {
		Base.remove(this.model, this.getResource(), KEY, value);
	}
  
    /**
     * Removes all values of property Key     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KEY);
	}
	
    /**
     * Removes all values of property Key	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllKey() {
		Base.removeAll(this.model, this.getResource(), KEY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15023d2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15023d2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNickname() {
		return Base.has(this.model, this.getResource(), NICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15023d2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15023d2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNickname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NICKNAME);
	}

     /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNickname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NICKNAME);
	}
	
    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNickname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NICKNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNickname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NICKNAME);
	}

    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNickname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NICKNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nickname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NICKNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Nickname as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNickname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NICKNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Nickname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNickname() {
		return Base.getAll(this.model, this.getResource(), NICKNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Nickname as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNickname_as() {
		return Base.getAll_as(this.model, this.getResource(), NICKNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Nickname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Adds a value to property Nickname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NICKNAME, value);
	}
    /**
     * Adds a value to property Nickname from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Adds a value to property Nickname from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNickname(java.lang.String value) {
		Base.add(this.model, this.getResource(), NICKNAME, value);
	}
  

    /**
     * Sets a value of property Nickname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Sets a value of property Nickname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NICKNAME, value);
	}
    /**
     * Sets a value of property Nickname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Sets a value of property Nickname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNickname(java.lang.String value) {
		Base.set(this.model, this.getResource(), NICKNAME, value);
	}
  


    /**
     * Removes a value of property Nickname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Removes a value of property Nickname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NICKNAME, value);
	}
    /**
     * Removes a value of property Nickname given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Removes a value of property Nickname given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNickname(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NICKNAME, value);
	}
  
    /**
     * Removes all values of property Nickname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NICKNAME);
	}
	
    /**
     * Removes all values of property Nickname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNickname() {
		Base.removeAll(this.model, this.getResource(), NICKNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@554189 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@554189 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNote() {
		return Base.has(this.model, this.getResource(), NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@554189 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@554189 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NOTE);
	}

     /**
     * Get all values of property Note as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NOTE);
	}
	
    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NOTE);
	}

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Note     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NOTE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Note as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOTE, java.lang.String.class);
	}

    /**
     * Get all values of property Note     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNote() {
		return Base.getAll(this.model, this.getResource(), NOTE, java.lang.String.class);
	}

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNote_as() {
		return Base.getAll_as(this.model, this.getResource(), NOTE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Note as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NOTE, value);
	}
	
    /**
     * Adds a value to property Note as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Adds a value to property Note from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NOTE, value);
	}
	
    /**
     * Adds a value to property Note from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNote(java.lang.String value) {
		Base.add(this.model, this.getResource(), NOTE, value);
	}
  

    /**
     * Sets a value of property Note from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NOTE, value);
	}
	
    /**
     * Sets a value of property Note from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Sets a value of property Note from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NOTE, value);
	}
	
    /**
     * Sets a value of property Note from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNote(java.lang.String value) {
		Base.set(this.model, this.getResource(), NOTE, value);
	}
  


    /**
     * Removes a value of property Note as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NOTE, value);
	}
	
    /**
     * Removes a value of property Note as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Removes a value of property Note given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NOTE, value);
	}
	
    /**
     * Removes a value of property Note given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNote(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NOTE, value);
	}
  
    /**
     * Removes all values of property Note     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NOTE);
	}
	
    /**
     * Removes all values of property Note	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNote() {
		Base.removeAll(this.model, this.getResource(), NOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126965a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHOTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126965a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPhoto() {
		return Base.has(this.model, this.getResource(), PHOTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126965a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHOTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126965a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPhoto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHOTO);
	}

     /**
     * Get all values of property Photo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHOTO);
	}
	
    /**
     * Get all values of property Photo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHOTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Photo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHOTO);
	}

    /**
     * Get all values of property Photo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHOTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Photo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataObject> getAllPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHOTO, DataObject.class);
	}
	
    /**
     * Get all values of property Photo as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataObject> getAllPhoto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHOTO, DataObject.class);
	}

    /**
     * Get all values of property Photo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataObject> getAllPhoto() {
		return Base.getAll(this.model, this.getResource(), PHOTO, DataObject.class);
	}

    /**
     * Get all values of property Photo as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataObject> getAllPhoto_as() {
		return Base.getAll_as(this.model, this.getResource(), PHOTO, DataObject.class);
	}
 
    /**
     * Adds a value to property Photo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Adds a value to property Photo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPhoto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHOTO, value);
	}
    /**
     * Adds a value to property Photo from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.add(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Adds a value to property Photo from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPhoto(DataObject value) {
		Base.add(this.model, this.getResource(), PHOTO, value);
	}
  

    /**
     * Sets a value of property Photo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Sets a value of property Photo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPhoto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHOTO, value);
	}
    /**
     * Sets a value of property Photo from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.set(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Sets a value of property Photo from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPhoto(DataObject value) {
		Base.set(this.model, this.getResource(), PHOTO, value);
	}
  


    /**
     * Removes a value of property Photo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Removes a value of property Photo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePhoto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHOTO, value);
	}
    /**
     * Removes a value of property Photo given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.remove(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Removes a value of property Photo given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePhoto(DataObject value) {
		Base.remove(this.model, this.getResource(), PHOTO, value);
	}
  
    /**
     * Removes all values of property Photo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHOTO);
	}
	
    /**
     * Removes all values of property Photo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPhoto() {
		Base.removeAll(this.model, this.getResource(), PHOTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13244cd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPRESENTATIVE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13244cd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRepresentative() {
		return Base.has(this.model, this.getResource(), REPRESENTATIVE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13244cd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPRESENTATIVE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13244cd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRepresentative( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPRESENTATIVE);
	}

     /**
     * Get all values of property Representative as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPRESENTATIVE);
	}
	
    /**
     * Get all values of property Representative as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTATIVE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Representative as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPRESENTATIVE);
	}

    /**
     * Get all values of property Representative as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTATIVE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Representative     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPRESENTATIVE, Contact.class);
	}
	
    /**
     * Get all values of property Representative as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllRepresentative_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTATIVE, Contact.class);
	}

    /**
     * Get all values of property Representative     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllRepresentative() {
		return Base.getAll(this.model, this.getResource(), REPRESENTATIVE, Contact.class);
	}

    /**
     * Get all values of property Representative as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllRepresentative_as() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTATIVE, Contact.class);
	}
 
    /**
     * Adds a value to property Representative as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Adds a value to property Representative as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRepresentative( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPRESENTATIVE, value);
	}
    /**
     * Adds a value to property Representative from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Adds a value to property Representative from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRepresentative(Contact value) {
		Base.add(this.model, this.getResource(), REPRESENTATIVE, value);
	}
  

    /**
     * Sets a value of property Representative from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Sets a value of property Representative from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRepresentative( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPRESENTATIVE, value);
	}
    /**
     * Sets a value of property Representative from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Sets a value of property Representative from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRepresentative(Contact value) {
		Base.set(this.model, this.getResource(), REPRESENTATIVE, value);
	}
  


    /**
     * Removes a value of property Representative as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Removes a value of property Representative as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRepresentative( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPRESENTATIVE, value);
	}
    /**
     * Removes a value of property Representative given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Removes a value of property Representative given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRepresentative(Contact value) {
		Base.remove(this.model, this.getResource(), REPRESENTATIVE, value);
	}
  
    /**
     * Removes all values of property Representative     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPRESENTATIVE);
	}
	
    /**
     * Removes all values of property Representative	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRepresentative() {
		Base.removeAll(this.model, this.getResource(), REPRESENTATIVE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a6faa9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOUND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a6faa9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSound() {
		return Base.has(this.model, this.getResource(), SOUND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a6faa9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOUND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a6faa9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSound( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOUND);
	}

     /**
     * Get all values of property Sound as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOUND);
	}
	
    /**
     * Get all values of property Sound as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOUND, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sound as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOUND);
	}

    /**
     * Get all values of property Sound as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOUND, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sound     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataObject> getAllSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOUND, DataObject.class);
	}
	
    /**
     * Get all values of property Sound as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataObject> getAllSound_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOUND, DataObject.class);
	}

    /**
     * Get all values of property Sound     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataObject> getAllSound() {
		return Base.getAll(this.model, this.getResource(), SOUND, DataObject.class);
	}

    /**
     * Get all values of property Sound as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataObject> getAllSound_as() {
		return Base.getAll_as(this.model, this.getResource(), SOUND, DataObject.class);
	}
 
    /**
     * Adds a value to property Sound as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOUND, value);
	}
	
    /**
     * Adds a value to property Sound as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSound( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOUND, value);
	}
    /**
     * Adds a value to property Sound from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.add(model, instanceResource, SOUND, value);
	}
	
    /**
     * Adds a value to property Sound from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSound(DataObject value) {
		Base.add(this.model, this.getResource(), SOUND, value);
	}
  

    /**
     * Sets a value of property Sound from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOUND, value);
	}
	
    /**
     * Sets a value of property Sound from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSound( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOUND, value);
	}
    /**
     * Sets a value of property Sound from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.set(model, instanceResource, SOUND, value);
	}
	
    /**
     * Sets a value of property Sound from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSound(DataObject value) {
		Base.set(this.model, this.getResource(), SOUND, value);
	}
  


    /**
     * Removes a value of property Sound as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOUND, value);
	}
	
    /**
     * Removes a value of property Sound as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSound( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOUND, value);
	}
    /**
     * Removes a value of property Sound given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.remove(model, instanceResource, SOUND, value);
	}
	
    /**
     * Removes a value of property Sound given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSound(DataObject value) {
		Base.remove(this.model, this.getResource(), SOUND, value);
	}
  
    /**
     * Removes all values of property Sound     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOUND);
	}
	
    /**
     * Removes all values of property Sound	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSound() {
		Base.removeAll(this.model, this.getResource(), SOUND);
	}
 }