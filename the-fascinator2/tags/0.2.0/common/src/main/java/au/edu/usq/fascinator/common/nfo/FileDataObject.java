/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/09/09 11:49 AM
 */
package au.edu.usq.fascinator.common.nfo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> FileCreated </li>
 *   <li> FileLastAccessed </li>
 *   <li> FileLastModified </li>
 *   <li> FileName </li>
 *   <li> FileOwner </li>
 *   <li> FileSize </li>
 *   <li> FileUrl </li>
 *   <li> HasHash </li>
 *   <li> Permissions </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/09/09 11:49 AM
 */
public class FileDataObject extends DataObject {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileCreated */
    @SuppressWarnings("hiding")
	public static final URI FILECREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileCreated",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastAccessed */
    @SuppressWarnings("hiding")
	public static final URI FILELASTACCESSED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastAccessed",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastModified */
    @SuppressWarnings("hiding")
	public static final URI FILELASTMODIFIED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastModified",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileName */
    @SuppressWarnings("hiding")
	public static final URI FILENAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileName",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileOwner */
    @SuppressWarnings("hiding")
	public static final URI FILEOWNER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileOwner",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileSize */
    @SuppressWarnings("hiding")
	public static final URI FILESIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileSize",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileUrl */
    @SuppressWarnings("hiding")
	public static final URI FILEURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileUrl",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasHash */
    @SuppressWarnings("hiding")
	public static final URI HASHASH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasHash",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#permissions */
    @SuppressWarnings("hiding")
	public static final URI PERMISSIONS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#permissions",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileCreated",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastAccessed",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileLastModified",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileName",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileOwner",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileSize",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fileUrl",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasHash",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#permissions",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected FileDataObject ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public FileDataObject ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public FileDataObject ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public FileDataObject ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public FileDataObject ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of FileDataObject  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static FileDataObject  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, FileDataObject.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends FileDataObject> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, FileDataObject.class );
	}

    /**
	 * Remove rdf:type FileDataObject from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f2f585 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILECREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f2f585 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileCreated() {
		return Base.has(this.model, this.getResource(), FILECREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f2f585 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILECREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f2f585 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILECREATED);
	}

     /**
     * Get all values of property FileCreated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILECREATED);
	}
	
    /**
     * Get all values of property FileCreated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILECREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileCreated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILECREATED);
	}

    /**
     * Get all values of property FileCreated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILECREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllFileCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILECREATED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property FileCreated as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllFileCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILECREATED, java.util.Calendar.class);
	}

    /**
     * Get all values of property FileCreated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllFileCreated() {
		return Base.getAll(this.model, this.getResource(), FILECREATED, java.util.Calendar.class);
	}

    /**
     * Get all values of property FileCreated as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllFileCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), FILECREATED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property FileCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILECREATED, value);
	}
	
    /**
     * Adds a value to property FileCreated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILECREATED, value);
	}
    /**
     * Adds a value to property FileCreated from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, FILECREATED, value);
	}
	
    /**
     * Adds a value to property FileCreated from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileCreated(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), FILECREATED, value);
	}
  

    /**
     * Sets a value of property FileCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILECREATED, value);
	}
	
    /**
     * Sets a value of property FileCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILECREATED, value);
	}
    /**
     * Sets a value of property FileCreated from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, FILECREATED, value);
	}
	
    /**
     * Sets a value of property FileCreated from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileCreated(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), FILECREATED, value);
	}
  


    /**
     * Removes a value of property FileCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILECREATED, value);
	}
	
    /**
     * Removes a value of property FileCreated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILECREATED, value);
	}
    /**
     * Removes a value of property FileCreated given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, FILECREATED, value);
	}
	
    /**
     * Removes a value of property FileCreated given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileCreated(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), FILECREATED, value);
	}
  
    /**
     * Removes all values of property FileCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILECREATED);
	}
	
    /**
     * Removes all values of property FileCreated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileCreated() {
		Base.removeAll(this.model, this.getResource(), FILECREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1172fb9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileLastAccessed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILELASTACCESSED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1172fb9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileLastAccessed() {
		return Base.has(this.model, this.getResource(), FILELASTACCESSED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1172fb9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileLastAccessed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILELASTACCESSED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1172fb9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileLastAccessed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILELASTACCESSED);
	}

     /**
     * Get all values of property FileLastAccessed as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileLastAccessed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILELASTACCESSED);
	}
	
    /**
     * Get all values of property FileLastAccessed as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileLastAccessed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILELASTACCESSED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileLastAccessed as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileLastAccessed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILELASTACCESSED);
	}

    /**
     * Get all values of property FileLastAccessed as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileLastAccessed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILELASTACCESSED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileLastAccessed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllFileLastAccessed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILELASTACCESSED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property FileLastAccessed as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllFileLastAccessed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILELASTACCESSED, java.util.Calendar.class);
	}

    /**
     * Get all values of property FileLastAccessed     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllFileLastAccessed() {
		return Base.getAll(this.model, this.getResource(), FILELASTACCESSED, java.util.Calendar.class);
	}

    /**
     * Get all values of property FileLastAccessed as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllFileLastAccessed_as() {
		return Base.getAll_as(this.model, this.getResource(), FILELASTACCESSED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property FileLastAccessed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileLastAccessed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILELASTACCESSED, value);
	}
	
    /**
     * Adds a value to property FileLastAccessed as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileLastAccessed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILELASTACCESSED, value);
	}
    /**
     * Adds a value to property FileLastAccessed from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileLastAccessed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, FILELASTACCESSED, value);
	}
	
    /**
     * Adds a value to property FileLastAccessed from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileLastAccessed(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), FILELASTACCESSED, value);
	}
  

    /**
     * Sets a value of property FileLastAccessed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileLastAccessed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILELASTACCESSED, value);
	}
	
    /**
     * Sets a value of property FileLastAccessed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileLastAccessed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILELASTACCESSED, value);
	}
    /**
     * Sets a value of property FileLastAccessed from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileLastAccessed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, FILELASTACCESSED, value);
	}
	
    /**
     * Sets a value of property FileLastAccessed from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileLastAccessed(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), FILELASTACCESSED, value);
	}
  


    /**
     * Removes a value of property FileLastAccessed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileLastAccessed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILELASTACCESSED, value);
	}
	
    /**
     * Removes a value of property FileLastAccessed as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileLastAccessed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILELASTACCESSED, value);
	}
    /**
     * Removes a value of property FileLastAccessed given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileLastAccessed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, FILELASTACCESSED, value);
	}
	
    /**
     * Removes a value of property FileLastAccessed given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileLastAccessed(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), FILELASTACCESSED, value);
	}
  
    /**
     * Removes all values of property FileLastAccessed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileLastAccessed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILELASTACCESSED);
	}
	
    /**
     * Removes all values of property FileLastAccessed	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileLastAccessed() {
		Base.removeAll(this.model, this.getResource(), FILELASTACCESSED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27de24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILELASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27de24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileLastModified() {
		return Base.has(this.model, this.getResource(), FILELASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27de24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILELASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27de24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileLastModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILELASTMODIFIED);
	}

     /**
     * Get all values of property FileLastModified as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileLastModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILELASTMODIFIED);
	}
	
    /**
     * Get all values of property FileLastModified as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileLastModified_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILELASTMODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileLastModified as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileLastModified_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILELASTMODIFIED);
	}

    /**
     * Get all values of property FileLastModified as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileLastModified_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILELASTMODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileLastModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllFileLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILELASTMODIFIED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property FileLastModified as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllFileLastModified_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILELASTMODIFIED, java.util.Calendar.class);
	}

    /**
     * Get all values of property FileLastModified     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllFileLastModified() {
		return Base.getAll(this.model, this.getResource(), FILELASTMODIFIED, java.util.Calendar.class);
	}

    /**
     * Get all values of property FileLastModified as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllFileLastModified_as() {
		return Base.getAll_as(this.model, this.getResource(), FILELASTMODIFIED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property FileLastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILELASTMODIFIED, value);
	}
	
    /**
     * Adds a value to property FileLastModified as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILELASTMODIFIED, value);
	}
    /**
     * Adds a value to property FileLastModified from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, FILELASTMODIFIED, value);
	}
	
    /**
     * Adds a value to property FileLastModified from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileLastModified(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), FILELASTMODIFIED, value);
	}
  

    /**
     * Sets a value of property FileLastModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILELASTMODIFIED, value);
	}
	
    /**
     * Sets a value of property FileLastModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILELASTMODIFIED, value);
	}
    /**
     * Sets a value of property FileLastModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, FILELASTMODIFIED, value);
	}
	
    /**
     * Sets a value of property FileLastModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileLastModified(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), FILELASTMODIFIED, value);
	}
  


    /**
     * Removes a value of property FileLastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILELASTMODIFIED, value);
	}
	
    /**
     * Removes a value of property FileLastModified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILELASTMODIFIED, value);
	}
    /**
     * Removes a value of property FileLastModified given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, FILELASTMODIFIED, value);
	}
	
    /**
     * Removes a value of property FileLastModified given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileLastModified(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), FILELASTMODIFIED, value);
	}
  
    /**
     * Removes all values of property FileLastModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILELASTMODIFIED);
	}
	
    /**
     * Removes all values of property FileLastModified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileLastModified() {
		Base.removeAll(this.model, this.getResource(), FILELASTMODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b28f30 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b28f30 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileName() {
		return Base.has(this.model, this.getResource(), FILENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b28f30 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b28f30 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILENAME);
	}

     /**
     * Get all values of property FileName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILENAME);
	}
	
    /**
     * Get all values of property FileName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILENAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILENAME);
	}

    /**
     * Get all values of property FileName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILENAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFileName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILENAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property FileName as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFileName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILENAME, java.lang.String.class);
	}

    /**
     * Get all values of property FileName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFileName() {
		return Base.getAll(this.model, this.getResource(), FILENAME, java.lang.String.class);
	}

    /**
     * Get all values of property FileName as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFileName_as() {
		return Base.getAll_as(this.model, this.getResource(), FILENAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FileName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILENAME, value);
	}
	
    /**
     * Adds a value to property FileName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILENAME, value);
	}
    /**
     * Adds a value to property FileName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FILENAME, value);
	}
	
    /**
     * Adds a value to property FileName from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileName(java.lang.String value) {
		Base.add(this.model, this.getResource(), FILENAME, value);
	}
  

    /**
     * Sets a value of property FileName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILENAME, value);
	}
	
    /**
     * Sets a value of property FileName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILENAME, value);
	}
    /**
     * Sets a value of property FileName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FILENAME, value);
	}
	
    /**
     * Sets a value of property FileName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileName(java.lang.String value) {
		Base.set(this.model, this.getResource(), FILENAME, value);
	}
  


    /**
     * Removes a value of property FileName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILENAME, value);
	}
	
    /**
     * Removes a value of property FileName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILENAME, value);
	}
    /**
     * Removes a value of property FileName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FILENAME, value);
	}
	
    /**
     * Removes a value of property FileName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FILENAME, value);
	}
  
    /**
     * Removes all values of property FileName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILENAME);
	}
	
    /**
     * Removes all values of property FileName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileName() {
		Base.removeAll(this.model, this.getResource(), FILENAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15b25a1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15b25a1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileOwner() {
		return Base.has(this.model, this.getResource(), FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15b25a1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15b25a1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileOwner( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILEOWNER);
	}

     /**
     * Get all values of property FileOwner as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILEOWNER);
	}
	
    /**
     * Get all values of property FileOwner as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILEOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileOwner as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILEOWNER);
	}

    /**
     * Get all values of property FileOwner as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILEOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILEOWNER, Contact.class);
	}
	
    /**
     * Get all values of property FileOwner as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllFileOwner_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILEOWNER, Contact.class);
	}

    /**
     * Get all values of property FileOwner     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllFileOwner() {
		return Base.getAll(this.model, this.getResource(), FILEOWNER, Contact.class);
	}

    /**
     * Get all values of property FileOwner as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllFileOwner_as() {
		return Base.getAll_as(this.model, this.getResource(), FILEOWNER, Contact.class);
	}
 
    /**
     * Adds a value to property FileOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Adds a value to property FileOwner as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILEOWNER, value);
	}
    /**
     * Adds a value to property FileOwner from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Adds a value to property FileOwner from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileOwner(Contact value) {
		Base.add(this.model, this.getResource(), FILEOWNER, value);
	}
  

    /**
     * Sets a value of property FileOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Sets a value of property FileOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILEOWNER, value);
	}
    /**
     * Sets a value of property FileOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Sets a value of property FileOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileOwner(Contact value) {
		Base.set(this.model, this.getResource(), FILEOWNER, value);
	}
  


    /**
     * Removes a value of property FileOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Removes a value of property FileOwner as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILEOWNER, value);
	}
    /**
     * Removes a value of property FileOwner given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Removes a value of property FileOwner given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileOwner(Contact value) {
		Base.remove(this.model, this.getResource(), FILEOWNER, value);
	}
  
    /**
     * Removes all values of property FileOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILEOWNER);
	}
	
    /**
     * Removes all values of property FileOwner	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileOwner() {
		Base.removeAll(this.model, this.getResource(), FILEOWNER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37153d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37153d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileSize() {
		return Base.has(this.model, this.getResource(), FILESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37153d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37153d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileSize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILESIZE);
	}

     /**
     * Get all values of property FileSize as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileSize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILESIZE);
	}
	
    /**
     * Get all values of property FileSize as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileSize_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILESIZE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileSize as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileSize_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILESIZE);
	}

    /**
     * Get all values of property FileSize as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileSize_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILESIZE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllFileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILESIZE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property FileSize as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllFileSize_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILESIZE, java.lang.Integer.class);
	}

    /**
     * Get all values of property FileSize     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllFileSize() {
		return Base.getAll(this.model, this.getResource(), FILESIZE, java.lang.Integer.class);
	}

    /**
     * Get all values of property FileSize as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllFileSize_as() {
		return Base.getAll_as(this.model, this.getResource(), FILESIZE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property FileSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILESIZE, value);
	}
	
    /**
     * Adds a value to property FileSize as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILESIZE, value);
	}
    /**
     * Adds a value to property FileSize from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, FILESIZE, value);
	}
	
    /**
     * Adds a value to property FileSize from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileSize(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), FILESIZE, value);
	}
  

    /**
     * Sets a value of property FileSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILESIZE, value);
	}
	
    /**
     * Sets a value of property FileSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILESIZE, value);
	}
    /**
     * Sets a value of property FileSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, FILESIZE, value);
	}
	
    /**
     * Sets a value of property FileSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileSize(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), FILESIZE, value);
	}
  


    /**
     * Removes a value of property FileSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILESIZE, value);
	}
	
    /**
     * Removes a value of property FileSize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILESIZE, value);
	}
    /**
     * Removes a value of property FileSize given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, FILESIZE, value);
	}
	
    /**
     * Removes a value of property FileSize given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileSize(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), FILESIZE, value);
	}
  
    /**
     * Removes all values of property FileSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILESIZE);
	}
	
    /**
     * Removes all values of property FileSize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileSize() {
		Base.removeAll(this.model, this.getResource(), FILESIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b64078 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b64078 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileUrl() {
		return Base.has(this.model, this.getResource(), FILEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b64078 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b64078 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILEURL);
	}

     /**
     * Get all values of property FileUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILEURL);
	}
	
    /**
     * Get all values of property FileUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILEURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILEURL);
	}

    /**
     * Get all values of property FileUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILEURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFileUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property FileUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFileUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property FileUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFileUrl() {
		return Base.getAll(this.model, this.getResource(), FILEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property FileUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFileUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), FILEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property FileUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILEURL, value);
	}
	
    /**
     * Adds a value to property FileUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILEURL, value);
	}
    /**
     * Adds a value to property FileUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, FILEURL, value);
	}
	
    /**
     * Adds a value to property FileUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), FILEURL, value);
	}
  

    /**
     * Sets a value of property FileUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILEURL, value);
	}
	
    /**
     * Sets a value of property FileUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILEURL, value);
	}
    /**
     * Sets a value of property FileUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, FILEURL, value);
	}
	
    /**
     * Sets a value of property FileUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), FILEURL, value);
	}
  


    /**
     * Removes a value of property FileUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILEURL, value);
	}
	
    /**
     * Removes a value of property FileUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILEURL, value);
	}
    /**
     * Removes a value of property FileUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, FILEURL, value);
	}
	
    /**
     * Removes a value of property FileUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), FILEURL, value);
	}
  
    /**
     * Removes all values of property FileUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILEURL);
	}
	
    /**
     * Removes all values of property FileUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileUrl() {
		Base.removeAll(this.model, this.getResource(), FILEURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b05cd7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasHash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASHASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b05cd7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasHash() {
		return Base.has(this.model, this.getResource(), HASHASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b05cd7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasHash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASHASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b05cd7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasHash( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASHASH);
	}

     /**
     * Get all values of property HasHash as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasHash_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASHASH);
	}
	
    /**
     * Get all values of property HasHash as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasHash_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASHASH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasHash as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasHash_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASHASH);
	}

    /**
     * Get all values of property HasHash as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasHash_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASHASH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasHash     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<FileHash> getAllHasHash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASHASH, FileHash.class);
	}
	
    /**
     * Get all values of property HasHash as a ReactorResult of FileHash 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<FileHash> getAllHasHash_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASHASH, FileHash.class);
	}

    /**
     * Get all values of property HasHash     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<FileHash> getAllHasHash() {
		return Base.getAll(this.model, this.getResource(), HASHASH, FileHash.class);
	}

    /**
     * Get all values of property HasHash as a ReactorResult of FileHash 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<FileHash> getAllHasHash_as() {
		return Base.getAll_as(this.model, this.getResource(), HASHASH, FileHash.class);
	}
 
    /**
     * Adds a value to property HasHash as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasHash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASHASH, value);
	}
	
    /**
     * Adds a value to property HasHash as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasHash( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASHASH, value);
	}
    /**
     * Adds a value to property HasHash from an instance of FileHash 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasHash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, FileHash value) {
		Base.add(model, instanceResource, HASHASH, value);
	}
	
    /**
     * Adds a value to property HasHash from an instance of FileHash 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasHash(FileHash value) {
		Base.add(this.model, this.getResource(), HASHASH, value);
	}
  

    /**
     * Sets a value of property HasHash from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasHash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASHASH, value);
	}
	
    /**
     * Sets a value of property HasHash from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasHash( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASHASH, value);
	}
    /**
     * Sets a value of property HasHash from an instance of FileHash 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasHash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, FileHash value) {
		Base.set(model, instanceResource, HASHASH, value);
	}
	
    /**
     * Sets a value of property HasHash from an instance of FileHash 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasHash(FileHash value) {
		Base.set(this.model, this.getResource(), HASHASH, value);
	}
  


    /**
     * Removes a value of property HasHash as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasHash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASHASH, value);
	}
	
    /**
     * Removes a value of property HasHash as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasHash( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASHASH, value);
	}
    /**
     * Removes a value of property HasHash given as an instance of FileHash 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasHash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, FileHash value) {
		Base.remove(model, instanceResource, HASHASH, value);
	}
	
    /**
     * Removes a value of property HasHash given as an instance of FileHash 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasHash(FileHash value) {
		Base.remove(this.model, this.getResource(), HASHASH, value);
	}
  
    /**
     * Removes all values of property HasHash     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasHash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASHASH);
	}
	
    /**
     * Removes all values of property HasHash	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasHash() {
		Base.removeAll(this.model, this.getResource(), HASHASH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12cdd20 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPermissions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PERMISSIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12cdd20 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPermissions() {
		return Base.has(this.model, this.getResource(), PERMISSIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12cdd20 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPermissions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PERMISSIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12cdd20 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPermissions( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PERMISSIONS);
	}

     /**
     * Get all values of property Permissions as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPermissions_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PERMISSIONS);
	}
	
    /**
     * Get all values of property Permissions as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPermissions_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERMISSIONS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Permissions as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPermissions_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PERMISSIONS);
	}

    /**
     * Get all values of property Permissions as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPermissions_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PERMISSIONS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Permissions     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPermissions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PERMISSIONS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Permissions as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPermissions_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERMISSIONS, java.lang.String.class);
	}

    /**
     * Get all values of property Permissions     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPermissions() {
		return Base.getAll(this.model, this.getResource(), PERMISSIONS, java.lang.String.class);
	}

    /**
     * Get all values of property Permissions as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPermissions_as() {
		return Base.getAll_as(this.model, this.getResource(), PERMISSIONS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Permissions as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPermissions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PERMISSIONS, value);
	}
	
    /**
     * Adds a value to property Permissions as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPermissions( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PERMISSIONS, value);
	}
    /**
     * Adds a value to property Permissions from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPermissions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PERMISSIONS, value);
	}
	
    /**
     * Adds a value to property Permissions from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPermissions(java.lang.String value) {
		Base.add(this.model, this.getResource(), PERMISSIONS, value);
	}
  

    /**
     * Sets a value of property Permissions from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPermissions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PERMISSIONS, value);
	}
	
    /**
     * Sets a value of property Permissions from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPermissions( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PERMISSIONS, value);
	}
    /**
     * Sets a value of property Permissions from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPermissions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PERMISSIONS, value);
	}
	
    /**
     * Sets a value of property Permissions from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPermissions(java.lang.String value) {
		Base.set(this.model, this.getResource(), PERMISSIONS, value);
	}
  


    /**
     * Removes a value of property Permissions as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePermissions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PERMISSIONS, value);
	}
	
    /**
     * Removes a value of property Permissions as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePermissions( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PERMISSIONS, value);
	}
    /**
     * Removes a value of property Permissions given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePermissions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PERMISSIONS, value);
	}
	
    /**
     * Removes a value of property Permissions given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePermissions(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PERMISSIONS, value);
	}
  
    /**
     * Removes all values of property Permissions     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPermissions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PERMISSIONS);
	}
	
    /**
     * Removes all values of property Permissions	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPermissions() {
		Base.removeAll(this.model, this.getResource(), PERMISSIONS);
	}
 }