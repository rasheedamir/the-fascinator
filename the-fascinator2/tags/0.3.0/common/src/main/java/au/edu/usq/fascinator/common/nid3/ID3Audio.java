/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/10/09 2:48 PM
 */
package au.edu.usq.fascinator.common.nid3;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AlbumTitle </li>
 *   <li> AttachedPicture </li>
 *   <li> AudiofileSize </li>
 *   <li> BackgroundArtist </li>
 *   <li> BeatsPerMinute </li>
 *   <li> Comments </li>
 *   <li> CommercialInformationURL </li>
 *   <li> Composer </li>
 *   <li> Conductor </li>
 *   <li> ContentGroupDescription </li>
 *   <li> ContentType </li>
 *   <li> CopyrightInformationURL </li>
 *   <li> CopyrightMessage </li>
 *   <li> Date </li>
 *   <li> EncodedBy </li>
 *   <li> EncodingSettings </li>
 *   <li> FileType </li>
 *   <li> GeneralEncapsulatedObject </li>
 *   <li> HasSynchronizedText </li>
 *   <li> InitialKey </li>
 *   <li> InternationalStandardRecordingCode </li>
 *   <li> InternetRadioStationName </li>
 *   <li> InternetRadioStationOwner </li>
 *   <li> InterpretedBy </li>
 *   <li> InvolvedPerson </li>
 *   <li> LeadArtist </li>
 *   <li> Length </li>
 *   <li> Licensee </li>
 *   <li> MediaType </li>
 *   <li> MusicCDIdentifier </li>
 *   <li> OfficialArtistWebpage </li>
 *   <li> OfficialAudioSourceWebpage </li>
 *   <li> OfficialFileWebpage </li>
 *   <li> OfficialInternetRadioStationHomepage </li>
 *   <li> Ontologies20070510nid3Language </li>
 *   <li> Ontologies20070510nid3Publisher </li>
 *   <li> OriginalAlbumTitle </li>
 *   <li> OriginalArtist </li>
 *   <li> OriginalFilename </li>
 *   <li> OriginalReleaseYear </li>
 *   <li> OriginalTextWriter </li>
 *   <li> PartOfSet </li>
 *   <li> PaymentURL </li>
 *   <li> PlaylistDelay </li>
 *   <li> PublishersWebpage </li>
 *   <li> RecordingDate </li>
 *   <li> RecordingYear </li>
 *   <li> Subtitle </li>
 *   <li> TextWriter </li>
 *   <li> Time </li>
 *   <li> Title </li>
 *   <li> TrackNumber </li>
 *   <li> UniqueFileIdentifier </li>
 *   <li> UnsynchronizedTextContent </li>
 *   <li> UnsynchronizedTextContentDescriptor </li>
 *   <li> UserDefinedFrame </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/10/09 2:48 PM
 */
public class ID3Audio extends Audio {

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#ID3Audio */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#ID3Audio", false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#albumTitle */
    @SuppressWarnings("hiding")
	public static final URI ALBUMTITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#albumTitle",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#attachedPicture */
    @SuppressWarnings("hiding")
	public static final URI ATTACHEDPICTURE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#attachedPicture",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#audiofileSize */
    @SuppressWarnings("hiding")
	public static final URI AUDIOFILESIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#audiofileSize",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#backgroundArtist */
    @SuppressWarnings("hiding")
	public static final URI BACKGROUNDARTIST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#backgroundArtist",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#beatsPerMinute */
    @SuppressWarnings("hiding")
	public static final URI BEATSPERMINUTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#beatsPerMinute",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#comments */
    @SuppressWarnings("hiding")
	public static final URI COMMENTS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#comments",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#commercialInformationURL */
    @SuppressWarnings("hiding")
	public static final URI COMMERCIALINFORMATIONURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#commercialInformationURL",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#composer */
    @SuppressWarnings("hiding")
	public static final URI COMPOSER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#composer",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#conductor */
    @SuppressWarnings("hiding")
	public static final URI CONDUCTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#conductor",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentGroupDescription */
    @SuppressWarnings("hiding")
	public static final URI CONTENTGROUPDESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentGroupDescription",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentType */
    @SuppressWarnings("hiding")
	public static final URI CONTENTTYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#copyrightInformationURL */
    @SuppressWarnings("hiding")
	public static final URI COPYRIGHTINFORMATIONURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#copyrightInformationURL",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#copyrightMessage */
    @SuppressWarnings("hiding")
	public static final URI COPYRIGHTMESSAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#copyrightMessage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#date */
    @SuppressWarnings("hiding")
	public static final URI DATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#date",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#encodedBy */
    @SuppressWarnings("hiding")
	public static final URI ENCODEDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#encodedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#encodingSettings */
    @SuppressWarnings("hiding")
	public static final URI ENCODINGSETTINGS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#encodingSettings",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileType */
    @SuppressWarnings("hiding")
	public static final URI FILETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#generalEncapsulatedObject */
    @SuppressWarnings("hiding")
	public static final URI GENERALENCAPSULATEDOBJECT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#generalEncapsulatedObject",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#hasSynchronizedText */
    @SuppressWarnings("hiding")
	public static final URI HASSYNCHRONIZEDTEXT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#hasSynchronizedText",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#initialKey */
    @SuppressWarnings("hiding")
	public static final URI INITIALKEY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#initialKey",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internationalStandardRecordingCode */
    @SuppressWarnings("hiding")
	public static final URI INTERNATIONALSTANDARDRECORDINGCODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internationalStandardRecordingCode",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internetRadioStationName */
    @SuppressWarnings("hiding")
	public static final URI INTERNETRADIOSTATIONNAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internetRadioStationName",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internetRadioStationOwner */
    @SuppressWarnings("hiding")
	public static final URI INTERNETRADIOSTATIONOWNER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internetRadioStationOwner",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#interpretedBy */
    @SuppressWarnings("hiding")
	public static final URI INTERPRETEDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#interpretedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#involvedPerson */
    @SuppressWarnings("hiding")
	public static final URI INVOLVEDPERSON = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#involvedPerson",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#leadArtist */
    @SuppressWarnings("hiding")
	public static final URI LEADARTIST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#leadArtist",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#length */
    @SuppressWarnings("hiding")
	public static final URI LENGTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#length",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#licensee */
    @SuppressWarnings("hiding")
	public static final URI LICENSEE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#licensee",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#mediaType */
    @SuppressWarnings("hiding")
	public static final URI MEDIATYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#mediaType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#musicCDIdentifier */
    @SuppressWarnings("hiding")
	public static final URI MUSICCDIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#musicCDIdentifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialArtistWebpage */
    @SuppressWarnings("hiding")
	public static final URI OFFICIALARTISTWEBPAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialArtistWebpage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialAudioSourceWebpage */
    @SuppressWarnings("hiding")
	public static final URI OFFICIALAUDIOSOURCEWEBPAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialAudioSourceWebpage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialFileWebpage */
    @SuppressWarnings("hiding")
	public static final URI OFFICIALFILEWEBPAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialFileWebpage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialInternetRadioStationHomepage */
    @SuppressWarnings("hiding")
	public static final URI OFFICIALINTERNETRADIOSTATIONHOMEPAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialInternetRadioStationHomepage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#language */
    @SuppressWarnings("hiding")
	public static final URI ONTOLOGIES20070510NID3LANGUAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#language",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#publisher */
    @SuppressWarnings("hiding")
	public static final URI ONTOLOGIES20070510NID3PUBLISHER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#publisher",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalAlbumTitle */
    @SuppressWarnings("hiding")
	public static final URI ORIGINALALBUMTITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalAlbumTitle",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalArtist */
    @SuppressWarnings("hiding")
	public static final URI ORIGINALARTIST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalArtist",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalFilename */
    @SuppressWarnings("hiding")
	public static final URI ORIGINALFILENAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalFilename",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalReleaseYear */
    @SuppressWarnings("hiding")
	public static final URI ORIGINALRELEASEYEAR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalReleaseYear",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalTextWriter */
    @SuppressWarnings("hiding")
	public static final URI ORIGINALTEXTWRITER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalTextWriter",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#partOfSet */
    @SuppressWarnings("hiding")
	public static final URI PARTOFSET = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#partOfSet",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#paymentURL */
    @SuppressWarnings("hiding")
	public static final URI PAYMENTURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#paymentURL",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#playlistDelay */
    @SuppressWarnings("hiding")
	public static final URI PLAYLISTDELAY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#playlistDelay",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#publishersWebpage */
    @SuppressWarnings("hiding")
	public static final URI PUBLISHERSWEBPAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#publishersWebpage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingDate */
    @SuppressWarnings("hiding")
	public static final URI RECORDINGDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingDate",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingYear */
    @SuppressWarnings("hiding")
	public static final URI RECORDINGYEAR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingYear",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#subtitle */
    @SuppressWarnings("hiding")
	public static final URI SUBTITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#subtitle",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#textWriter */
    @SuppressWarnings("hiding")
	public static final URI TEXTWRITER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#textWriter",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#time */
    @SuppressWarnings("hiding")
	public static final URI TIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#time",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#title */
    @SuppressWarnings("hiding")
	public static final URI TITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#title",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#trackNumber */
    @SuppressWarnings("hiding")
	public static final URI TRACKNUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#trackNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#uniqueFileIdentifier */
    @SuppressWarnings("hiding")
	public static final URI UNIQUEFILEIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#uniqueFileIdentifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#unsynchronizedTextContent */
    @SuppressWarnings("hiding")
	public static final URI UNSYNCHRONIZEDTEXTCONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#unsynchronizedTextContent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#unsynchronizedTextContentDescriptor */
    @SuppressWarnings("hiding")
	public static final URI UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#unsynchronizedTextContentDescriptor",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#userDefinedFrame */
    @SuppressWarnings("hiding")
	public static final URI USERDEFINEDFRAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#userDefinedFrame",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#albumTitle",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#attachedPicture",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#audiofileSize",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#backgroundArtist",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#beatsPerMinute",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#comments",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#commercialInformationURL",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#composer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#conductor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentGroupDescription",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#contentType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#copyrightInformationURL",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#copyrightMessage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#date",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#encodedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#encodingSettings",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#generalEncapsulatedObject",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#hasSynchronizedText",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#initialKey",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internationalStandardRecordingCode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internetRadioStationName",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#internetRadioStationOwner",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#interpretedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#involvedPerson",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#leadArtist",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#length",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#licensee",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#mediaType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#musicCDIdentifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialArtistWebpage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialAudioSourceWebpage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialFileWebpage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#officialInternetRadioStationHomepage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#language",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#publisher",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalAlbumTitle",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalArtist",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalFilename",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalReleaseYear",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#originalTextWriter",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#partOfSet",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#paymentURL",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#playlistDelay",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#publishersWebpage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#recordingYear",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#subtitle",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#textWriter",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#time",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#title",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#trackNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#uniqueFileIdentifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#unsynchronizedTextContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#unsynchronizedTextContentDescriptor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#userDefinedFrame",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected ID3Audio ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public ID3Audio ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public ID3Audio ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public ID3Audio ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public ID3Audio ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of ID3Audio  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static ID3Audio  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, ID3Audio.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#ID3Audio).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends ID3Audio> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, ID3Audio.class );
	}

    /**
	 * Remove rdf:type ID3Audio from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@235dc721 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALBUMTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@235dc721 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlbumTitle() {
		return Base.has(this.model, this.getResource(), ALBUMTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@235dc721 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALBUMTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@235dc721 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlbumTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALBUMTITLE);
	}

     /**
     * Get all values of property AlbumTitle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAlbumTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALBUMTITLE);
	}
	
    /**
     * Get all values of property AlbumTitle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAlbumTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALBUMTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AlbumTitle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAlbumTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALBUMTITLE);
	}

    /**
     * Get all values of property AlbumTitle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAlbumTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALBUMTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AlbumTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALBUMTITLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property AlbumTitle as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllAlbumTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALBUMTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property AlbumTitle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllAlbumTitle() {
		return Base.getAll(this.model, this.getResource(), ALBUMTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property AlbumTitle as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllAlbumTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), ALBUMTITLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property AlbumTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALBUMTITLE, value);
	}
	
    /**
     * Adds a value to property AlbumTitle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAlbumTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALBUMTITLE, value);
	}
    /**
     * Adds a value to property AlbumTitle from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ALBUMTITLE, value);
	}
	
    /**
     * Adds a value to property AlbumTitle from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAlbumTitle(java.lang.String value) {
		Base.add(this.model, this.getResource(), ALBUMTITLE, value);
	}
  

    /**
     * Sets a value of property AlbumTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALBUMTITLE, value);
	}
	
    /**
     * Sets a value of property AlbumTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlbumTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALBUMTITLE, value);
	}
    /**
     * Sets a value of property AlbumTitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ALBUMTITLE, value);
	}
	
    /**
     * Sets a value of property AlbumTitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlbumTitle(java.lang.String value) {
		Base.set(this.model, this.getResource(), ALBUMTITLE, value);
	}
  


    /**
     * Removes a value of property AlbumTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALBUMTITLE, value);
	}
	
    /**
     * Removes a value of property AlbumTitle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlbumTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALBUMTITLE, value);
	}
    /**
     * Removes a value of property AlbumTitle given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ALBUMTITLE, value);
	}
	
    /**
     * Removes a value of property AlbumTitle given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlbumTitle(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ALBUMTITLE, value);
	}
  
    /**
     * Removes all values of property AlbumTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALBUMTITLE);
	}
	
    /**
     * Removes all values of property AlbumTitle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlbumTitle() {
		Base.removeAll(this.model, this.getResource(), ALBUMTITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e8eeca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAttachedPicture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATTACHEDPICTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e8eeca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAttachedPicture() {
		return Base.has(this.model, this.getResource(), ATTACHEDPICTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e8eeca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAttachedPicture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTACHEDPICTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e8eeca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAttachedPicture( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTACHEDPICTURE);
	}

     /**
     * Get all values of property AttachedPicture as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachedPicture_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATTACHEDPICTURE);
	}
	
    /**
     * Get all values of property AttachedPicture as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttachedPicture_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHEDPICTURE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AttachedPicture as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachedPicture_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTACHEDPICTURE);
	}

    /**
     * Get all values of property AttachedPicture as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttachedPicture_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHEDPICTURE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AttachedPicture     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataObject> getAllAttachedPicture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATTACHEDPICTURE, DataObject.class);
	}
	
    /**
     * Get all values of property AttachedPicture as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataObject> getAllAttachedPicture_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHEDPICTURE, DataObject.class);
	}

    /**
     * Get all values of property AttachedPicture     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataObject> getAllAttachedPicture() {
		return Base.getAll(this.model, this.getResource(), ATTACHEDPICTURE, DataObject.class);
	}

    /**
     * Get all values of property AttachedPicture as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataObject> getAllAttachedPicture_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHEDPICTURE, DataObject.class);
	}
 
    /**
     * Adds a value to property AttachedPicture as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAttachedPicture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATTACHEDPICTURE, value);
	}
	
    /**
     * Adds a value to property AttachedPicture as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAttachedPicture( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATTACHEDPICTURE, value);
	}
    /**
     * Adds a value to property AttachedPicture from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAttachedPicture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.add(model, instanceResource, ATTACHEDPICTURE, value);
	}
	
    /**
     * Adds a value to property AttachedPicture from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAttachedPicture(DataObject value) {
		Base.add(this.model, this.getResource(), ATTACHEDPICTURE, value);
	}
  

    /**
     * Sets a value of property AttachedPicture from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAttachedPicture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATTACHEDPICTURE, value);
	}
	
    /**
     * Sets a value of property AttachedPicture from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAttachedPicture( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATTACHEDPICTURE, value);
	}
    /**
     * Sets a value of property AttachedPicture from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAttachedPicture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.set(model, instanceResource, ATTACHEDPICTURE, value);
	}
	
    /**
     * Sets a value of property AttachedPicture from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAttachedPicture(DataObject value) {
		Base.set(this.model, this.getResource(), ATTACHEDPICTURE, value);
	}
  


    /**
     * Removes a value of property AttachedPicture as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAttachedPicture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATTACHEDPICTURE, value);
	}
	
    /**
     * Removes a value of property AttachedPicture as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAttachedPicture( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATTACHEDPICTURE, value);
	}
    /**
     * Removes a value of property AttachedPicture given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAttachedPicture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.remove(model, instanceResource, ATTACHEDPICTURE, value);
	}
	
    /**
     * Removes a value of property AttachedPicture given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAttachedPicture(DataObject value) {
		Base.remove(this.model, this.getResource(), ATTACHEDPICTURE, value);
	}
  
    /**
     * Removes all values of property AttachedPicture     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAttachedPicture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATTACHEDPICTURE);
	}
	
    /**
     * Removes all values of property AttachedPicture	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAttachedPicture() {
		Base.removeAll(this.model, this.getResource(), ATTACHEDPICTURE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531a700a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAudiofileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AUDIOFILESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531a700a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAudiofileSize() {
		return Base.has(this.model, this.getResource(), AUDIOFILESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531a700a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAudiofileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AUDIOFILESIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531a700a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAudiofileSize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AUDIOFILESIZE);
	}

     /**
     * Get all values of property AudiofileSize as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAudiofileSize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AUDIOFILESIZE);
	}
	
    /**
     * Get all values of property AudiofileSize as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAudiofileSize_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AUDIOFILESIZE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AudiofileSize as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAudiofileSize_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AUDIOFILESIZE);
	}

    /**
     * Get all values of property AudiofileSize as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAudiofileSize_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AUDIOFILESIZE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AudiofileSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllAudiofileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AUDIOFILESIZE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property AudiofileSize as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllAudiofileSize_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AUDIOFILESIZE, java.lang.Integer.class);
	}

    /**
     * Get all values of property AudiofileSize     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllAudiofileSize() {
		return Base.getAll(this.model, this.getResource(), AUDIOFILESIZE, java.lang.Integer.class);
	}

    /**
     * Get all values of property AudiofileSize as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllAudiofileSize_as() {
		return Base.getAll_as(this.model, this.getResource(), AUDIOFILESIZE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property AudiofileSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAudiofileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AUDIOFILESIZE, value);
	}
	
    /**
     * Adds a value to property AudiofileSize as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAudiofileSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AUDIOFILESIZE, value);
	}
    /**
     * Adds a value to property AudiofileSize from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAudiofileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, AUDIOFILESIZE, value);
	}
	
    /**
     * Adds a value to property AudiofileSize from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAudiofileSize(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), AUDIOFILESIZE, value);
	}
  

    /**
     * Sets a value of property AudiofileSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAudiofileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AUDIOFILESIZE, value);
	}
	
    /**
     * Sets a value of property AudiofileSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAudiofileSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AUDIOFILESIZE, value);
	}
    /**
     * Sets a value of property AudiofileSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAudiofileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, AUDIOFILESIZE, value);
	}
	
    /**
     * Sets a value of property AudiofileSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAudiofileSize(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), AUDIOFILESIZE, value);
	}
  


    /**
     * Removes a value of property AudiofileSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAudiofileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AUDIOFILESIZE, value);
	}
	
    /**
     * Removes a value of property AudiofileSize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAudiofileSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AUDIOFILESIZE, value);
	}
    /**
     * Removes a value of property AudiofileSize given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAudiofileSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, AUDIOFILESIZE, value);
	}
	
    /**
     * Removes a value of property AudiofileSize given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAudiofileSize(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), AUDIOFILESIZE, value);
	}
  
    /**
     * Removes all values of property AudiofileSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAudiofileSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AUDIOFILESIZE);
	}
	
    /**
     * Removes all values of property AudiofileSize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAudiofileSize() {
		Base.removeAll(this.model, this.getResource(), AUDIOFILESIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59b68d78 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBackgroundArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BACKGROUNDARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59b68d78 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBackgroundArtist() {
		return Base.has(this.model, this.getResource(), BACKGROUNDARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59b68d78 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBackgroundArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BACKGROUNDARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59b68d78 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBackgroundArtist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BACKGROUNDARTIST);
	}

     /**
     * Get all values of property BackgroundArtist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBackgroundArtist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BACKGROUNDARTIST);
	}
	
    /**
     * Get all values of property BackgroundArtist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBackgroundArtist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BACKGROUNDARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BackgroundArtist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBackgroundArtist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BACKGROUNDARTIST);
	}

    /**
     * Get all values of property BackgroundArtist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBackgroundArtist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BACKGROUNDARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BackgroundArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllBackgroundArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BACKGROUNDARTIST, Contact.class);
	}
	
    /**
     * Get all values of property BackgroundArtist as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllBackgroundArtist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BACKGROUNDARTIST, Contact.class);
	}

    /**
     * Get all values of property BackgroundArtist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllBackgroundArtist() {
		return Base.getAll(this.model, this.getResource(), BACKGROUNDARTIST, Contact.class);
	}

    /**
     * Get all values of property BackgroundArtist as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllBackgroundArtist_as() {
		return Base.getAll_as(this.model, this.getResource(), BACKGROUNDARTIST, Contact.class);
	}
 
    /**
     * Adds a value to property BackgroundArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBackgroundArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BACKGROUNDARTIST, value);
	}
	
    /**
     * Adds a value to property BackgroundArtist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBackgroundArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BACKGROUNDARTIST, value);
	}
    /**
     * Adds a value to property BackgroundArtist from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBackgroundArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, BACKGROUNDARTIST, value);
	}
	
    /**
     * Adds a value to property BackgroundArtist from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBackgroundArtist(Contact value) {
		Base.add(this.model, this.getResource(), BACKGROUNDARTIST, value);
	}
  

    /**
     * Sets a value of property BackgroundArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBackgroundArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BACKGROUNDARTIST, value);
	}
	
    /**
     * Sets a value of property BackgroundArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBackgroundArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BACKGROUNDARTIST, value);
	}
    /**
     * Sets a value of property BackgroundArtist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBackgroundArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, BACKGROUNDARTIST, value);
	}
	
    /**
     * Sets a value of property BackgroundArtist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBackgroundArtist(Contact value) {
		Base.set(this.model, this.getResource(), BACKGROUNDARTIST, value);
	}
  


    /**
     * Removes a value of property BackgroundArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBackgroundArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BACKGROUNDARTIST, value);
	}
	
    /**
     * Removes a value of property BackgroundArtist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBackgroundArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BACKGROUNDARTIST, value);
	}
    /**
     * Removes a value of property BackgroundArtist given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBackgroundArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, BACKGROUNDARTIST, value);
	}
	
    /**
     * Removes a value of property BackgroundArtist given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBackgroundArtist(Contact value) {
		Base.remove(this.model, this.getResource(), BACKGROUNDARTIST, value);
	}
  
    /**
     * Removes all values of property BackgroundArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBackgroundArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BACKGROUNDARTIST);
	}
	
    /**
     * Removes all values of property BackgroundArtist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBackgroundArtist() {
		Base.removeAll(this.model, this.getResource(), BACKGROUNDARTIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66ef7d74 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BEATSPERMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66ef7d74 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBeatsPerMinute() {
		return Base.has(this.model, this.getResource(), BEATSPERMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66ef7d74 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BEATSPERMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66ef7d74 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BEATSPERMINUTE);
	}

     /**
     * Get all values of property BeatsPerMinute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BEATSPERMINUTE);
	}
	
    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BEATSPERMINUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BeatsPerMinute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BEATSPERMINUTE);
	}

    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BEATSPERMINUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BeatsPerMinute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BEATSPERMINUTE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBeatsPerMinute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BEATSPERMINUTE, java.lang.Integer.class);
	}

    /**
     * Get all values of property BeatsPerMinute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBeatsPerMinute() {
		return Base.getAll(this.model, this.getResource(), BEATSPERMINUTE, java.lang.Integer.class);
	}

    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBeatsPerMinute_as() {
		return Base.getAll_as(this.model, this.getResource(), BEATSPERMINUTE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property BeatsPerMinute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Adds a value to property BeatsPerMinute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
    /**
     * Adds a value to property BeatsPerMinute from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Adds a value to property BeatsPerMinute from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBeatsPerMinute(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
  

    /**
     * Sets a value of property BeatsPerMinute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Sets a value of property BeatsPerMinute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
    /**
     * Sets a value of property BeatsPerMinute from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Sets a value of property BeatsPerMinute from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBeatsPerMinute(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
  


    /**
     * Removes a value of property BeatsPerMinute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Removes a value of property BeatsPerMinute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
    /**
     * Removes a value of property BeatsPerMinute given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Removes a value of property BeatsPerMinute given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBeatsPerMinute(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
  
    /**
     * Removes all values of property BeatsPerMinute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BEATSPERMINUTE);
	}
	
    /**
     * Removes all values of property BeatsPerMinute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBeatsPerMinute() {
		Base.removeAll(this.model, this.getResource(), BEATSPERMINUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54828e7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComments(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMMENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54828e7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComments() {
		return Base.has(this.model, this.getResource(), COMMENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54828e7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComments(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMMENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54828e7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComments( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMMENTS);
	}

     /**
     * Get all values of property Comments as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComments_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMMENTS);
	}
	
    /**
     * Get all values of property Comments as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComments_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMENTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Comments as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComments_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMMENTS);
	}

    /**
     * Get all values of property Comments as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComments_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMMENTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Comments     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllComments(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMMENTS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Comments as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllComments_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMENTS, java.lang.String.class);
	}

    /**
     * Get all values of property Comments     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllComments() {
		return Base.getAll(this.model, this.getResource(), COMMENTS, java.lang.String.class);
	}

    /**
     * Get all values of property Comments as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllComments_as() {
		return Base.getAll_as(this.model, this.getResource(), COMMENTS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Comments as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComments( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMMENTS, value);
	}
	
    /**
     * Adds a value to property Comments as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComments( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMMENTS, value);
	}
    /**
     * Adds a value to property Comments from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComments(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COMMENTS, value);
	}
	
    /**
     * Adds a value to property Comments from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComments(java.lang.String value) {
		Base.add(this.model, this.getResource(), COMMENTS, value);
	}
  

    /**
     * Sets a value of property Comments from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComments( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMMENTS, value);
	}
	
    /**
     * Sets a value of property Comments from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComments( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMMENTS, value);
	}
    /**
     * Sets a value of property Comments from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComments(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COMMENTS, value);
	}
	
    /**
     * Sets a value of property Comments from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComments(java.lang.String value) {
		Base.set(this.model, this.getResource(), COMMENTS, value);
	}
  


    /**
     * Removes a value of property Comments as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComments( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMMENTS, value);
	}
	
    /**
     * Removes a value of property Comments as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComments( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMMENTS, value);
	}
    /**
     * Removes a value of property Comments given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComments(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COMMENTS, value);
	}
	
    /**
     * Removes a value of property Comments given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComments(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COMMENTS, value);
	}
  
    /**
     * Removes all values of property Comments     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComments( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMMENTS);
	}
	
    /**
     * Removes all values of property Comments	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComments() {
		Base.removeAll(this.model, this.getResource(), COMMENTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dc6480f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCommercialInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMMERCIALINFORMATIONURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dc6480f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCommercialInformationURL() {
		return Base.has(this.model, this.getResource(), COMMERCIALINFORMATIONURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dc6480f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCommercialInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMMERCIALINFORMATIONURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dc6480f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCommercialInformationURL( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMMERCIALINFORMATIONURL);
	}

     /**
     * Get all values of property CommercialInformationURL as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCommercialInformationURL_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMMERCIALINFORMATIONURL);
	}
	
    /**
     * Get all values of property CommercialInformationURL as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCommercialInformationURL_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMERCIALINFORMATIONURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CommercialInformationURL as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCommercialInformationURL_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMMERCIALINFORMATIONURL);
	}

    /**
     * Get all values of property CommercialInformationURL as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCommercialInformationURL_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMMERCIALINFORMATIONURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CommercialInformationURL     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCommercialInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMMERCIALINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property CommercialInformationURL as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCommercialInformationURL_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMERCIALINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property CommercialInformationURL     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCommercialInformationURL() {
		return Base.getAll(this.model, this.getResource(), COMMERCIALINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property CommercialInformationURL as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCommercialInformationURL_as() {
		return Base.getAll_as(this.model, this.getResource(), COMMERCIALINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property CommercialInformationURL as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCommercialInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMMERCIALINFORMATIONURL, value);
	}
	
    /**
     * Adds a value to property CommercialInformationURL as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCommercialInformationURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMMERCIALINFORMATIONURL, value);
	}
    /**
     * Adds a value to property CommercialInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCommercialInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, COMMERCIALINFORMATIONURL, value);
	}
	
    /**
     * Adds a value to property CommercialInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCommercialInformationURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), COMMERCIALINFORMATIONURL, value);
	}
  

    /**
     * Sets a value of property CommercialInformationURL from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCommercialInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMMERCIALINFORMATIONURL, value);
	}
	
    /**
     * Sets a value of property CommercialInformationURL from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCommercialInformationURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMMERCIALINFORMATIONURL, value);
	}
    /**
     * Sets a value of property CommercialInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCommercialInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, COMMERCIALINFORMATIONURL, value);
	}
	
    /**
     * Sets a value of property CommercialInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCommercialInformationURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), COMMERCIALINFORMATIONURL, value);
	}
  


    /**
     * Removes a value of property CommercialInformationURL as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCommercialInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMMERCIALINFORMATIONURL, value);
	}
	
    /**
     * Removes a value of property CommercialInformationURL as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCommercialInformationURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMMERCIALINFORMATIONURL, value);
	}
    /**
     * Removes a value of property CommercialInformationURL given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCommercialInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, COMMERCIALINFORMATIONURL, value);
	}
	
    /**
     * Removes a value of property CommercialInformationURL given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCommercialInformationURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), COMMERCIALINFORMATIONURL, value);
	}
  
    /**
     * Removes all values of property CommercialInformationURL     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCommercialInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMMERCIALINFORMATIONURL);
	}
	
    /**
     * Removes all values of property CommercialInformationURL	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCommercialInformationURL() {
		Base.removeAll(this.model, this.getResource(), COMMERCIALINFORMATIONURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1405ac5f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPOSER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1405ac5f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComposer() {
		return Base.has(this.model, this.getResource(), COMPOSER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1405ac5f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPOSER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1405ac5f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComposer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPOSER);
	}

     /**
     * Get all values of property Composer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPOSER);
	}
	
    /**
     * Get all values of property Composer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPOSER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Composer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPOSER);
	}

    /**
     * Get all values of property Composer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPOSER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Composer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPOSER, Contact.class);
	}
	
    /**
     * Get all values of property Composer as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllComposer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPOSER, Contact.class);
	}

    /**
     * Get all values of property Composer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllComposer() {
		return Base.getAll(this.model, this.getResource(), COMPOSER, Contact.class);
	}

    /**
     * Get all values of property Composer as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllComposer_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPOSER, Contact.class);
	}
 
    /**
     * Adds a value to property Composer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Adds a value to property Composer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComposer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPOSER, value);
	}
    /**
     * Adds a value to property Composer from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Adds a value to property Composer from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComposer(Contact value) {
		Base.add(this.model, this.getResource(), COMPOSER, value);
	}
  

    /**
     * Sets a value of property Composer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Sets a value of property Composer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComposer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPOSER, value);
	}
    /**
     * Sets a value of property Composer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Sets a value of property Composer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComposer(Contact value) {
		Base.set(this.model, this.getResource(), COMPOSER, value);
	}
  


    /**
     * Removes a value of property Composer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Removes a value of property Composer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComposer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPOSER, value);
	}
    /**
     * Removes a value of property Composer given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Removes a value of property Composer given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComposer(Contact value) {
		Base.remove(this.model, this.getResource(), COMPOSER, value);
	}
  
    /**
     * Removes all values of property Composer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPOSER);
	}
	
    /**
     * Removes all values of property Composer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComposer() {
		Base.removeAll(this.model, this.getResource(), COMPOSER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489578c1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasConductor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONDUCTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489578c1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasConductor() {
		return Base.has(this.model, this.getResource(), CONDUCTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489578c1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasConductor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONDUCTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489578c1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasConductor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONDUCTOR);
	}

     /**
     * Get all values of property Conductor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConductor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONDUCTOR);
	}
	
    /**
     * Get all values of property Conductor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConductor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONDUCTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Conductor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConductor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONDUCTOR);
	}

    /**
     * Get all values of property Conductor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConductor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONDUCTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Conductor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllConductor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONDUCTOR, Contact.class);
	}
	
    /**
     * Get all values of property Conductor as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllConductor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONDUCTOR, Contact.class);
	}

    /**
     * Get all values of property Conductor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllConductor() {
		return Base.getAll(this.model, this.getResource(), CONDUCTOR, Contact.class);
	}

    /**
     * Get all values of property Conductor as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllConductor_as() {
		return Base.getAll_as(this.model, this.getResource(), CONDUCTOR, Contact.class);
	}
 
    /**
     * Adds a value to property Conductor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addConductor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONDUCTOR, value);
	}
	
    /**
     * Adds a value to property Conductor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addConductor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONDUCTOR, value);
	}
    /**
     * Adds a value to property Conductor from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addConductor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, CONDUCTOR, value);
	}
	
    /**
     * Adds a value to property Conductor from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addConductor(Contact value) {
		Base.add(this.model, this.getResource(), CONDUCTOR, value);
	}
  

    /**
     * Sets a value of property Conductor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setConductor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONDUCTOR, value);
	}
	
    /**
     * Sets a value of property Conductor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setConductor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONDUCTOR, value);
	}
    /**
     * Sets a value of property Conductor from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setConductor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, CONDUCTOR, value);
	}
	
    /**
     * Sets a value of property Conductor from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setConductor(Contact value) {
		Base.set(this.model, this.getResource(), CONDUCTOR, value);
	}
  


    /**
     * Removes a value of property Conductor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeConductor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONDUCTOR, value);
	}
	
    /**
     * Removes a value of property Conductor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeConductor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONDUCTOR, value);
	}
    /**
     * Removes a value of property Conductor given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeConductor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, CONDUCTOR, value);
	}
	
    /**
     * Removes a value of property Conductor given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeConductor(Contact value) {
		Base.remove(this.model, this.getResource(), CONDUCTOR, value);
	}
  
    /**
     * Removes all values of property Conductor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllConductor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONDUCTOR);
	}
	
    /**
     * Removes all values of property Conductor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllConductor() {
		Base.removeAll(this.model, this.getResource(), CONDUCTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1393537d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentGroupDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTGROUPDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1393537d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentGroupDescription() {
		return Base.has(this.model, this.getResource(), CONTENTGROUPDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1393537d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentGroupDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTGROUPDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1393537d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentGroupDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTGROUPDESCRIPTION);
	}

     /**
     * Get all values of property ContentGroupDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentGroupDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTENTGROUPDESCRIPTION);
	}
	
    /**
     * Get all values of property ContentGroupDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentGroupDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTGROUPDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContentGroupDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentGroupDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENTGROUPDESCRIPTION);
	}

    /**
     * Get all values of property ContentGroupDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentGroupDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContentGroupDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllContentGroupDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTENTGROUPDESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property ContentGroupDescription as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllContentGroupDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTGROUPDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property ContentGroupDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllContentGroupDescription() {
		return Base.getAll(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property ContentGroupDescription as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllContentGroupDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ContentGroupDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContentGroupDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTENTGROUPDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ContentGroupDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContentGroupDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, value);
	}
    /**
     * Adds a value to property ContentGroupDescription from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContentGroupDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CONTENTGROUPDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ContentGroupDescription from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContentGroupDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property ContentGroupDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentGroupDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTGROUPDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ContentGroupDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentGroupDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, value);
	}
    /**
     * Sets a value of property ContentGroupDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentGroupDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTENTGROUPDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ContentGroupDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentGroupDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property ContentGroupDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentGroupDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTGROUPDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ContentGroupDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentGroupDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, value);
	}
    /**
     * Removes a value of property ContentGroupDescription given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentGroupDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTENTGROUPDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ContentGroupDescription given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentGroupDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTENTGROUPDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property ContentGroupDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentGroupDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTGROUPDESCRIPTION);
	}
	
    /**
     * Removes all values of property ContentGroupDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentGroupDescription() {
		Base.removeAll(this.model, this.getResource(), CONTENTGROUPDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1555bd22 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1555bd22 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentType() {
		return Base.has(this.model, this.getResource(), CONTENTTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1555bd22 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1555bd22 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTTYPE);
	}

     /**
     * Get all values of property ContentType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTENTTYPE);
	}
	
    /**
     * Get all values of property ContentType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContentType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENTTYPE);
	}

    /**
     * Get all values of property ContentType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContentType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllContentType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTENTTYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ContentType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllContentType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTTYPE, java.lang.String.class);
	}

    /**
     * Get all values of property ContentType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllContentType() {
		return Base.getAll(this.model, this.getResource(), CONTENTTYPE, java.lang.String.class);
	}

    /**
     * Get all values of property ContentType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllContentType_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTTYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ContentType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContentType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTENTTYPE, value);
	}
	
    /**
     * Adds a value to property ContentType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContentType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTENTTYPE, value);
	}
    /**
     * Adds a value to property ContentType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContentType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CONTENTTYPE, value);
	}
	
    /**
     * Adds a value to property ContentType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContentType(java.lang.String value) {
		Base.add(this.model, this.getResource(), CONTENTTYPE, value);
	}
  

    /**
     * Sets a value of property ContentType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTTYPE, value);
	}
	
    /**
     * Sets a value of property ContentType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTTYPE, value);
	}
    /**
     * Sets a value of property ContentType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTENTTYPE, value);
	}
	
    /**
     * Sets a value of property ContentType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentType(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTENTTYPE, value);
	}
  


    /**
     * Removes a value of property ContentType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTTYPE, value);
	}
	
    /**
     * Removes a value of property ContentType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTTYPE, value);
	}
    /**
     * Removes a value of property ContentType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTENTTYPE, value);
	}
	
    /**
     * Removes a value of property ContentType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTENTTYPE, value);
	}
  
    /**
     * Removes all values of property ContentType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTTYPE);
	}
	
    /**
     * Removes all values of property ContentType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentType() {
		Base.removeAll(this.model, this.getResource(), CONTENTTYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13de6be9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCopyrightInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COPYRIGHTINFORMATIONURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13de6be9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCopyrightInformationURL() {
		return Base.has(this.model, this.getResource(), COPYRIGHTINFORMATIONURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13de6be9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCopyrightInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COPYRIGHTINFORMATIONURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13de6be9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCopyrightInformationURL( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COPYRIGHTINFORMATIONURL);
	}

     /**
     * Get all values of property CopyrightInformationURL as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyrightInformationURL_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COPYRIGHTINFORMATIONURL);
	}
	
    /**
     * Get all values of property CopyrightInformationURL as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyrightInformationURL_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHTINFORMATIONURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CopyrightInformationURL as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyrightInformationURL_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COPYRIGHTINFORMATIONURL);
	}

    /**
     * Get all values of property CopyrightInformationURL as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyrightInformationURL_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CopyrightInformationURL     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCopyrightInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COPYRIGHTINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property CopyrightInformationURL as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCopyrightInformationURL_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHTINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property CopyrightInformationURL     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCopyrightInformationURL() {
		return Base.getAll(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property CopyrightInformationURL as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllCopyrightInformationURL_as() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property CopyrightInformationURL as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCopyrightInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COPYRIGHTINFORMATIONURL, value);
	}
	
    /**
     * Adds a value to property CopyrightInformationURL as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCopyrightInformationURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, value);
	}
    /**
     * Adds a value to property CopyrightInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCopyrightInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, COPYRIGHTINFORMATIONURL, value);
	}
	
    /**
     * Adds a value to property CopyrightInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCopyrightInformationURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, value);
	}
  

    /**
     * Sets a value of property CopyrightInformationURL from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCopyrightInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COPYRIGHTINFORMATIONURL, value);
	}
	
    /**
     * Sets a value of property CopyrightInformationURL from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCopyrightInformationURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, value);
	}
    /**
     * Sets a value of property CopyrightInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCopyrightInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, COPYRIGHTINFORMATIONURL, value);
	}
	
    /**
     * Sets a value of property CopyrightInformationURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCopyrightInformationURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, value);
	}
  


    /**
     * Removes a value of property CopyrightInformationURL as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCopyrightInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COPYRIGHTINFORMATIONURL, value);
	}
	
    /**
     * Removes a value of property CopyrightInformationURL as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCopyrightInformationURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, value);
	}
    /**
     * Removes a value of property CopyrightInformationURL given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCopyrightInformationURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, COPYRIGHTINFORMATIONURL, value);
	}
	
    /**
     * Removes a value of property CopyrightInformationURL given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCopyrightInformationURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), COPYRIGHTINFORMATIONURL, value);
	}
  
    /**
     * Removes all values of property CopyrightInformationURL     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCopyrightInformationURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COPYRIGHTINFORMATIONURL);
	}
	
    /**
     * Removes all values of property CopyrightInformationURL	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCopyrightInformationURL() {
		Base.removeAll(this.model, this.getResource(), COPYRIGHTINFORMATIONURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56781dd4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCopyrightMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COPYRIGHTMESSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56781dd4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCopyrightMessage() {
		return Base.has(this.model, this.getResource(), COPYRIGHTMESSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56781dd4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCopyrightMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COPYRIGHTMESSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56781dd4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCopyrightMessage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COPYRIGHTMESSAGE);
	}

     /**
     * Get all values of property CopyrightMessage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyrightMessage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COPYRIGHTMESSAGE);
	}
	
    /**
     * Get all values of property CopyrightMessage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyrightMessage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHTMESSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CopyrightMessage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyrightMessage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COPYRIGHTMESSAGE);
	}

    /**
     * Get all values of property CopyrightMessage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyrightMessage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHTMESSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CopyrightMessage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCopyrightMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COPYRIGHTMESSAGE, java.lang.String.class);
	}
	
    /**
     * Get all values of property CopyrightMessage as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCopyrightMessage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHTMESSAGE, java.lang.String.class);
	}

    /**
     * Get all values of property CopyrightMessage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCopyrightMessage() {
		return Base.getAll(this.model, this.getResource(), COPYRIGHTMESSAGE, java.lang.String.class);
	}

    /**
     * Get all values of property CopyrightMessage as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCopyrightMessage_as() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHTMESSAGE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property CopyrightMessage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCopyrightMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COPYRIGHTMESSAGE, value);
	}
	
    /**
     * Adds a value to property CopyrightMessage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCopyrightMessage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COPYRIGHTMESSAGE, value);
	}
    /**
     * Adds a value to property CopyrightMessage from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCopyrightMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COPYRIGHTMESSAGE, value);
	}
	
    /**
     * Adds a value to property CopyrightMessage from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCopyrightMessage(java.lang.String value) {
		Base.add(this.model, this.getResource(), COPYRIGHTMESSAGE, value);
	}
  

    /**
     * Sets a value of property CopyrightMessage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCopyrightMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COPYRIGHTMESSAGE, value);
	}
	
    /**
     * Sets a value of property CopyrightMessage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCopyrightMessage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COPYRIGHTMESSAGE, value);
	}
    /**
     * Sets a value of property CopyrightMessage from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCopyrightMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COPYRIGHTMESSAGE, value);
	}
	
    /**
     * Sets a value of property CopyrightMessage from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCopyrightMessage(java.lang.String value) {
		Base.set(this.model, this.getResource(), COPYRIGHTMESSAGE, value);
	}
  


    /**
     * Removes a value of property CopyrightMessage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCopyrightMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COPYRIGHTMESSAGE, value);
	}
	
    /**
     * Removes a value of property CopyrightMessage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCopyrightMessage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COPYRIGHTMESSAGE, value);
	}
    /**
     * Removes a value of property CopyrightMessage given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCopyrightMessage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COPYRIGHTMESSAGE, value);
	}
	
    /**
     * Removes a value of property CopyrightMessage given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCopyrightMessage(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COPYRIGHTMESSAGE, value);
	}
  
    /**
     * Removes all values of property CopyrightMessage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCopyrightMessage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COPYRIGHTMESSAGE);
	}
	
    /**
     * Removes all values of property CopyrightMessage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCopyrightMessage() {
		Base.removeAll(this.model, this.getResource(), COPYRIGHTMESSAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74e0eb3f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74e0eb3f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDate() {
		return Base.has(this.model, this.getResource(), DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74e0eb3f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74e0eb3f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATE);
	}

     /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATE);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATE);
	}

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATE, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllDate() {
		return Base.getAll(this.model, this.getResource(), DATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property Date as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllDate_as() {
		return Base.getAll_as(this.model, this.getResource(), DATE, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
    /**
     * Adds a value to property Date from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDate(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
  

    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
    /**
     * Sets a value of property Date from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
  


    /**
     * Removes a value of property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
    /**
     * Removes a value of property Date given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
  
    /**
     * Removes all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATE);
	}
	
    /**
     * Removes all values of property Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDate() {
		Base.removeAll(this.model, this.getResource(), DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be67280 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEncodedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENCODEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be67280 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEncodedBy() {
		return Base.has(this.model, this.getResource(), ENCODEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be67280 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEncodedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENCODEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3be67280 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEncodedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENCODEDBY);
	}

     /**
     * Get all values of property EncodedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEncodedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENCODEDBY);
	}
	
    /**
     * Get all values of property EncodedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEncodedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENCODEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EncodedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEncodedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENCODEDBY);
	}

    /**
     * Get all values of property EncodedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEncodedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENCODEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EncodedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllEncodedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENCODEDBY, Contact.class);
	}
	
    /**
     * Get all values of property EncodedBy as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllEncodedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENCODEDBY, Contact.class);
	}

    /**
     * Get all values of property EncodedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllEncodedBy() {
		return Base.getAll(this.model, this.getResource(), ENCODEDBY, Contact.class);
	}

    /**
     * Get all values of property EncodedBy as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllEncodedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), ENCODEDBY, Contact.class);
	}
 
    /**
     * Adds a value to property EncodedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEncodedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENCODEDBY, value);
	}
	
    /**
     * Adds a value to property EncodedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEncodedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENCODEDBY, value);
	}
    /**
     * Adds a value to property EncodedBy from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEncodedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, ENCODEDBY, value);
	}
	
    /**
     * Adds a value to property EncodedBy from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEncodedBy(Contact value) {
		Base.add(this.model, this.getResource(), ENCODEDBY, value);
	}
  

    /**
     * Sets a value of property EncodedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEncodedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENCODEDBY, value);
	}
	
    /**
     * Sets a value of property EncodedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEncodedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENCODEDBY, value);
	}
    /**
     * Sets a value of property EncodedBy from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEncodedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, ENCODEDBY, value);
	}
	
    /**
     * Sets a value of property EncodedBy from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEncodedBy(Contact value) {
		Base.set(this.model, this.getResource(), ENCODEDBY, value);
	}
  


    /**
     * Removes a value of property EncodedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEncodedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENCODEDBY, value);
	}
	
    /**
     * Removes a value of property EncodedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEncodedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENCODEDBY, value);
	}
    /**
     * Removes a value of property EncodedBy given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEncodedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, ENCODEDBY, value);
	}
	
    /**
     * Removes a value of property EncodedBy given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEncodedBy(Contact value) {
		Base.remove(this.model, this.getResource(), ENCODEDBY, value);
	}
  
    /**
     * Removes all values of property EncodedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEncodedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENCODEDBY);
	}
	
    /**
     * Removes all values of property EncodedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEncodedBy() {
		Base.removeAll(this.model, this.getResource(), ENCODEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12b0f0ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEncodingSettings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENCODINGSETTINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12b0f0ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEncodingSettings() {
		return Base.has(this.model, this.getResource(), ENCODINGSETTINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12b0f0ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEncodingSettings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENCODINGSETTINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12b0f0ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEncodingSettings( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENCODINGSETTINGS);
	}

     /**
     * Get all values of property EncodingSettings as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEncodingSettings_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENCODINGSETTINGS);
	}
	
    /**
     * Get all values of property EncodingSettings as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEncodingSettings_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENCODINGSETTINGS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EncodingSettings as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEncodingSettings_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENCODINGSETTINGS);
	}

    /**
     * Get all values of property EncodingSettings as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEncodingSettings_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENCODINGSETTINGS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EncodingSettings     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllEncodingSettings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENCODINGSETTINGS, java.lang.String.class);
	}
	
    /**
     * Get all values of property EncodingSettings as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllEncodingSettings_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENCODINGSETTINGS, java.lang.String.class);
	}

    /**
     * Get all values of property EncodingSettings     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllEncodingSettings() {
		return Base.getAll(this.model, this.getResource(), ENCODINGSETTINGS, java.lang.String.class);
	}

    /**
     * Get all values of property EncodingSettings as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllEncodingSettings_as() {
		return Base.getAll_as(this.model, this.getResource(), ENCODINGSETTINGS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property EncodingSettings as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEncodingSettings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENCODINGSETTINGS, value);
	}
	
    /**
     * Adds a value to property EncodingSettings as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEncodingSettings( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENCODINGSETTINGS, value);
	}
    /**
     * Adds a value to property EncodingSettings from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEncodingSettings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ENCODINGSETTINGS, value);
	}
	
    /**
     * Adds a value to property EncodingSettings from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEncodingSettings(java.lang.String value) {
		Base.add(this.model, this.getResource(), ENCODINGSETTINGS, value);
	}
  

    /**
     * Sets a value of property EncodingSettings from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEncodingSettings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENCODINGSETTINGS, value);
	}
	
    /**
     * Sets a value of property EncodingSettings from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEncodingSettings( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENCODINGSETTINGS, value);
	}
    /**
     * Sets a value of property EncodingSettings from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEncodingSettings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ENCODINGSETTINGS, value);
	}
	
    /**
     * Sets a value of property EncodingSettings from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEncodingSettings(java.lang.String value) {
		Base.set(this.model, this.getResource(), ENCODINGSETTINGS, value);
	}
  


    /**
     * Removes a value of property EncodingSettings as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEncodingSettings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENCODINGSETTINGS, value);
	}
	
    /**
     * Removes a value of property EncodingSettings as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEncodingSettings( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENCODINGSETTINGS, value);
	}
    /**
     * Removes a value of property EncodingSettings given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEncodingSettings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ENCODINGSETTINGS, value);
	}
	
    /**
     * Removes a value of property EncodingSettings given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEncodingSettings(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ENCODINGSETTINGS, value);
	}
  
    /**
     * Removes all values of property EncodingSettings     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEncodingSettings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENCODINGSETTINGS);
	}
	
    /**
     * Removes all values of property EncodingSettings	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEncodingSettings() {
		Base.removeAll(this.model, this.getResource(), ENCODINGSETTINGS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40914272 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40914272 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileType() {
		return Base.has(this.model, this.getResource(), FILETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40914272 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40914272 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILETYPE);
	}

     /**
     * Get all values of property FileType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILETYPE);
	}
	
    /**
     * Get all values of property FileType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILETYPE);
	}

    /**
     * Get all values of property FileType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFileType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILETYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property FileType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFileType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property FileType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFileType() {
		return Base.getAll(this.model, this.getResource(), FILETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property FileType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFileType_as() {
		return Base.getAll_as(this.model, this.getResource(), FILETYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FileType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILETYPE, value);
	}
	
    /**
     * Adds a value to property FileType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILETYPE, value);
	}
    /**
     * Adds a value to property FileType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FILETYPE, value);
	}
	
    /**
     * Adds a value to property FileType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileType(java.lang.String value) {
		Base.add(this.model, this.getResource(), FILETYPE, value);
	}
  

    /**
     * Sets a value of property FileType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILETYPE, value);
	}
	
    /**
     * Sets a value of property FileType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILETYPE, value);
	}
    /**
     * Sets a value of property FileType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FILETYPE, value);
	}
	
    /**
     * Sets a value of property FileType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileType(java.lang.String value) {
		Base.set(this.model, this.getResource(), FILETYPE, value);
	}
  


    /**
     * Removes a value of property FileType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILETYPE, value);
	}
	
    /**
     * Removes a value of property FileType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILETYPE, value);
	}
    /**
     * Removes a value of property FileType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FILETYPE, value);
	}
	
    /**
     * Removes a value of property FileType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FILETYPE, value);
	}
  
    /**
     * Removes all values of property FileType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILETYPE);
	}
	
    /**
     * Removes all values of property FileType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileType() {
		Base.removeAll(this.model, this.getResource(), FILETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3af4d6b3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneralEncapsulatedObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERALENCAPSULATEDOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3af4d6b3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneralEncapsulatedObject() {
		return Base.has(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3af4d6b3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneralEncapsulatedObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERALENCAPSULATEDOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3af4d6b3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneralEncapsulatedObject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT);
	}

     /**
     * Get all values of property GeneralEncapsulatedObject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneralEncapsulatedObject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERALENCAPSULATEDOBJECT);
	}
	
    /**
     * Get all values of property GeneralEncapsulatedObject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneralEncapsulatedObject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERALENCAPSULATEDOBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneralEncapsulatedObject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneralEncapsulatedObject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT);
	}

    /**
     * Get all values of property GeneralEncapsulatedObject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneralEncapsulatedObject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneralEncapsulatedObject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<DataObject> getAllGeneralEncapsulatedObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERALENCAPSULATEDOBJECT, DataObject.class);
	}
	
    /**
     * Get all values of property GeneralEncapsulatedObject as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<DataObject> getAllGeneralEncapsulatedObject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERALENCAPSULATEDOBJECT, DataObject.class);
	}

    /**
     * Get all values of property GeneralEncapsulatedObject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<DataObject> getAllGeneralEncapsulatedObject() {
		return Base.getAll(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, DataObject.class);
	}

    /**
     * Get all values of property GeneralEncapsulatedObject as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<DataObject> getAllGeneralEncapsulatedObject_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, DataObject.class);
	}
 
    /**
     * Adds a value to property GeneralEncapsulatedObject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneralEncapsulatedObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERALENCAPSULATEDOBJECT, value);
	}
	
    /**
     * Adds a value to property GeneralEncapsulatedObject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneralEncapsulatedObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, value);
	}
    /**
     * Adds a value to property GeneralEncapsulatedObject from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneralEncapsulatedObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.add(model, instanceResource, GENERALENCAPSULATEDOBJECT, value);
	}
	
    /**
     * Adds a value to property GeneralEncapsulatedObject from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneralEncapsulatedObject(DataObject value) {
		Base.add(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, value);
	}
  

    /**
     * Sets a value of property GeneralEncapsulatedObject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneralEncapsulatedObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERALENCAPSULATEDOBJECT, value);
	}
	
    /**
     * Sets a value of property GeneralEncapsulatedObject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneralEncapsulatedObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, value);
	}
    /**
     * Sets a value of property GeneralEncapsulatedObject from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneralEncapsulatedObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.set(model, instanceResource, GENERALENCAPSULATEDOBJECT, value);
	}
	
    /**
     * Sets a value of property GeneralEncapsulatedObject from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneralEncapsulatedObject(DataObject value) {
		Base.set(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, value);
	}
  


    /**
     * Removes a value of property GeneralEncapsulatedObject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneralEncapsulatedObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERALENCAPSULATEDOBJECT, value);
	}
	
    /**
     * Removes a value of property GeneralEncapsulatedObject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneralEncapsulatedObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, value);
	}
    /**
     * Removes a value of property GeneralEncapsulatedObject given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneralEncapsulatedObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, DataObject value) {
		Base.remove(model, instanceResource, GENERALENCAPSULATEDOBJECT, value);
	}
	
    /**
     * Removes a value of property GeneralEncapsulatedObject given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneralEncapsulatedObject(DataObject value) {
		Base.remove(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT, value);
	}
  
    /**
     * Removes all values of property GeneralEncapsulatedObject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneralEncapsulatedObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERALENCAPSULATEDOBJECT);
	}
	
    /**
     * Removes all values of property GeneralEncapsulatedObject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneralEncapsulatedObject() {
		Base.removeAll(this.model, this.getResource(), GENERALENCAPSULATEDOBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36f72f09 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasSynchronizedText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASSYNCHRONIZEDTEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36f72f09 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasSynchronizedText() {
		return Base.has(this.model, this.getResource(), HASSYNCHRONIZEDTEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36f72f09 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasSynchronizedText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASSYNCHRONIZEDTEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36f72f09 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasSynchronizedText( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASSYNCHRONIZEDTEXT);
	}

     /**
     * Get all values of property HasSynchronizedText as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasSynchronizedText_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASSYNCHRONIZEDTEXT);
	}
	
    /**
     * Get all values of property HasSynchronizedText as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasSynchronizedText_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASSYNCHRONIZEDTEXT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasSynchronizedText as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasSynchronizedText_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASSYNCHRONIZEDTEXT);
	}

    /**
     * Get all values of property HasSynchronizedText as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasSynchronizedText_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasSynchronizedText     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<SynchronizedText> getAllHasSynchronizedText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASSYNCHRONIZEDTEXT, SynchronizedText.class);
	}
	
    /**
     * Get all values of property HasSynchronizedText as a ReactorResult of SynchronizedText 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<SynchronizedText> getAllHasSynchronizedText_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASSYNCHRONIZEDTEXT, SynchronizedText.class);
	}

    /**
     * Get all values of property HasSynchronizedText     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<SynchronizedText> getAllHasSynchronizedText() {
		return Base.getAll(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, SynchronizedText.class);
	}

    /**
     * Get all values of property HasSynchronizedText as a ReactorResult of SynchronizedText 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<SynchronizedText> getAllHasSynchronizedText_as() {
		return Base.getAll_as(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, SynchronizedText.class);
	}
 
    /**
     * Adds a value to property HasSynchronizedText as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasSynchronizedText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASSYNCHRONIZEDTEXT, value);
	}
	
    /**
     * Adds a value to property HasSynchronizedText as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasSynchronizedText( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, value);
	}
    /**
     * Adds a value to property HasSynchronizedText from an instance of SynchronizedText 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasSynchronizedText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, SynchronizedText value) {
		Base.add(model, instanceResource, HASSYNCHRONIZEDTEXT, value);
	}
	
    /**
     * Adds a value to property HasSynchronizedText from an instance of SynchronizedText 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasSynchronizedText(SynchronizedText value) {
		Base.add(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, value);
	}
  

    /**
     * Sets a value of property HasSynchronizedText from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasSynchronizedText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASSYNCHRONIZEDTEXT, value);
	}
	
    /**
     * Sets a value of property HasSynchronizedText from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasSynchronizedText( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, value);
	}
    /**
     * Sets a value of property HasSynchronizedText from an instance of SynchronizedText 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasSynchronizedText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, SynchronizedText value) {
		Base.set(model, instanceResource, HASSYNCHRONIZEDTEXT, value);
	}
	
    /**
     * Sets a value of property HasSynchronizedText from an instance of SynchronizedText 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasSynchronizedText(SynchronizedText value) {
		Base.set(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, value);
	}
  


    /**
     * Removes a value of property HasSynchronizedText as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasSynchronizedText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASSYNCHRONIZEDTEXT, value);
	}
	
    /**
     * Removes a value of property HasSynchronizedText as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasSynchronizedText( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, value);
	}
    /**
     * Removes a value of property HasSynchronizedText given as an instance of SynchronizedText 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasSynchronizedText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, SynchronizedText value) {
		Base.remove(model, instanceResource, HASSYNCHRONIZEDTEXT, value);
	}
	
    /**
     * Removes a value of property HasSynchronizedText given as an instance of SynchronizedText 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasSynchronizedText(SynchronizedText value) {
		Base.remove(this.model, this.getResource(), HASSYNCHRONIZEDTEXT, value);
	}
  
    /**
     * Removes all values of property HasSynchronizedText     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasSynchronizedText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASSYNCHRONIZEDTEXT);
	}
	
    /**
     * Removes all values of property HasSynchronizedText	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasSynchronizedText() {
		Base.removeAll(this.model, this.getResource(), HASSYNCHRONIZEDTEXT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54bec43f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInitialKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INITIALKEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54bec43f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInitialKey() {
		return Base.has(this.model, this.getResource(), INITIALKEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54bec43f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInitialKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INITIALKEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54bec43f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInitialKey( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INITIALKEY);
	}

     /**
     * Get all values of property InitialKey as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInitialKey_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INITIALKEY);
	}
	
    /**
     * Get all values of property InitialKey as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInitialKey_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INITIALKEY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InitialKey as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInitialKey_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INITIALKEY);
	}

    /**
     * Get all values of property InitialKey as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInitialKey_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INITIALKEY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InitialKey     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllInitialKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INITIALKEY, java.lang.String.class);
	}
	
    /**
     * Get all values of property InitialKey as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllInitialKey_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INITIALKEY, java.lang.String.class);
	}

    /**
     * Get all values of property InitialKey     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllInitialKey() {
		return Base.getAll(this.model, this.getResource(), INITIALKEY, java.lang.String.class);
	}

    /**
     * Get all values of property InitialKey as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllInitialKey_as() {
		return Base.getAll_as(this.model, this.getResource(), INITIALKEY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property InitialKey as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInitialKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INITIALKEY, value);
	}
	
    /**
     * Adds a value to property InitialKey as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInitialKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INITIALKEY, value);
	}
    /**
     * Adds a value to property InitialKey from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInitialKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, INITIALKEY, value);
	}
	
    /**
     * Adds a value to property InitialKey from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInitialKey(java.lang.String value) {
		Base.add(this.model, this.getResource(), INITIALKEY, value);
	}
  

    /**
     * Sets a value of property InitialKey from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInitialKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INITIALKEY, value);
	}
	
    /**
     * Sets a value of property InitialKey from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInitialKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INITIALKEY, value);
	}
    /**
     * Sets a value of property InitialKey from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInitialKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INITIALKEY, value);
	}
	
    /**
     * Sets a value of property InitialKey from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInitialKey(java.lang.String value) {
		Base.set(this.model, this.getResource(), INITIALKEY, value);
	}
  


    /**
     * Removes a value of property InitialKey as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInitialKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INITIALKEY, value);
	}
	
    /**
     * Removes a value of property InitialKey as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInitialKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INITIALKEY, value);
	}
    /**
     * Removes a value of property InitialKey given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInitialKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INITIALKEY, value);
	}
	
    /**
     * Removes a value of property InitialKey given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInitialKey(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INITIALKEY, value);
	}
  
    /**
     * Removes all values of property InitialKey     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInitialKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INITIALKEY);
	}
	
    /**
     * Removes all values of property InitialKey	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInitialKey() {
		Base.removeAll(this.model, this.getResource(), INITIALKEY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@252cdd20 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@252cdd20 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInternationalStandardRecordingCode() {
		return Base.has(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@252cdd20 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@252cdd20 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}

     /**
     * Get all values of property InternationalStandardRecordingCode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInternationalStandardRecordingCode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}
	
    /**
     * Get all values of property InternationalStandardRecordingCode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInternationalStandardRecordingCode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InternationalStandardRecordingCode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInternationalStandardRecordingCode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Get all values of property InternationalStandardRecordingCode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInternationalStandardRecordingCode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InternationalStandardRecordingCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, java.lang.String.class);
	}
	
    /**
     * Get all values of property InternationalStandardRecordingCode as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllInternationalStandardRecordingCode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, java.lang.String.class);
	}

    /**
     * Get all values of property InternationalStandardRecordingCode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllInternationalStandardRecordingCode() {
		return Base.getAll(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, java.lang.String.class);
	}

    /**
     * Get all values of property InternationalStandardRecordingCode as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllInternationalStandardRecordingCode_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property InternationalStandardRecordingCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Adds a value to property InternationalStandardRecordingCode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
    /**
     * Adds a value to property InternationalStandardRecordingCode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Adds a value to property InternationalStandardRecordingCode from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInternationalStandardRecordingCode(java.lang.String value) {
		Base.add(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
  

    /**
     * Sets a value of property InternationalStandardRecordingCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Sets a value of property InternationalStandardRecordingCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
    /**
     * Sets a value of property InternationalStandardRecordingCode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Sets a value of property InternationalStandardRecordingCode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInternationalStandardRecordingCode(java.lang.String value) {
		Base.set(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
  


    /**
     * Removes a value of property InternationalStandardRecordingCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Removes a value of property InternationalStandardRecordingCode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
    /**
     * Removes a value of property InternationalStandardRecordingCode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Removes a value of property InternationalStandardRecordingCode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInternationalStandardRecordingCode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
  
    /**
     * Removes all values of property InternationalStandardRecordingCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}
	
    /**
     * Removes all values of property InternationalStandardRecordingCode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInternationalStandardRecordingCode() {
		Base.removeAll(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454e2c9c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInternetRadioStationName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERNETRADIOSTATIONNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454e2c9c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInternetRadioStationName() {
		return Base.has(this.model, this.getResource(), INTERNETRADIOSTATIONNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454e2c9c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInternetRadioStationName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERNETRADIOSTATIONNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454e2c9c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInternetRadioStationName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERNETRADIOSTATIONNAME);
	}

     /**
     * Get all values of property InternetRadioStationName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERNETRADIOSTATIONNAME);
	}
	
    /**
     * Get all values of property InternetRadioStationName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERNETRADIOSTATIONNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InternetRadioStationName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERNETRADIOSTATIONNAME);
	}

    /**
     * Get all values of property InternetRadioStationName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InternetRadioStationName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllInternetRadioStationName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERNETRADIOSTATIONNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property InternetRadioStationName as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllInternetRadioStationName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERNETRADIOSTATIONNAME, java.lang.String.class);
	}

    /**
     * Get all values of property InternetRadioStationName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllInternetRadioStationName() {
		return Base.getAll(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, java.lang.String.class);
	}

    /**
     * Get all values of property InternetRadioStationName as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllInternetRadioStationName_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property InternetRadioStationName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInternetRadioStationName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERNETRADIOSTATIONNAME, value);
	}
	
    /**
     * Adds a value to property InternetRadioStationName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInternetRadioStationName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, value);
	}
    /**
     * Adds a value to property InternetRadioStationName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInternetRadioStationName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, INTERNETRADIOSTATIONNAME, value);
	}
	
    /**
     * Adds a value to property InternetRadioStationName from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInternetRadioStationName(java.lang.String value) {
		Base.add(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, value);
	}
  

    /**
     * Sets a value of property InternetRadioStationName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInternetRadioStationName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERNETRADIOSTATIONNAME, value);
	}
	
    /**
     * Sets a value of property InternetRadioStationName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInternetRadioStationName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, value);
	}
    /**
     * Sets a value of property InternetRadioStationName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInternetRadioStationName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INTERNETRADIOSTATIONNAME, value);
	}
	
    /**
     * Sets a value of property InternetRadioStationName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInternetRadioStationName(java.lang.String value) {
		Base.set(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, value);
	}
  


    /**
     * Removes a value of property InternetRadioStationName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInternetRadioStationName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERNETRADIOSTATIONNAME, value);
	}
	
    /**
     * Removes a value of property InternetRadioStationName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInternetRadioStationName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, value);
	}
    /**
     * Removes a value of property InternetRadioStationName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInternetRadioStationName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INTERNETRADIOSTATIONNAME, value);
	}
	
    /**
     * Removes a value of property InternetRadioStationName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInternetRadioStationName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INTERNETRADIOSTATIONNAME, value);
	}
  
    /**
     * Removes all values of property InternetRadioStationName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInternetRadioStationName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERNETRADIOSTATIONNAME);
	}
	
    /**
     * Removes all values of property InternetRadioStationName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInternetRadioStationName() {
		Base.removeAll(this.model, this.getResource(), INTERNETRADIOSTATIONNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd40f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInternetRadioStationOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERNETRADIOSTATIONOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd40f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInternetRadioStationOwner() {
		return Base.has(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd40f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInternetRadioStationOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERNETRADIOSTATIONOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd40f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInternetRadioStationOwner( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER);
	}

     /**
     * Get all values of property InternetRadioStationOwner as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationOwner_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERNETRADIOSTATIONOWNER);
	}
	
    /**
     * Get all values of property InternetRadioStationOwner as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationOwner_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERNETRADIOSTATIONOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InternetRadioStationOwner as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationOwner_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER);
	}

    /**
     * Get all values of property InternetRadioStationOwner as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInternetRadioStationOwner_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InternetRadioStationOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllInternetRadioStationOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERNETRADIOSTATIONOWNER, Contact.class);
	}
	
    /**
     * Get all values of property InternetRadioStationOwner as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllInternetRadioStationOwner_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERNETRADIOSTATIONOWNER, Contact.class);
	}

    /**
     * Get all values of property InternetRadioStationOwner     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllInternetRadioStationOwner() {
		return Base.getAll(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, Contact.class);
	}

    /**
     * Get all values of property InternetRadioStationOwner as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllInternetRadioStationOwner_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, Contact.class);
	}
 
    /**
     * Adds a value to property InternetRadioStationOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInternetRadioStationOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERNETRADIOSTATIONOWNER, value);
	}
	
    /**
     * Adds a value to property InternetRadioStationOwner as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInternetRadioStationOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, value);
	}
    /**
     * Adds a value to property InternetRadioStationOwner from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInternetRadioStationOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, INTERNETRADIOSTATIONOWNER, value);
	}
	
    /**
     * Adds a value to property InternetRadioStationOwner from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInternetRadioStationOwner(Contact value) {
		Base.add(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, value);
	}
  

    /**
     * Sets a value of property InternetRadioStationOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInternetRadioStationOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERNETRADIOSTATIONOWNER, value);
	}
	
    /**
     * Sets a value of property InternetRadioStationOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInternetRadioStationOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, value);
	}
    /**
     * Sets a value of property InternetRadioStationOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInternetRadioStationOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, INTERNETRADIOSTATIONOWNER, value);
	}
	
    /**
     * Sets a value of property InternetRadioStationOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInternetRadioStationOwner(Contact value) {
		Base.set(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, value);
	}
  


    /**
     * Removes a value of property InternetRadioStationOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInternetRadioStationOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERNETRADIOSTATIONOWNER, value);
	}
	
    /**
     * Removes a value of property InternetRadioStationOwner as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInternetRadioStationOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, value);
	}
    /**
     * Removes a value of property InternetRadioStationOwner given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInternetRadioStationOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, INTERNETRADIOSTATIONOWNER, value);
	}
	
    /**
     * Removes a value of property InternetRadioStationOwner given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInternetRadioStationOwner(Contact value) {
		Base.remove(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER, value);
	}
  
    /**
     * Removes all values of property InternetRadioStationOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInternetRadioStationOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERNETRADIOSTATIONOWNER);
	}
	
    /**
     * Removes all values of property InternetRadioStationOwner	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInternetRadioStationOwner() {
		Base.removeAll(this.model, this.getResource(), INTERNETRADIOSTATIONOWNER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397d812b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInterpretedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERPRETEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397d812b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInterpretedBy() {
		return Base.has(this.model, this.getResource(), INTERPRETEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397d812b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInterpretedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERPRETEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397d812b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInterpretedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERPRETEDBY);
	}

     /**
     * Get all values of property InterpretedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInterpretedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERPRETEDBY);
	}
	
    /**
     * Get all values of property InterpretedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInterpretedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERPRETEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InterpretedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInterpretedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERPRETEDBY);
	}

    /**
     * Get all values of property InterpretedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInterpretedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERPRETEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InterpretedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllInterpretedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERPRETEDBY, Contact.class);
	}
	
    /**
     * Get all values of property InterpretedBy as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllInterpretedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERPRETEDBY, Contact.class);
	}

    /**
     * Get all values of property InterpretedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllInterpretedBy() {
		return Base.getAll(this.model, this.getResource(), INTERPRETEDBY, Contact.class);
	}

    /**
     * Get all values of property InterpretedBy as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllInterpretedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERPRETEDBY, Contact.class);
	}
 
    /**
     * Adds a value to property InterpretedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInterpretedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERPRETEDBY, value);
	}
	
    /**
     * Adds a value to property InterpretedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInterpretedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERPRETEDBY, value);
	}
    /**
     * Adds a value to property InterpretedBy from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInterpretedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, INTERPRETEDBY, value);
	}
	
    /**
     * Adds a value to property InterpretedBy from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInterpretedBy(Contact value) {
		Base.add(this.model, this.getResource(), INTERPRETEDBY, value);
	}
  

    /**
     * Sets a value of property InterpretedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInterpretedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERPRETEDBY, value);
	}
	
    /**
     * Sets a value of property InterpretedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInterpretedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERPRETEDBY, value);
	}
    /**
     * Sets a value of property InterpretedBy from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInterpretedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, INTERPRETEDBY, value);
	}
	
    /**
     * Sets a value of property InterpretedBy from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInterpretedBy(Contact value) {
		Base.set(this.model, this.getResource(), INTERPRETEDBY, value);
	}
  


    /**
     * Removes a value of property InterpretedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInterpretedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERPRETEDBY, value);
	}
	
    /**
     * Removes a value of property InterpretedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInterpretedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERPRETEDBY, value);
	}
    /**
     * Removes a value of property InterpretedBy given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInterpretedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, INTERPRETEDBY, value);
	}
	
    /**
     * Removes a value of property InterpretedBy given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInterpretedBy(Contact value) {
		Base.remove(this.model, this.getResource(), INTERPRETEDBY, value);
	}
  
    /**
     * Removes all values of property InterpretedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInterpretedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERPRETEDBY);
	}
	
    /**
     * Removes all values of property InterpretedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInterpretedBy() {
		Base.removeAll(this.model, this.getResource(), INTERPRETEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c324b85 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInvolvedPerson(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVOLVEDPERSON);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c324b85 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInvolvedPerson() {
		return Base.has(this.model, this.getResource(), INVOLVEDPERSON);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c324b85 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInvolvedPerson(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVOLVEDPERSON);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c324b85 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInvolvedPerson( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVOLVEDPERSON);
	}

     /**
     * Get all values of property InvolvedPerson as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPerson_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVOLVEDPERSON);
	}
	
    /**
     * Get all values of property InvolvedPerson as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPerson_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVOLVEDPERSON, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InvolvedPerson as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPerson_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVOLVEDPERSON);
	}

    /**
     * Get all values of property InvolvedPerson as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPerson_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVOLVEDPERSON, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InvolvedPerson     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<InvolvedPerson> getAllInvolvedPerson(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVOLVEDPERSON, InvolvedPerson.class);
	}
	
    /**
     * Get all values of property InvolvedPerson as a ReactorResult of InvolvedPerson 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<InvolvedPerson> getAllInvolvedPerson_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVOLVEDPERSON, InvolvedPerson.class);
	}

    /**
     * Get all values of property InvolvedPerson     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<InvolvedPerson> getAllInvolvedPerson() {
		return Base.getAll(this.model, this.getResource(), INVOLVEDPERSON, InvolvedPerson.class);
	}

    /**
     * Get all values of property InvolvedPerson as a ReactorResult of InvolvedPerson 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<InvolvedPerson> getAllInvolvedPerson_as() {
		return Base.getAll_as(this.model, this.getResource(), INVOLVEDPERSON, InvolvedPerson.class);
	}
 
    /**
     * Adds a value to property InvolvedPerson as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInvolvedPerson( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVOLVEDPERSON, value);
	}
	
    /**
     * Adds a value to property InvolvedPerson as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInvolvedPerson( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVOLVEDPERSON, value);
	}
    /**
     * Adds a value to property InvolvedPerson from an instance of InvolvedPerson 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInvolvedPerson(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InvolvedPerson value) {
		Base.add(model, instanceResource, INVOLVEDPERSON, value);
	}
	
    /**
     * Adds a value to property InvolvedPerson from an instance of InvolvedPerson 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInvolvedPerson(InvolvedPerson value) {
		Base.add(this.model, this.getResource(), INVOLVEDPERSON, value);
	}
  

    /**
     * Sets a value of property InvolvedPerson from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInvolvedPerson( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVOLVEDPERSON, value);
	}
	
    /**
     * Sets a value of property InvolvedPerson from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInvolvedPerson( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVOLVEDPERSON, value);
	}
    /**
     * Sets a value of property InvolvedPerson from an instance of InvolvedPerson 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInvolvedPerson(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InvolvedPerson value) {
		Base.set(model, instanceResource, INVOLVEDPERSON, value);
	}
	
    /**
     * Sets a value of property InvolvedPerson from an instance of InvolvedPerson 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInvolvedPerson(InvolvedPerson value) {
		Base.set(this.model, this.getResource(), INVOLVEDPERSON, value);
	}
  


    /**
     * Removes a value of property InvolvedPerson as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInvolvedPerson( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVOLVEDPERSON, value);
	}
	
    /**
     * Removes a value of property InvolvedPerson as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInvolvedPerson( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVOLVEDPERSON, value);
	}
    /**
     * Removes a value of property InvolvedPerson given as an instance of InvolvedPerson 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInvolvedPerson(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, InvolvedPerson value) {
		Base.remove(model, instanceResource, INVOLVEDPERSON, value);
	}
	
    /**
     * Removes a value of property InvolvedPerson given as an instance of InvolvedPerson 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInvolvedPerson(InvolvedPerson value) {
		Base.remove(this.model, this.getResource(), INVOLVEDPERSON, value);
	}
  
    /**
     * Removes all values of property InvolvedPerson     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInvolvedPerson( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVOLVEDPERSON);
	}
	
    /**
     * Removes all values of property InvolvedPerson	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInvolvedPerson() {
		Base.removeAll(this.model, this.getResource(), INVOLVEDPERSON);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9de959 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLeadArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LEADARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9de959 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLeadArtist() {
		return Base.has(this.model, this.getResource(), LEADARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9de959 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLeadArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LEADARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9de959 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLeadArtist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LEADARTIST);
	}

     /**
     * Get all values of property LeadArtist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLeadArtist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LEADARTIST);
	}
	
    /**
     * Get all values of property LeadArtist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLeadArtist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LEADARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LeadArtist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLeadArtist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LEADARTIST);
	}

    /**
     * Get all values of property LeadArtist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLeadArtist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LEADARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LeadArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllLeadArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LEADARTIST, Contact.class);
	}
	
    /**
     * Get all values of property LeadArtist as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllLeadArtist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LEADARTIST, Contact.class);
	}

    /**
     * Get all values of property LeadArtist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllLeadArtist() {
		return Base.getAll(this.model, this.getResource(), LEADARTIST, Contact.class);
	}

    /**
     * Get all values of property LeadArtist as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllLeadArtist_as() {
		return Base.getAll_as(this.model, this.getResource(), LEADARTIST, Contact.class);
	}
 
    /**
     * Adds a value to property LeadArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLeadArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LEADARTIST, value);
	}
	
    /**
     * Adds a value to property LeadArtist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLeadArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LEADARTIST, value);
	}
    /**
     * Adds a value to property LeadArtist from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLeadArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, LEADARTIST, value);
	}
	
    /**
     * Adds a value to property LeadArtist from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLeadArtist(Contact value) {
		Base.add(this.model, this.getResource(), LEADARTIST, value);
	}
  

    /**
     * Sets a value of property LeadArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLeadArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LEADARTIST, value);
	}
	
    /**
     * Sets a value of property LeadArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLeadArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LEADARTIST, value);
	}
    /**
     * Sets a value of property LeadArtist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLeadArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, LEADARTIST, value);
	}
	
    /**
     * Sets a value of property LeadArtist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLeadArtist(Contact value) {
		Base.set(this.model, this.getResource(), LEADARTIST, value);
	}
  


    /**
     * Removes a value of property LeadArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLeadArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LEADARTIST, value);
	}
	
    /**
     * Removes a value of property LeadArtist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLeadArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LEADARTIST, value);
	}
    /**
     * Removes a value of property LeadArtist given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLeadArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, LEADARTIST, value);
	}
	
    /**
     * Removes a value of property LeadArtist given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLeadArtist(Contact value) {
		Base.remove(this.model, this.getResource(), LEADARTIST, value);
	}
  
    /**
     * Removes all values of property LeadArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLeadArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LEADARTIST);
	}
	
    /**
     * Removes all values of property LeadArtist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLeadArtist() {
		Base.removeAll(this.model, this.getResource(), LEADARTIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76340c9c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76340c9c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLength() {
		return Base.has(this.model, this.getResource(), LENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76340c9c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76340c9c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LENGTH);
	}

     /**
     * Get all values of property Length as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LENGTH);
	}
	
    /**
     * Get all values of property Length as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Length as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LENGTH);
	}

    /**
     * Get all values of property Length as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Length     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LENGTH, java.lang.String.class);
	}
	
    /**
     * Get all values of property Length as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LENGTH, java.lang.String.class);
	}

    /**
     * Get all values of property Length     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLength() {
		return Base.getAll(this.model, this.getResource(), LENGTH, java.lang.String.class);
	}

    /**
     * Get all values of property Length as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLength_as() {
		return Base.getAll_as(this.model, this.getResource(), LENGTH, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Length as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Adds a value to property Length as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LENGTH, value);
	}
    /**
     * Adds a value to property Length from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Adds a value to property Length from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLength(java.lang.String value) {
		Base.add(this.model, this.getResource(), LENGTH, value);
	}
  

    /**
     * Sets a value of property Length from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Sets a value of property Length from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LENGTH, value);
	}
    /**
     * Sets a value of property Length from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Sets a value of property Length from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLength(java.lang.String value) {
		Base.set(this.model, this.getResource(), LENGTH, value);
	}
  


    /**
     * Removes a value of property Length as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Removes a value of property Length as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LENGTH, value);
	}
    /**
     * Removes a value of property Length given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Removes a value of property Length given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLength(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LENGTH, value);
	}
  
    /**
     * Removes all values of property Length     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LENGTH);
	}
	
    /**
     * Removes all values of property Length	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLength() {
		Base.removeAll(this.model, this.getResource(), LENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4d82e1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLicensee(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LICENSEE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4d82e1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLicensee() {
		return Base.has(this.model, this.getResource(), LICENSEE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4d82e1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLicensee(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LICENSEE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4d82e1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLicensee( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LICENSEE);
	}

     /**
     * Get all values of property Licensee as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicensee_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LICENSEE);
	}
	
    /**
     * Get all values of property Licensee as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicensee_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSEE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Licensee as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicensee_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LICENSEE);
	}

    /**
     * Get all values of property Licensee as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicensee_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LICENSEE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Licensee     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllLicensee(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LICENSEE, Contact.class);
	}
	
    /**
     * Get all values of property Licensee as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllLicensee_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSEE, Contact.class);
	}

    /**
     * Get all values of property Licensee     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllLicensee() {
		return Base.getAll(this.model, this.getResource(), LICENSEE, Contact.class);
	}

    /**
     * Get all values of property Licensee as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllLicensee_as() {
		return Base.getAll_as(this.model, this.getResource(), LICENSEE, Contact.class);
	}
 
    /**
     * Adds a value to property Licensee as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLicensee( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LICENSEE, value);
	}
	
    /**
     * Adds a value to property Licensee as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLicensee( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LICENSEE, value);
	}
    /**
     * Adds a value to property Licensee from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLicensee(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, LICENSEE, value);
	}
	
    /**
     * Adds a value to property Licensee from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLicensee(Contact value) {
		Base.add(this.model, this.getResource(), LICENSEE, value);
	}
  

    /**
     * Sets a value of property Licensee from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLicensee( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LICENSEE, value);
	}
	
    /**
     * Sets a value of property Licensee from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLicensee( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LICENSEE, value);
	}
    /**
     * Sets a value of property Licensee from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLicensee(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, LICENSEE, value);
	}
	
    /**
     * Sets a value of property Licensee from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLicensee(Contact value) {
		Base.set(this.model, this.getResource(), LICENSEE, value);
	}
  


    /**
     * Removes a value of property Licensee as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLicensee( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LICENSEE, value);
	}
	
    /**
     * Removes a value of property Licensee as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLicensee( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LICENSEE, value);
	}
    /**
     * Removes a value of property Licensee given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLicensee(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, LICENSEE, value);
	}
	
    /**
     * Removes a value of property Licensee given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLicensee(Contact value) {
		Base.remove(this.model, this.getResource(), LICENSEE, value);
	}
  
    /**
     * Removes all values of property Licensee     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLicensee( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LICENSEE);
	}
	
    /**
     * Removes all values of property Licensee	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLicensee() {
		Base.removeAll(this.model, this.getResource(), LICENSEE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8e1dfb1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMediaType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MEDIATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8e1dfb1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMediaType() {
		return Base.has(this.model, this.getResource(), MEDIATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8e1dfb1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMediaType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEDIATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8e1dfb1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMediaType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEDIATYPE);
	}

     /**
     * Get all values of property MediaType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMediaType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEDIATYPE);
	}
	
    /**
     * Get all values of property MediaType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMediaType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEDIATYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MediaType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMediaType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEDIATYPE);
	}

    /**
     * Get all values of property MediaType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMediaType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEDIATYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MediaType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMediaType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEDIATYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property MediaType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMediaType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEDIATYPE, java.lang.String.class);
	}

    /**
     * Get all values of property MediaType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMediaType() {
		return Base.getAll(this.model, this.getResource(), MEDIATYPE, java.lang.String.class);
	}

    /**
     * Get all values of property MediaType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMediaType_as() {
		return Base.getAll_as(this.model, this.getResource(), MEDIATYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MediaType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMediaType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEDIATYPE, value);
	}
	
    /**
     * Adds a value to property MediaType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMediaType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEDIATYPE, value);
	}
    /**
     * Adds a value to property MediaType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMediaType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MEDIATYPE, value);
	}
	
    /**
     * Adds a value to property MediaType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMediaType(java.lang.String value) {
		Base.add(this.model, this.getResource(), MEDIATYPE, value);
	}
  

    /**
     * Sets a value of property MediaType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMediaType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEDIATYPE, value);
	}
	
    /**
     * Sets a value of property MediaType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMediaType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEDIATYPE, value);
	}
    /**
     * Sets a value of property MediaType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMediaType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MEDIATYPE, value);
	}
	
    /**
     * Sets a value of property MediaType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMediaType(java.lang.String value) {
		Base.set(this.model, this.getResource(), MEDIATYPE, value);
	}
  


    /**
     * Removes a value of property MediaType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMediaType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEDIATYPE, value);
	}
	
    /**
     * Removes a value of property MediaType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMediaType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEDIATYPE, value);
	}
    /**
     * Removes a value of property MediaType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMediaType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MEDIATYPE, value);
	}
	
    /**
     * Removes a value of property MediaType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMediaType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MEDIATYPE, value);
	}
  
    /**
     * Removes all values of property MediaType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMediaType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEDIATYPE);
	}
	
    /**
     * Removes all values of property MediaType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMediaType() {
		Base.removeAll(this.model, this.getResource(), MEDIATYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52aaf3d2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MUSICCDIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52aaf3d2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMusicCDIdentifier() {
		return Base.has(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52aaf3d2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MUSICCDIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52aaf3d2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}

     /**
     * Get all values of property MusicCDIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MUSICCDIDENTIFIER);
	}
	
    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MUSICCDIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MusicCDIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}

    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MUSICCDIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MusicCDIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MUSICCDIDENTIFIER, java.lang.String.class);
	}
	
    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMusicCDIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MUSICCDIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property MusicCDIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMusicCDIdentifier() {
		return Base.getAll(this.model, this.getResource(), MUSICCDIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMusicCDIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), MUSICCDIDENTIFIER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MusicCDIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property MusicCDIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
    /**
     * Adds a value to property MusicCDIdentifier from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property MusicCDIdentifier from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMusicCDIdentifier(java.lang.String value) {
		Base.add(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property MusicCDIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property MusicCDIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
    /**
     * Sets a value of property MusicCDIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property MusicCDIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMusicCDIdentifier(java.lang.String value) {
		Base.set(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property MusicCDIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property MusicCDIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
    /**
     * Removes a value of property MusicCDIdentifier given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property MusicCDIdentifier given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMusicCDIdentifier(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property MusicCDIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MUSICCDIDENTIFIER);
	}
	
    /**
     * Removes all values of property MusicCDIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMusicCDIdentifier() {
		Base.removeAll(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57801e5f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOfficialArtistWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OFFICIALARTISTWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57801e5f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOfficialArtistWebpage() {
		return Base.has(this.model, this.getResource(), OFFICIALARTISTWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57801e5f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOfficialArtistWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OFFICIALARTISTWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57801e5f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOfficialArtistWebpage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OFFICIALARTISTWEBPAGE);
	}

     /**
     * Get all values of property OfficialArtistWebpage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialArtistWebpage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OFFICIALARTISTWEBPAGE);
	}
	
    /**
     * Get all values of property OfficialArtistWebpage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialArtistWebpage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALARTISTWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OfficialArtistWebpage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialArtistWebpage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OFFICIALARTISTWEBPAGE);
	}

    /**
     * Get all values of property OfficialArtistWebpage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialArtistWebpage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OfficialArtistWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialArtistWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OFFICIALARTISTWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property OfficialArtistWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialArtistWebpage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALARTISTWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialArtistWebpage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialArtistWebpage() {
		return Base.getAll(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialArtistWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialArtistWebpage_as() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property OfficialArtistWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOfficialArtistWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OFFICIALARTISTWEBPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialArtistWebpage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOfficialArtistWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, value);
	}
    /**
     * Adds a value to property OfficialArtistWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOfficialArtistWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OFFICIALARTISTWEBPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialArtistWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOfficialArtistWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, value);
	}
  

    /**
     * Sets a value of property OfficialArtistWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOfficialArtistWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OFFICIALARTISTWEBPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialArtistWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOfficialArtistWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, value);
	}
    /**
     * Sets a value of property OfficialArtistWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOfficialArtistWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OFFICIALARTISTWEBPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialArtistWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOfficialArtistWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, value);
	}
  


    /**
     * Removes a value of property OfficialArtistWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOfficialArtistWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OFFICIALARTISTWEBPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialArtistWebpage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOfficialArtistWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, value);
	}
    /**
     * Removes a value of property OfficialArtistWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOfficialArtistWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OFFICIALARTISTWEBPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialArtistWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOfficialArtistWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OFFICIALARTISTWEBPAGE, value);
	}
  
    /**
     * Removes all values of property OfficialArtistWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOfficialArtistWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OFFICIALARTISTWEBPAGE);
	}
	
    /**
     * Removes all values of property OfficialArtistWebpage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOfficialArtistWebpage() {
		Base.removeAll(this.model, this.getResource(), OFFICIALARTISTWEBPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5506d4ea has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOfficialAudioSourceWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5506d4ea has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOfficialAudioSourceWebpage() {
		return Base.has(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5506d4ea has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOfficialAudioSourceWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5506d4ea has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOfficialAudioSourceWebpage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE);
	}

     /**
     * Get all values of property OfficialAudioSourceWebpage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialAudioSourceWebpage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE);
	}
	
    /**
     * Get all values of property OfficialAudioSourceWebpage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialAudioSourceWebpage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OfficialAudioSourceWebpage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialAudioSourceWebpage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE);
	}

    /**
     * Get all values of property OfficialAudioSourceWebpage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialAudioSourceWebpage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OfficialAudioSourceWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialAudioSourceWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property OfficialAudioSourceWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialAudioSourceWebpage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialAudioSourceWebpage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialAudioSourceWebpage() {
		return Base.getAll(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialAudioSourceWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialAudioSourceWebpage_as() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property OfficialAudioSourceWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOfficialAudioSourceWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialAudioSourceWebpage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOfficialAudioSourceWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
    /**
     * Adds a value to property OfficialAudioSourceWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOfficialAudioSourceWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialAudioSourceWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOfficialAudioSourceWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
  

    /**
     * Sets a value of property OfficialAudioSourceWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOfficialAudioSourceWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialAudioSourceWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOfficialAudioSourceWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
    /**
     * Sets a value of property OfficialAudioSourceWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOfficialAudioSourceWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialAudioSourceWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOfficialAudioSourceWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
  


    /**
     * Removes a value of property OfficialAudioSourceWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOfficialAudioSourceWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialAudioSourceWebpage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOfficialAudioSourceWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
    /**
     * Removes a value of property OfficialAudioSourceWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOfficialAudioSourceWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialAudioSourceWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOfficialAudioSourceWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE, value);
	}
  
    /**
     * Removes all values of property OfficialAudioSourceWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOfficialAudioSourceWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OFFICIALAUDIOSOURCEWEBPAGE);
	}
	
    /**
     * Removes all values of property OfficialAudioSourceWebpage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOfficialAudioSourceWebpage() {
		Base.removeAll(this.model, this.getResource(), OFFICIALAUDIOSOURCEWEBPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fca73bf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOfficialFileWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OFFICIALFILEWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fca73bf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOfficialFileWebpage() {
		return Base.has(this.model, this.getResource(), OFFICIALFILEWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fca73bf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOfficialFileWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OFFICIALFILEWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fca73bf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOfficialFileWebpage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OFFICIALFILEWEBPAGE);
	}

     /**
     * Get all values of property OfficialFileWebpage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialFileWebpage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OFFICIALFILEWEBPAGE);
	}
	
    /**
     * Get all values of property OfficialFileWebpage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialFileWebpage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALFILEWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OfficialFileWebpage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialFileWebpage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OFFICIALFILEWEBPAGE);
	}

    /**
     * Get all values of property OfficialFileWebpage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialFileWebpage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALFILEWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OfficialFileWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialFileWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OFFICIALFILEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property OfficialFileWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialFileWebpage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALFILEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialFileWebpage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialFileWebpage() {
		return Base.getAll(this.model, this.getResource(), OFFICIALFILEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialFileWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialFileWebpage_as() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALFILEWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property OfficialFileWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOfficialFileWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OFFICIALFILEWEBPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialFileWebpage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOfficialFileWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OFFICIALFILEWEBPAGE, value);
	}
    /**
     * Adds a value to property OfficialFileWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOfficialFileWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OFFICIALFILEWEBPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialFileWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOfficialFileWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OFFICIALFILEWEBPAGE, value);
	}
  

    /**
     * Sets a value of property OfficialFileWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOfficialFileWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OFFICIALFILEWEBPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialFileWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOfficialFileWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OFFICIALFILEWEBPAGE, value);
	}
    /**
     * Sets a value of property OfficialFileWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOfficialFileWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OFFICIALFILEWEBPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialFileWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOfficialFileWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OFFICIALFILEWEBPAGE, value);
	}
  


    /**
     * Removes a value of property OfficialFileWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOfficialFileWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OFFICIALFILEWEBPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialFileWebpage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOfficialFileWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OFFICIALFILEWEBPAGE, value);
	}
    /**
     * Removes a value of property OfficialFileWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOfficialFileWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OFFICIALFILEWEBPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialFileWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOfficialFileWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OFFICIALFILEWEBPAGE, value);
	}
  
    /**
     * Removes all values of property OfficialFileWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOfficialFileWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OFFICIALFILEWEBPAGE);
	}
	
    /**
     * Removes all values of property OfficialFileWebpage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOfficialFileWebpage() {
		Base.removeAll(this.model, this.getResource(), OFFICIALFILEWEBPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d642fd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOfficialInternetRadioStationHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d642fd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOfficialInternetRadioStationHomepage() {
		return Base.has(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d642fd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOfficialInternetRadioStationHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d642fd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOfficialInternetRadioStationHomepage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}

     /**
     * Get all values of property OfficialInternetRadioStationHomepage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialInternetRadioStationHomepage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}
	
    /**
     * Get all values of property OfficialInternetRadioStationHomepage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialInternetRadioStationHomepage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OfficialInternetRadioStationHomepage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialInternetRadioStationHomepage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}

    /**
     * Get all values of property OfficialInternetRadioStationHomepage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialInternetRadioStationHomepage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OfficialInternetRadioStationHomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialInternetRadioStationHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property OfficialInternetRadioStationHomepage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialInternetRadioStationHomepage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialInternetRadioStationHomepage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialInternetRadioStationHomepage() {
		return Base.getAll(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OfficialInternetRadioStationHomepage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOfficialInternetRadioStationHomepage_as() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property OfficialInternetRadioStationHomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOfficialInternetRadioStationHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialInternetRadioStationHomepage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOfficialInternetRadioStationHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
    /**
     * Adds a value to property OfficialInternetRadioStationHomepage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOfficialInternetRadioStationHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property OfficialInternetRadioStationHomepage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOfficialInternetRadioStationHomepage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
  

    /**
     * Sets a value of property OfficialInternetRadioStationHomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOfficialInternetRadioStationHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialInternetRadioStationHomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOfficialInternetRadioStationHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
    /**
     * Sets a value of property OfficialInternetRadioStationHomepage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOfficialInternetRadioStationHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property OfficialInternetRadioStationHomepage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOfficialInternetRadioStationHomepage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
  


    /**
     * Removes a value of property OfficialInternetRadioStationHomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOfficialInternetRadioStationHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialInternetRadioStationHomepage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOfficialInternetRadioStationHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
    /**
     * Removes a value of property OfficialInternetRadioStationHomepage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOfficialInternetRadioStationHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property OfficialInternetRadioStationHomepage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOfficialInternetRadioStationHomepage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE, value);
	}
  
    /**
     * Removes all values of property OfficialInternetRadioStationHomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOfficialInternetRadioStationHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}
	
    /**
     * Removes all values of property OfficialInternetRadioStationHomepage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOfficialInternetRadioStationHomepage() {
		Base.removeAll(this.model, this.getResource(), OFFICIALINTERNETRADIOSTATIONHOMEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef64f64 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOntologies20070510nid3Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef64f64 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOntologies20070510nid3Language() {
		return Base.has(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef64f64 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOntologies20070510nid3Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef64f64 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOntologies20070510nid3Language( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE);
	}

     /**
     * Get all values of property Ontologies20070510nid3Language as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Language_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE);
	}
	
    /**
     * Get all values of property Ontologies20070510nid3Language as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Language_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3Language as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Language_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE);
	}

    /**
     * Get all values of property Ontologies20070510nid3Language as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Language_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ontologies20070510nid3Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllOntologies20070510nid3Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Ontologies20070510nid3Language as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllOntologies20070510nid3Language_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, java.lang.String.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3Language     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllOntologies20070510nid3Language() {
		return Base.getAll(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, java.lang.String.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3Language as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllOntologies20070510nid3Language_as() {
		return Base.getAll_as(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Ontologies20070510nid3Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOntologies20070510nid3Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Ontologies20070510nid3Language as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOntologies20070510nid3Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, value);
	}
    /**
     * Adds a value to property Ontologies20070510nid3Language from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOntologies20070510nid3Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Ontologies20070510nid3Language from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOntologies20070510nid3Language(java.lang.String value) {
		Base.add(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, value);
	}
  

    /**
     * Sets a value of property Ontologies20070510nid3Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOntologies20070510nid3Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Ontologies20070510nid3Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOntologies20070510nid3Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, value);
	}
    /**
     * Sets a value of property Ontologies20070510nid3Language from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOntologies20070510nid3Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Ontologies20070510nid3Language from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOntologies20070510nid3Language(java.lang.String value) {
		Base.set(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, value);
	}
  


    /**
     * Removes a value of property Ontologies20070510nid3Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOntologies20070510nid3Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Ontologies20070510nid3Language as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOntologies20070510nid3Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, value);
	}
    /**
     * Removes a value of property Ontologies20070510nid3Language given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOntologies20070510nid3Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Ontologies20070510nid3Language given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOntologies20070510nid3Language(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE, value);
	}
  
    /**
     * Removes all values of property Ontologies20070510nid3Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOntologies20070510nid3Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONTOLOGIES20070510NID3LANGUAGE);
	}
	
    /**
     * Removes all values of property Ontologies20070510nid3Language	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOntologies20070510nid3Language() {
		Base.removeAll(this.model, this.getResource(), ONTOLOGIES20070510NID3LANGUAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ff4ff23 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOntologies20070510nid3Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ff4ff23 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOntologies20070510nid3Publisher() {
		return Base.has(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ff4ff23 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOntologies20070510nid3Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ff4ff23 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOntologies20070510nid3Publisher( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER);
	}

     /**
     * Get all values of property Ontologies20070510nid3Publisher as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Publisher_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER);
	}
	
    /**
     * Get all values of property Ontologies20070510nid3Publisher as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Publisher_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3Publisher as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Publisher_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER);
	}

    /**
     * Get all values of property Ontologies20070510nid3Publisher as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3Publisher_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ontologies20070510nid3Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllOntologies20070510nid3Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, Contact.class);
	}
	
    /**
     * Get all values of property Ontologies20070510nid3Publisher as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllOntologies20070510nid3Publisher_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, Contact.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3Publisher     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllOntologies20070510nid3Publisher() {
		return Base.getAll(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, Contact.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3Publisher as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllOntologies20070510nid3Publisher_as() {
		return Base.getAll_as(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, Contact.class);
	}
 
    /**
     * Adds a value to property Ontologies20070510nid3Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOntologies20070510nid3Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Ontologies20070510nid3Publisher as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOntologies20070510nid3Publisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, value);
	}
    /**
     * Adds a value to property Ontologies20070510nid3Publisher from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOntologies20070510nid3Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Ontologies20070510nid3Publisher from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOntologies20070510nid3Publisher(Contact value) {
		Base.add(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, value);
	}
  

    /**
     * Sets a value of property Ontologies20070510nid3Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOntologies20070510nid3Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Ontologies20070510nid3Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOntologies20070510nid3Publisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, value);
	}
    /**
     * Sets a value of property Ontologies20070510nid3Publisher from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOntologies20070510nid3Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Ontologies20070510nid3Publisher from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOntologies20070510nid3Publisher(Contact value) {
		Base.set(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, value);
	}
  


    /**
     * Removes a value of property Ontologies20070510nid3Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOntologies20070510nid3Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Ontologies20070510nid3Publisher as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOntologies20070510nid3Publisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, value);
	}
    /**
     * Removes a value of property Ontologies20070510nid3Publisher given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOntologies20070510nid3Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Ontologies20070510nid3Publisher given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOntologies20070510nid3Publisher(Contact value) {
		Base.remove(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER, value);
	}
  
    /**
     * Removes all values of property Ontologies20070510nid3Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOntologies20070510nid3Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONTOLOGIES20070510NID3PUBLISHER);
	}
	
    /**
     * Removes all values of property Ontologies20070510nid3Publisher	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOntologies20070510nid3Publisher() {
		Base.removeAll(this.model, this.getResource(), ONTOLOGIES20070510NID3PUBLISHER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e71d5e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOriginalAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORIGINALALBUMTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e71d5e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOriginalAlbumTitle() {
		return Base.has(this.model, this.getResource(), ORIGINALALBUMTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e71d5e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOriginalAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORIGINALALBUMTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e71d5e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOriginalAlbumTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORIGINALALBUMTITLE);
	}

     /**
     * Get all values of property OriginalAlbumTitle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalAlbumTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORIGINALALBUMTITLE);
	}
	
    /**
     * Get all values of property OriginalAlbumTitle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalAlbumTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALALBUMTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OriginalAlbumTitle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalAlbumTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORIGINALALBUMTITLE);
	}

    /**
     * Get all values of property OriginalAlbumTitle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalAlbumTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALALBUMTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OriginalAlbumTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllOriginalAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORIGINALALBUMTITLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property OriginalAlbumTitle as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllOriginalAlbumTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALALBUMTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property OriginalAlbumTitle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllOriginalAlbumTitle() {
		return Base.getAll(this.model, this.getResource(), ORIGINALALBUMTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property OriginalAlbumTitle as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllOriginalAlbumTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALALBUMTITLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property OriginalAlbumTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOriginalAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORIGINALALBUMTITLE, value);
	}
	
    /**
     * Adds a value to property OriginalAlbumTitle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOriginalAlbumTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORIGINALALBUMTITLE, value);
	}
    /**
     * Adds a value to property OriginalAlbumTitle from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOriginalAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ORIGINALALBUMTITLE, value);
	}
	
    /**
     * Adds a value to property OriginalAlbumTitle from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOriginalAlbumTitle(java.lang.String value) {
		Base.add(this.model, this.getResource(), ORIGINALALBUMTITLE, value);
	}
  

    /**
     * Sets a value of property OriginalAlbumTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOriginalAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORIGINALALBUMTITLE, value);
	}
	
    /**
     * Sets a value of property OriginalAlbumTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOriginalAlbumTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORIGINALALBUMTITLE, value);
	}
    /**
     * Sets a value of property OriginalAlbumTitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOriginalAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ORIGINALALBUMTITLE, value);
	}
	
    /**
     * Sets a value of property OriginalAlbumTitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOriginalAlbumTitle(java.lang.String value) {
		Base.set(this.model, this.getResource(), ORIGINALALBUMTITLE, value);
	}
  


    /**
     * Removes a value of property OriginalAlbumTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOriginalAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORIGINALALBUMTITLE, value);
	}
	
    /**
     * Removes a value of property OriginalAlbumTitle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOriginalAlbumTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORIGINALALBUMTITLE, value);
	}
    /**
     * Removes a value of property OriginalAlbumTitle given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOriginalAlbumTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ORIGINALALBUMTITLE, value);
	}
	
    /**
     * Removes a value of property OriginalAlbumTitle given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOriginalAlbumTitle(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ORIGINALALBUMTITLE, value);
	}
  
    /**
     * Removes all values of property OriginalAlbumTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOriginalAlbumTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORIGINALALBUMTITLE);
	}
	
    /**
     * Removes all values of property OriginalAlbumTitle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOriginalAlbumTitle() {
		Base.removeAll(this.model, this.getResource(), ORIGINALALBUMTITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454322ba has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOriginalArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORIGINALARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454322ba has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOriginalArtist() {
		return Base.has(this.model, this.getResource(), ORIGINALARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454322ba has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOriginalArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORIGINALARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@454322ba has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOriginalArtist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORIGINALARTIST);
	}

     /**
     * Get all values of property OriginalArtist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalArtist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORIGINALARTIST);
	}
	
    /**
     * Get all values of property OriginalArtist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalArtist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OriginalArtist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalArtist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORIGINALARTIST);
	}

    /**
     * Get all values of property OriginalArtist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalArtist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OriginalArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllOriginalArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORIGINALARTIST, Contact.class);
	}
	
    /**
     * Get all values of property OriginalArtist as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllOriginalArtist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALARTIST, Contact.class);
	}

    /**
     * Get all values of property OriginalArtist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllOriginalArtist() {
		return Base.getAll(this.model, this.getResource(), ORIGINALARTIST, Contact.class);
	}

    /**
     * Get all values of property OriginalArtist as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllOriginalArtist_as() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALARTIST, Contact.class);
	}
 
    /**
     * Adds a value to property OriginalArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOriginalArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORIGINALARTIST, value);
	}
	
    /**
     * Adds a value to property OriginalArtist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOriginalArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORIGINALARTIST, value);
	}
    /**
     * Adds a value to property OriginalArtist from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOriginalArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, ORIGINALARTIST, value);
	}
	
    /**
     * Adds a value to property OriginalArtist from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOriginalArtist(Contact value) {
		Base.add(this.model, this.getResource(), ORIGINALARTIST, value);
	}
  

    /**
     * Sets a value of property OriginalArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOriginalArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORIGINALARTIST, value);
	}
	
    /**
     * Sets a value of property OriginalArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOriginalArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORIGINALARTIST, value);
	}
    /**
     * Sets a value of property OriginalArtist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOriginalArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, ORIGINALARTIST, value);
	}
	
    /**
     * Sets a value of property OriginalArtist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOriginalArtist(Contact value) {
		Base.set(this.model, this.getResource(), ORIGINALARTIST, value);
	}
  


    /**
     * Removes a value of property OriginalArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOriginalArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORIGINALARTIST, value);
	}
	
    /**
     * Removes a value of property OriginalArtist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOriginalArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORIGINALARTIST, value);
	}
    /**
     * Removes a value of property OriginalArtist given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOriginalArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, ORIGINALARTIST, value);
	}
	
    /**
     * Removes a value of property OriginalArtist given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOriginalArtist(Contact value) {
		Base.remove(this.model, this.getResource(), ORIGINALARTIST, value);
	}
  
    /**
     * Removes all values of property OriginalArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOriginalArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORIGINALARTIST);
	}
	
    /**
     * Removes all values of property OriginalArtist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOriginalArtist() {
		Base.removeAll(this.model, this.getResource(), ORIGINALARTIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26cbb7db has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOriginalFilename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORIGINALFILENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26cbb7db has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOriginalFilename() {
		return Base.has(this.model, this.getResource(), ORIGINALFILENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26cbb7db has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOriginalFilename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORIGINALFILENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26cbb7db has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOriginalFilename( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORIGINALFILENAME);
	}

     /**
     * Get all values of property OriginalFilename as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalFilename_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORIGINALFILENAME);
	}
	
    /**
     * Get all values of property OriginalFilename as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalFilename_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALFILENAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OriginalFilename as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalFilename_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORIGINALFILENAME);
	}

    /**
     * Get all values of property OriginalFilename as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalFilename_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALFILENAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OriginalFilename     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllOriginalFilename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORIGINALFILENAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property OriginalFilename as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllOriginalFilename_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALFILENAME, java.lang.String.class);
	}

    /**
     * Get all values of property OriginalFilename     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllOriginalFilename() {
		return Base.getAll(this.model, this.getResource(), ORIGINALFILENAME, java.lang.String.class);
	}

    /**
     * Get all values of property OriginalFilename as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllOriginalFilename_as() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALFILENAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property OriginalFilename as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOriginalFilename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORIGINALFILENAME, value);
	}
	
    /**
     * Adds a value to property OriginalFilename as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOriginalFilename( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORIGINALFILENAME, value);
	}
    /**
     * Adds a value to property OriginalFilename from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOriginalFilename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ORIGINALFILENAME, value);
	}
	
    /**
     * Adds a value to property OriginalFilename from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOriginalFilename(java.lang.String value) {
		Base.add(this.model, this.getResource(), ORIGINALFILENAME, value);
	}
  

    /**
     * Sets a value of property OriginalFilename from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOriginalFilename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORIGINALFILENAME, value);
	}
	
    /**
     * Sets a value of property OriginalFilename from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOriginalFilename( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORIGINALFILENAME, value);
	}
    /**
     * Sets a value of property OriginalFilename from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOriginalFilename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ORIGINALFILENAME, value);
	}
	
    /**
     * Sets a value of property OriginalFilename from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOriginalFilename(java.lang.String value) {
		Base.set(this.model, this.getResource(), ORIGINALFILENAME, value);
	}
  


    /**
     * Removes a value of property OriginalFilename as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOriginalFilename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORIGINALFILENAME, value);
	}
	
    /**
     * Removes a value of property OriginalFilename as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOriginalFilename( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORIGINALFILENAME, value);
	}
    /**
     * Removes a value of property OriginalFilename given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOriginalFilename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ORIGINALFILENAME, value);
	}
	
    /**
     * Removes a value of property OriginalFilename given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOriginalFilename(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ORIGINALFILENAME, value);
	}
  
    /**
     * Removes all values of property OriginalFilename     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOriginalFilename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORIGINALFILENAME);
	}
	
    /**
     * Removes all values of property OriginalFilename	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOriginalFilename() {
		Base.removeAll(this.model, this.getResource(), ORIGINALFILENAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40591a4d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOriginalReleaseYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORIGINALRELEASEYEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40591a4d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOriginalReleaseYear() {
		return Base.has(this.model, this.getResource(), ORIGINALRELEASEYEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40591a4d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOriginalReleaseYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORIGINALRELEASEYEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40591a4d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOriginalReleaseYear( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORIGINALRELEASEYEAR);
	}

     /**
     * Get all values of property OriginalReleaseYear as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalReleaseYear_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORIGINALRELEASEYEAR);
	}
	
    /**
     * Get all values of property OriginalReleaseYear as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalReleaseYear_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALRELEASEYEAR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OriginalReleaseYear as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalReleaseYear_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORIGINALRELEASEYEAR);
	}

    /**
     * Get all values of property OriginalReleaseYear as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalReleaseYear_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALRELEASEYEAR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OriginalReleaseYear     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllOriginalReleaseYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORIGINALRELEASEYEAR, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property OriginalReleaseYear as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllOriginalReleaseYear_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALRELEASEYEAR, java.lang.Integer.class);
	}

    /**
     * Get all values of property OriginalReleaseYear     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllOriginalReleaseYear() {
		return Base.getAll(this.model, this.getResource(), ORIGINALRELEASEYEAR, java.lang.Integer.class);
	}

    /**
     * Get all values of property OriginalReleaseYear as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllOriginalReleaseYear_as() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALRELEASEYEAR, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property OriginalReleaseYear as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOriginalReleaseYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORIGINALRELEASEYEAR, value);
	}
	
    /**
     * Adds a value to property OriginalReleaseYear as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOriginalReleaseYear( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORIGINALRELEASEYEAR, value);
	}
    /**
     * Adds a value to property OriginalReleaseYear from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOriginalReleaseYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, ORIGINALRELEASEYEAR, value);
	}
	
    /**
     * Adds a value to property OriginalReleaseYear from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOriginalReleaseYear(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), ORIGINALRELEASEYEAR, value);
	}
  

    /**
     * Sets a value of property OriginalReleaseYear from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOriginalReleaseYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORIGINALRELEASEYEAR, value);
	}
	
    /**
     * Sets a value of property OriginalReleaseYear from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOriginalReleaseYear( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORIGINALRELEASEYEAR, value);
	}
    /**
     * Sets a value of property OriginalReleaseYear from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOriginalReleaseYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, ORIGINALRELEASEYEAR, value);
	}
	
    /**
     * Sets a value of property OriginalReleaseYear from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOriginalReleaseYear(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), ORIGINALRELEASEYEAR, value);
	}
  


    /**
     * Removes a value of property OriginalReleaseYear as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOriginalReleaseYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORIGINALRELEASEYEAR, value);
	}
	
    /**
     * Removes a value of property OriginalReleaseYear as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOriginalReleaseYear( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORIGINALRELEASEYEAR, value);
	}
    /**
     * Removes a value of property OriginalReleaseYear given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOriginalReleaseYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, ORIGINALRELEASEYEAR, value);
	}
	
    /**
     * Removes a value of property OriginalReleaseYear given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOriginalReleaseYear(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), ORIGINALRELEASEYEAR, value);
	}
  
    /**
     * Removes all values of property OriginalReleaseYear     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOriginalReleaseYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORIGINALRELEASEYEAR);
	}
	
    /**
     * Removes all values of property OriginalReleaseYear	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOriginalReleaseYear() {
		Base.removeAll(this.model, this.getResource(), ORIGINALRELEASEYEAR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c08bae7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOriginalTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORIGINALTEXTWRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c08bae7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOriginalTextWriter() {
		return Base.has(this.model, this.getResource(), ORIGINALTEXTWRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c08bae7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOriginalTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORIGINALTEXTWRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c08bae7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOriginalTextWriter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORIGINALTEXTWRITER);
	}

     /**
     * Get all values of property OriginalTextWriter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalTextWriter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORIGINALTEXTWRITER);
	}
	
    /**
     * Get all values of property OriginalTextWriter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalTextWriter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALTEXTWRITER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OriginalTextWriter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOriginalTextWriter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORIGINALTEXTWRITER);
	}

    /**
     * Get all values of property OriginalTextWriter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOriginalTextWriter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALTEXTWRITER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OriginalTextWriter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllOriginalTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORIGINALTEXTWRITER, Contact.class);
	}
	
    /**
     * Get all values of property OriginalTextWriter as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllOriginalTextWriter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIGINALTEXTWRITER, Contact.class);
	}

    /**
     * Get all values of property OriginalTextWriter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllOriginalTextWriter() {
		return Base.getAll(this.model, this.getResource(), ORIGINALTEXTWRITER, Contact.class);
	}

    /**
     * Get all values of property OriginalTextWriter as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllOriginalTextWriter_as() {
		return Base.getAll_as(this.model, this.getResource(), ORIGINALTEXTWRITER, Contact.class);
	}
 
    /**
     * Adds a value to property OriginalTextWriter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOriginalTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORIGINALTEXTWRITER, value);
	}
	
    /**
     * Adds a value to property OriginalTextWriter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOriginalTextWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORIGINALTEXTWRITER, value);
	}
    /**
     * Adds a value to property OriginalTextWriter from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOriginalTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, ORIGINALTEXTWRITER, value);
	}
	
    /**
     * Adds a value to property OriginalTextWriter from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOriginalTextWriter(Contact value) {
		Base.add(this.model, this.getResource(), ORIGINALTEXTWRITER, value);
	}
  

    /**
     * Sets a value of property OriginalTextWriter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOriginalTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORIGINALTEXTWRITER, value);
	}
	
    /**
     * Sets a value of property OriginalTextWriter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOriginalTextWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORIGINALTEXTWRITER, value);
	}
    /**
     * Sets a value of property OriginalTextWriter from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOriginalTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, ORIGINALTEXTWRITER, value);
	}
	
    /**
     * Sets a value of property OriginalTextWriter from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOriginalTextWriter(Contact value) {
		Base.set(this.model, this.getResource(), ORIGINALTEXTWRITER, value);
	}
  


    /**
     * Removes a value of property OriginalTextWriter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOriginalTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORIGINALTEXTWRITER, value);
	}
	
    /**
     * Removes a value of property OriginalTextWriter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOriginalTextWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORIGINALTEXTWRITER, value);
	}
    /**
     * Removes a value of property OriginalTextWriter given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOriginalTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, ORIGINALTEXTWRITER, value);
	}
	
    /**
     * Removes a value of property OriginalTextWriter given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOriginalTextWriter(Contact value) {
		Base.remove(this.model, this.getResource(), ORIGINALTEXTWRITER, value);
	}
  
    /**
     * Removes all values of property OriginalTextWriter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOriginalTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORIGINALTEXTWRITER);
	}
	
    /**
     * Removes all values of property OriginalTextWriter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOriginalTextWriter() {
		Base.removeAll(this.model, this.getResource(), ORIGINALTEXTWRITER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c954549 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPartOfSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PARTOFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c954549 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPartOfSet() {
		return Base.has(this.model, this.getResource(), PARTOFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c954549 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPartOfSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PARTOFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c954549 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPartOfSet( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PARTOFSET);
	}

     /**
     * Get all values of property PartOfSet as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPartOfSet_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PARTOFSET);
	}
	
    /**
     * Get all values of property PartOfSet as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPartOfSet_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PARTOFSET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PartOfSet as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPartOfSet_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PARTOFSET);
	}

    /**
     * Get all values of property PartOfSet as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPartOfSet_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PARTOFSET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PartOfSet     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPartOfSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PARTOFSET, java.lang.String.class);
	}
	
    /**
     * Get all values of property PartOfSet as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPartOfSet_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PARTOFSET, java.lang.String.class);
	}

    /**
     * Get all values of property PartOfSet     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPartOfSet() {
		return Base.getAll(this.model, this.getResource(), PARTOFSET, java.lang.String.class);
	}

    /**
     * Get all values of property PartOfSet as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPartOfSet_as() {
		return Base.getAll_as(this.model, this.getResource(), PARTOFSET, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PartOfSet as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPartOfSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PARTOFSET, value);
	}
	
    /**
     * Adds a value to property PartOfSet as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPartOfSet( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PARTOFSET, value);
	}
    /**
     * Adds a value to property PartOfSet from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPartOfSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PARTOFSET, value);
	}
	
    /**
     * Adds a value to property PartOfSet from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPartOfSet(java.lang.String value) {
		Base.add(this.model, this.getResource(), PARTOFSET, value);
	}
  

    /**
     * Sets a value of property PartOfSet from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPartOfSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PARTOFSET, value);
	}
	
    /**
     * Sets a value of property PartOfSet from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPartOfSet( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PARTOFSET, value);
	}
    /**
     * Sets a value of property PartOfSet from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPartOfSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PARTOFSET, value);
	}
	
    /**
     * Sets a value of property PartOfSet from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPartOfSet(java.lang.String value) {
		Base.set(this.model, this.getResource(), PARTOFSET, value);
	}
  


    /**
     * Removes a value of property PartOfSet as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePartOfSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PARTOFSET, value);
	}
	
    /**
     * Removes a value of property PartOfSet as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePartOfSet( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PARTOFSET, value);
	}
    /**
     * Removes a value of property PartOfSet given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePartOfSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PARTOFSET, value);
	}
	
    /**
     * Removes a value of property PartOfSet given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePartOfSet(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PARTOFSET, value);
	}
  
    /**
     * Removes all values of property PartOfSet     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPartOfSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PARTOFSET);
	}
	
    /**
     * Removes all values of property PartOfSet	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPartOfSet() {
		Base.removeAll(this.model, this.getResource(), PARTOFSET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8191a42 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPaymentURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAYMENTURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8191a42 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPaymentURL() {
		return Base.has(this.model, this.getResource(), PAYMENTURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8191a42 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPaymentURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAYMENTURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8191a42 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPaymentURL( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAYMENTURL);
	}

     /**
     * Get all values of property PaymentURL as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPaymentURL_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAYMENTURL);
	}
	
    /**
     * Get all values of property PaymentURL as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPaymentURL_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAYMENTURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PaymentURL as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPaymentURL_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAYMENTURL);
	}

    /**
     * Get all values of property PaymentURL as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPaymentURL_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAYMENTURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PaymentURL     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPaymentURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAYMENTURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property PaymentURL as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPaymentURL_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAYMENTURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property PaymentURL     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPaymentURL() {
		return Base.getAll(this.model, this.getResource(), PAYMENTURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property PaymentURL as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPaymentURL_as() {
		return Base.getAll_as(this.model, this.getResource(), PAYMENTURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property PaymentURL as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPaymentURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAYMENTURL, value);
	}
	
    /**
     * Adds a value to property PaymentURL as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPaymentURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAYMENTURL, value);
	}
    /**
     * Adds a value to property PaymentURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPaymentURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, PAYMENTURL, value);
	}
	
    /**
     * Adds a value to property PaymentURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPaymentURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), PAYMENTURL, value);
	}
  

    /**
     * Sets a value of property PaymentURL from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPaymentURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAYMENTURL, value);
	}
	
    /**
     * Sets a value of property PaymentURL from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPaymentURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAYMENTURL, value);
	}
    /**
     * Sets a value of property PaymentURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPaymentURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, PAYMENTURL, value);
	}
	
    /**
     * Sets a value of property PaymentURL from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPaymentURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), PAYMENTURL, value);
	}
  


    /**
     * Removes a value of property PaymentURL as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePaymentURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAYMENTURL, value);
	}
	
    /**
     * Removes a value of property PaymentURL as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePaymentURL( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAYMENTURL, value);
	}
    /**
     * Removes a value of property PaymentURL given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePaymentURL(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, PAYMENTURL, value);
	}
	
    /**
     * Removes a value of property PaymentURL given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePaymentURL(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), PAYMENTURL, value);
	}
  
    /**
     * Removes all values of property PaymentURL     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPaymentURL( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAYMENTURL);
	}
	
    /**
     * Removes all values of property PaymentURL	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPaymentURL() {
		Base.removeAll(this.model, this.getResource(), PAYMENTURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77c118ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPlaylistDelay(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLAYLISTDELAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77c118ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPlaylistDelay() {
		return Base.has(this.model, this.getResource(), PLAYLISTDELAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77c118ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPlaylistDelay(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLAYLISTDELAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77c118ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPlaylistDelay( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLAYLISTDELAY);
	}

     /**
     * Get all values of property PlaylistDelay as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlaylistDelay_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PLAYLISTDELAY);
	}
	
    /**
     * Get all values of property PlaylistDelay as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlaylistDelay_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAYLISTDELAY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PlaylistDelay as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlaylistDelay_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PLAYLISTDELAY);
	}

    /**
     * Get all values of property PlaylistDelay as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlaylistDelay_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PLAYLISTDELAY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PlaylistDelay     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllPlaylistDelay(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PLAYLISTDELAY, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property PlaylistDelay as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllPlaylistDelay_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAYLISTDELAY, java.lang.Integer.class);
	}

    /**
     * Get all values of property PlaylistDelay     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllPlaylistDelay() {
		return Base.getAll(this.model, this.getResource(), PLAYLISTDELAY, java.lang.Integer.class);
	}

    /**
     * Get all values of property PlaylistDelay as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllPlaylistDelay_as() {
		return Base.getAll_as(this.model, this.getResource(), PLAYLISTDELAY, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property PlaylistDelay as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPlaylistDelay( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PLAYLISTDELAY, value);
	}
	
    /**
     * Adds a value to property PlaylistDelay as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPlaylistDelay( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PLAYLISTDELAY, value);
	}
    /**
     * Adds a value to property PlaylistDelay from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPlaylistDelay(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, PLAYLISTDELAY, value);
	}
	
    /**
     * Adds a value to property PlaylistDelay from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPlaylistDelay(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), PLAYLISTDELAY, value);
	}
  

    /**
     * Sets a value of property PlaylistDelay from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPlaylistDelay( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLAYLISTDELAY, value);
	}
	
    /**
     * Sets a value of property PlaylistDelay from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPlaylistDelay( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLAYLISTDELAY, value);
	}
    /**
     * Sets a value of property PlaylistDelay from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPlaylistDelay(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, PLAYLISTDELAY, value);
	}
	
    /**
     * Sets a value of property PlaylistDelay from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPlaylistDelay(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), PLAYLISTDELAY, value);
	}
  


    /**
     * Removes a value of property PlaylistDelay as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePlaylistDelay( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLAYLISTDELAY, value);
	}
	
    /**
     * Removes a value of property PlaylistDelay as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePlaylistDelay( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLAYLISTDELAY, value);
	}
    /**
     * Removes a value of property PlaylistDelay given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePlaylistDelay(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, PLAYLISTDELAY, value);
	}
	
    /**
     * Removes a value of property PlaylistDelay given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePlaylistDelay(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), PLAYLISTDELAY, value);
	}
  
    /**
     * Removes all values of property PlaylistDelay     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPlaylistDelay( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLAYLISTDELAY);
	}
	
    /**
     * Removes all values of property PlaylistDelay	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPlaylistDelay() {
		Base.removeAll(this.model, this.getResource(), PLAYLISTDELAY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bb9808e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPublishersWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBLISHERSWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bb9808e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPublishersWebpage() {
		return Base.has(this.model, this.getResource(), PUBLISHERSWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bb9808e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPublishersWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBLISHERSWEBPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bb9808e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPublishersWebpage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBLISHERSWEBPAGE);
	}

     /**
     * Get all values of property PublishersWebpage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublishersWebpage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBLISHERSWEBPAGE);
	}
	
    /**
     * Get all values of property PublishersWebpage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPublishersWebpage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHERSWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PublishersWebpage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublishersWebpage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBLISHERSWEBPAGE);
	}

    /**
     * Get all values of property PublishersWebpage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPublishersWebpage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHERSWEBPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PublishersWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPublishersWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBLISHERSWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property PublishersWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPublishersWebpage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHERSWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property PublishersWebpage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPublishersWebpage() {
		return Base.getAll(this.model, this.getResource(), PUBLISHERSWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property PublishersWebpage as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPublishersWebpage_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHERSWEBPAGE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property PublishersWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPublishersWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBLISHERSWEBPAGE, value);
	}
	
    /**
     * Adds a value to property PublishersWebpage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPublishersWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBLISHERSWEBPAGE, value);
	}
    /**
     * Adds a value to property PublishersWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPublishersWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, PUBLISHERSWEBPAGE, value);
	}
	
    /**
     * Adds a value to property PublishersWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPublishersWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), PUBLISHERSWEBPAGE, value);
	}
  

    /**
     * Sets a value of property PublishersWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPublishersWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBLISHERSWEBPAGE, value);
	}
	
    /**
     * Sets a value of property PublishersWebpage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPublishersWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBLISHERSWEBPAGE, value);
	}
    /**
     * Sets a value of property PublishersWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPublishersWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, PUBLISHERSWEBPAGE, value);
	}
	
    /**
     * Sets a value of property PublishersWebpage from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPublishersWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), PUBLISHERSWEBPAGE, value);
	}
  


    /**
     * Removes a value of property PublishersWebpage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePublishersWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBLISHERSWEBPAGE, value);
	}
	
    /**
     * Removes a value of property PublishersWebpage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePublishersWebpage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBLISHERSWEBPAGE, value);
	}
    /**
     * Removes a value of property PublishersWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePublishersWebpage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, PUBLISHERSWEBPAGE, value);
	}
	
    /**
     * Removes a value of property PublishersWebpage given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePublishersWebpage(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), PUBLISHERSWEBPAGE, value);
	}
  
    /**
     * Removes all values of property PublishersWebpage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPublishersWebpage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBLISHERSWEBPAGE);
	}
	
    /**
     * Removes all values of property PublishersWebpage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPublishersWebpage() {
		Base.removeAll(this.model, this.getResource(), PUBLISHERSWEBPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59a5d193 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRecordingDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECORDINGDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59a5d193 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRecordingDate() {
		return Base.has(this.model, this.getResource(), RECORDINGDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59a5d193 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRecordingDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECORDINGDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59a5d193 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRecordingDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECORDINGDATE);
	}

     /**
     * Get all values of property RecordingDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordingDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RECORDINGDATE);
	}
	
    /**
     * Get all values of property RecordingDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordingDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDINGDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RecordingDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordingDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RECORDINGDATE);
	}

    /**
     * Get all values of property RecordingDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordingDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RECORDINGDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RecordingDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRecordingDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RECORDINGDATE, java.lang.String.class);
	}
	
    /**
     * Get all values of property RecordingDate as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRecordingDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDINGDATE, java.lang.String.class);
	}

    /**
     * Get all values of property RecordingDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRecordingDate() {
		return Base.getAll(this.model, this.getResource(), RECORDINGDATE, java.lang.String.class);
	}

    /**
     * Get all values of property RecordingDate as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRecordingDate_as() {
		return Base.getAll_as(this.model, this.getResource(), RECORDINGDATE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RecordingDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRecordingDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RECORDINGDATE, value);
	}
	
    /**
     * Adds a value to property RecordingDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRecordingDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RECORDINGDATE, value);
	}
    /**
     * Adds a value to property RecordingDate from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRecordingDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RECORDINGDATE, value);
	}
	
    /**
     * Adds a value to property RecordingDate from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRecordingDate(java.lang.String value) {
		Base.add(this.model, this.getResource(), RECORDINGDATE, value);
	}
  

    /**
     * Sets a value of property RecordingDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRecordingDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECORDINGDATE, value);
	}
	
    /**
     * Sets a value of property RecordingDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRecordingDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECORDINGDATE, value);
	}
    /**
     * Sets a value of property RecordingDate from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRecordingDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RECORDINGDATE, value);
	}
	
    /**
     * Sets a value of property RecordingDate from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRecordingDate(java.lang.String value) {
		Base.set(this.model, this.getResource(), RECORDINGDATE, value);
	}
  


    /**
     * Removes a value of property RecordingDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRecordingDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECORDINGDATE, value);
	}
	
    /**
     * Removes a value of property RecordingDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRecordingDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECORDINGDATE, value);
	}
    /**
     * Removes a value of property RecordingDate given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRecordingDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RECORDINGDATE, value);
	}
	
    /**
     * Removes a value of property RecordingDate given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRecordingDate(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RECORDINGDATE, value);
	}
  
    /**
     * Removes all values of property RecordingDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRecordingDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECORDINGDATE);
	}
	
    /**
     * Removes all values of property RecordingDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRecordingDate() {
		Base.removeAll(this.model, this.getResource(), RECORDINGDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5746b158 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRecordingYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECORDINGYEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5746b158 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRecordingYear() {
		return Base.has(this.model, this.getResource(), RECORDINGYEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5746b158 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRecordingYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECORDINGYEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5746b158 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRecordingYear( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECORDINGYEAR);
	}

     /**
     * Get all values of property RecordingYear as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordingYear_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RECORDINGYEAR);
	}
	
    /**
     * Get all values of property RecordingYear as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordingYear_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDINGYEAR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RecordingYear as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordingYear_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RECORDINGYEAR);
	}

    /**
     * Get all values of property RecordingYear as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordingYear_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RECORDINGYEAR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RecordingYear     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllRecordingYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RECORDINGYEAR, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property RecordingYear as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllRecordingYear_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDINGYEAR, java.lang.Integer.class);
	}

    /**
     * Get all values of property RecordingYear     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllRecordingYear() {
		return Base.getAll(this.model, this.getResource(), RECORDINGYEAR, java.lang.Integer.class);
	}

    /**
     * Get all values of property RecordingYear as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllRecordingYear_as() {
		return Base.getAll_as(this.model, this.getResource(), RECORDINGYEAR, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property RecordingYear as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRecordingYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RECORDINGYEAR, value);
	}
	
    /**
     * Adds a value to property RecordingYear as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRecordingYear( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RECORDINGYEAR, value);
	}
    /**
     * Adds a value to property RecordingYear from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRecordingYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, RECORDINGYEAR, value);
	}
	
    /**
     * Adds a value to property RecordingYear from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRecordingYear(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), RECORDINGYEAR, value);
	}
  

    /**
     * Sets a value of property RecordingYear from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRecordingYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECORDINGYEAR, value);
	}
	
    /**
     * Sets a value of property RecordingYear from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRecordingYear( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECORDINGYEAR, value);
	}
    /**
     * Sets a value of property RecordingYear from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRecordingYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, RECORDINGYEAR, value);
	}
	
    /**
     * Sets a value of property RecordingYear from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRecordingYear(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), RECORDINGYEAR, value);
	}
  


    /**
     * Removes a value of property RecordingYear as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRecordingYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECORDINGYEAR, value);
	}
	
    /**
     * Removes a value of property RecordingYear as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRecordingYear( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECORDINGYEAR, value);
	}
    /**
     * Removes a value of property RecordingYear given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRecordingYear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, RECORDINGYEAR, value);
	}
	
    /**
     * Removes a value of property RecordingYear given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRecordingYear(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), RECORDINGYEAR, value);
	}
  
    /**
     * Removes all values of property RecordingYear     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRecordingYear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECORDINGYEAR);
	}
	
    /**
     * Removes all values of property RecordingYear	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRecordingYear() {
		Base.removeAll(this.model, this.getResource(), RECORDINGYEAR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6487b71b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubtitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6487b71b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubtitle() {
		return Base.has(this.model, this.getResource(), SUBTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6487b71b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubtitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBTITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6487b71b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubtitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBTITLE);
	}

     /**
     * Get all values of property Subtitle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubtitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBTITLE);
	}
	
    /**
     * Get all values of property Subtitle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubtitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subtitle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubtitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBTITLE);
	}

    /**
     * Get all values of property Subtitle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubtitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBTITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subtitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubtitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBTITLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Subtitle as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubtitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property Subtitle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubtitle() {
		return Base.getAll(this.model, this.getResource(), SUBTITLE, java.lang.String.class);
	}

    /**
     * Get all values of property Subtitle as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubtitle_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBTITLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Subtitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubtitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBTITLE, value);
	}
	
    /**
     * Adds a value to property Subtitle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubtitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBTITLE, value);
	}
    /**
     * Adds a value to property Subtitle from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubtitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBTITLE, value);
	}
	
    /**
     * Adds a value to property Subtitle from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubtitle(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBTITLE, value);
	}
  

    /**
     * Sets a value of property Subtitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubtitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBTITLE, value);
	}
	
    /**
     * Sets a value of property Subtitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubtitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBTITLE, value);
	}
    /**
     * Sets a value of property Subtitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubtitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBTITLE, value);
	}
	
    /**
     * Sets a value of property Subtitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubtitle(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBTITLE, value);
	}
  


    /**
     * Removes a value of property Subtitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubtitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBTITLE, value);
	}
	
    /**
     * Removes a value of property Subtitle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubtitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBTITLE, value);
	}
    /**
     * Removes a value of property Subtitle given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubtitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBTITLE, value);
	}
	
    /**
     * Removes a value of property Subtitle given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubtitle(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBTITLE, value);
	}
  
    /**
     * Removes all values of property Subtitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubtitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBTITLE);
	}
	
    /**
     * Removes all values of property Subtitle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubtitle() {
		Base.removeAll(this.model, this.getResource(), SUBTITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7be775bc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TEXTWRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7be775bc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTextWriter() {
		return Base.has(this.model, this.getResource(), TEXTWRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7be775bc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TEXTWRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7be775bc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTextWriter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TEXTWRITER);
	}

     /**
     * Get all values of property TextWriter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTextWriter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TEXTWRITER);
	}
	
    /**
     * Get all values of property TextWriter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTextWriter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXTWRITER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TextWriter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTextWriter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TEXTWRITER);
	}

    /**
     * Get all values of property TextWriter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTextWriter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TEXTWRITER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TextWriter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TEXTWRITER, Contact.class);
	}
	
    /**
     * Get all values of property TextWriter as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllTextWriter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXTWRITER, Contact.class);
	}

    /**
     * Get all values of property TextWriter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllTextWriter() {
		return Base.getAll(this.model, this.getResource(), TEXTWRITER, Contact.class);
	}

    /**
     * Get all values of property TextWriter as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllTextWriter_as() {
		return Base.getAll_as(this.model, this.getResource(), TEXTWRITER, Contact.class);
	}
 
    /**
     * Adds a value to property TextWriter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TEXTWRITER, value);
	}
	
    /**
     * Adds a value to property TextWriter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTextWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TEXTWRITER, value);
	}
    /**
     * Adds a value to property TextWriter from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, TEXTWRITER, value);
	}
	
    /**
     * Adds a value to property TextWriter from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTextWriter(Contact value) {
		Base.add(this.model, this.getResource(), TEXTWRITER, value);
	}
  

    /**
     * Sets a value of property TextWriter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TEXTWRITER, value);
	}
	
    /**
     * Sets a value of property TextWriter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTextWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TEXTWRITER, value);
	}
    /**
     * Sets a value of property TextWriter from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, TEXTWRITER, value);
	}
	
    /**
     * Sets a value of property TextWriter from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTextWriter(Contact value) {
		Base.set(this.model, this.getResource(), TEXTWRITER, value);
	}
  


    /**
     * Removes a value of property TextWriter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TEXTWRITER, value);
	}
	
    /**
     * Removes a value of property TextWriter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTextWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TEXTWRITER, value);
	}
    /**
     * Removes a value of property TextWriter given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTextWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, TEXTWRITER, value);
	}
	
    /**
     * Removes a value of property TextWriter given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTextWriter(Contact value) {
		Base.remove(this.model, this.getResource(), TEXTWRITER, value);
	}
  
    /**
     * Removes all values of property TextWriter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTextWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TEXTWRITER);
	}
	
    /**
     * Removes all values of property TextWriter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTextWriter() {
		Base.removeAll(this.model, this.getResource(), TEXTWRITER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283b96bb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283b96bb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTime() {
		return Base.has(this.model, this.getResource(), TIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283b96bb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283b96bb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TIME);
	}

     /**
     * Get all values of property Time as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TIME);
	}
	
    /**
     * Get all values of property Time as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Time as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TIME);
	}

    /**
     * Get all values of property Time as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Time     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TIME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Time as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TIME, java.lang.String.class);
	}

    /**
     * Get all values of property Time     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTime() {
		return Base.getAll(this.model, this.getResource(), TIME, java.lang.String.class);
	}

    /**
     * Get all values of property Time as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTime_as() {
		return Base.getAll_as(this.model, this.getResource(), TIME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Time as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TIME, value);
	}
	
    /**
     * Adds a value to property Time as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TIME, value);
	}
    /**
     * Adds a value to property Time from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TIME, value);
	}
	
    /**
     * Adds a value to property Time from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTime(java.lang.String value) {
		Base.add(this.model, this.getResource(), TIME, value);
	}
  

    /**
     * Sets a value of property Time from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TIME, value);
	}
	
    /**
     * Sets a value of property Time from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TIME, value);
	}
    /**
     * Sets a value of property Time from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TIME, value);
	}
	
    /**
     * Sets a value of property Time from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTime(java.lang.String value) {
		Base.set(this.model, this.getResource(), TIME, value);
	}
  


    /**
     * Removes a value of property Time as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TIME, value);
	}
	
    /**
     * Removes a value of property Time as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TIME, value);
	}
    /**
     * Removes a value of property Time given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TIME, value);
	}
	
    /**
     * Removes a value of property Time given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTime(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TIME, value);
	}
  
    /**
     * Removes all values of property Time     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TIME);
	}
	
    /**
     * Removes all values of property Time	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTime() {
		Base.removeAll(this.model, this.getResource(), TIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e7359f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e7359f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTitle() {
		return Base.has(this.model, this.getResource(), TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e7359f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e7359f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TITLE);
	}

     /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TITLE);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TITLE);
	}

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TITLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, java.lang.String.class);
	}

    /**
     * Get all values of property Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTitle() {
		return Base.getAll(this.model, this.getResource(), TITLE, java.lang.String.class);
	}

    /**
     * Get all values of property Title as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Adds a value to property Title from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTitle(java.lang.String value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
  

    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Sets a value of property Title from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTitle(java.lang.String value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
  


    /**
     * Removes a value of property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Removes a value of property Title given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTitle(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
  
    /**
     * Removes all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TITLE);
	}
	
    /**
     * Removes all values of property Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTitle() {
		Base.removeAll(this.model, this.getResource(), TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a765e8c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRACKNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a765e8c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTrackNumber() {
		return Base.has(this.model, this.getResource(), TRACKNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a765e8c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRACKNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a765e8c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTrackNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRACKNUMBER);
	}

     /**
     * Get all values of property TrackNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTrackNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TRACKNUMBER);
	}
	
    /**
     * Get all values of property TrackNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTrackNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRACKNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TrackNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTrackNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TRACKNUMBER);
	}

    /**
     * Get all values of property TrackNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTrackNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TRACKNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TrackNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TRACKNUMBER, java.lang.String.class);
	}
	
    /**
     * Get all values of property TrackNumber as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTrackNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRACKNUMBER, java.lang.String.class);
	}

    /**
     * Get all values of property TrackNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTrackNumber() {
		return Base.getAll(this.model, this.getResource(), TRACKNUMBER, java.lang.String.class);
	}

    /**
     * Get all values of property TrackNumber as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTrackNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), TRACKNUMBER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property TrackNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Adds a value to property TrackNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTrackNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TRACKNUMBER, value);
	}
    /**
     * Adds a value to property TrackNumber from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Adds a value to property TrackNumber from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTrackNumber(java.lang.String value) {
		Base.add(this.model, this.getResource(), TRACKNUMBER, value);
	}
  

    /**
     * Sets a value of property TrackNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Sets a value of property TrackNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTrackNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRACKNUMBER, value);
	}
    /**
     * Sets a value of property TrackNumber from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Sets a value of property TrackNumber from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTrackNumber(java.lang.String value) {
		Base.set(this.model, this.getResource(), TRACKNUMBER, value);
	}
  


    /**
     * Removes a value of property TrackNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Removes a value of property TrackNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTrackNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRACKNUMBER, value);
	}
    /**
     * Removes a value of property TrackNumber given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Removes a value of property TrackNumber given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTrackNumber(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TRACKNUMBER, value);
	}
  
    /**
     * Removes all values of property TrackNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRACKNUMBER);
	}
	
    /**
     * Removes all values of property TrackNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTrackNumber() {
		Base.removeAll(this.model, this.getResource(), TRACKNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667f30f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUniqueFileIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNIQUEFILEIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667f30f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUniqueFileIdentifier() {
		return Base.has(this.model, this.getResource(), UNIQUEFILEIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667f30f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUniqueFileIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNIQUEFILEIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667f30f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUniqueFileIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNIQUEFILEIDENTIFIER);
	}

     /**
     * Get all values of property UniqueFileIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUniqueFileIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNIQUEFILEIDENTIFIER);
	}
	
    /**
     * Get all values of property UniqueFileIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUniqueFileIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIQUEFILEIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UniqueFileIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUniqueFileIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNIQUEFILEIDENTIFIER);
	}

    /**
     * Get all values of property UniqueFileIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUniqueFileIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UniqueFileIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllUniqueFileIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNIQUEFILEIDENTIFIER, java.lang.String.class);
	}
	
    /**
     * Get all values of property UniqueFileIdentifier as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllUniqueFileIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIQUEFILEIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property UniqueFileIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllUniqueFileIdentifier() {
		return Base.getAll(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property UniqueFileIdentifier as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllUniqueFileIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property UniqueFileIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUniqueFileIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNIQUEFILEIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property UniqueFileIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUniqueFileIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, value);
	}
    /**
     * Adds a value to property UniqueFileIdentifier from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUniqueFileIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, UNIQUEFILEIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property UniqueFileIdentifier from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUniqueFileIdentifier(java.lang.String value) {
		Base.add(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property UniqueFileIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUniqueFileIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNIQUEFILEIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property UniqueFileIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUniqueFileIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, value);
	}
    /**
     * Sets a value of property UniqueFileIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUniqueFileIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, UNIQUEFILEIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property UniqueFileIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUniqueFileIdentifier(java.lang.String value) {
		Base.set(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property UniqueFileIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUniqueFileIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNIQUEFILEIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property UniqueFileIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUniqueFileIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, value);
	}
    /**
     * Removes a value of property UniqueFileIdentifier given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUniqueFileIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, UNIQUEFILEIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property UniqueFileIdentifier given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUniqueFileIdentifier(java.lang.String value) {
		Base.remove(this.model, this.getResource(), UNIQUEFILEIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property UniqueFileIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUniqueFileIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNIQUEFILEIDENTIFIER);
	}
	
    /**
     * Removes all values of property UniqueFileIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUniqueFileIdentifier() {
		Base.removeAll(this.model, this.getResource(), UNIQUEFILEIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96e1111 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnsynchronizedTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96e1111 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnsynchronizedTextContent() {
		return Base.has(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96e1111 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnsynchronizedTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96e1111 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnsynchronizedTextContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT);
	}

     /**
     * Get all values of property UnsynchronizedTextContent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT);
	}
	
    /**
     * Get all values of property UnsynchronizedTextContent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnsynchronizedTextContent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT);
	}

    /**
     * Get all values of property UnsynchronizedTextContent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnsynchronizedTextContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllUnsynchronizedTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property UnsynchronizedTextContent as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllUnsynchronizedTextContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property UnsynchronizedTextContent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllUnsynchronizedTextContent() {
		return Base.getAll(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property UnsynchronizedTextContent as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllUnsynchronizedTextContent_as() {
		return Base.getAll_as(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property UnsynchronizedTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnsynchronizedTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, value);
	}
	
    /**
     * Adds a value to property UnsynchronizedTextContent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnsynchronizedTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, value);
	}
    /**
     * Adds a value to property UnsynchronizedTextContent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnsynchronizedTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, value);
	}
	
    /**
     * Adds a value to property UnsynchronizedTextContent from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnsynchronizedTextContent(java.lang.String value) {
		Base.add(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, value);
	}
  

    /**
     * Sets a value of property UnsynchronizedTextContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnsynchronizedTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, value);
	}
	
    /**
     * Sets a value of property UnsynchronizedTextContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnsynchronizedTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, value);
	}
    /**
     * Sets a value of property UnsynchronizedTextContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnsynchronizedTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, value);
	}
	
    /**
     * Sets a value of property UnsynchronizedTextContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnsynchronizedTextContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, value);
	}
  


    /**
     * Removes a value of property UnsynchronizedTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnsynchronizedTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, value);
	}
	
    /**
     * Removes a value of property UnsynchronizedTextContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnsynchronizedTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, value);
	}
    /**
     * Removes a value of property UnsynchronizedTextContent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnsynchronizedTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT, value);
	}
	
    /**
     * Removes a value of property UnsynchronizedTextContent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnsynchronizedTextContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT, value);
	}
  
    /**
     * Removes all values of property UnsynchronizedTextContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnsynchronizedTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENT);
	}
	
    /**
     * Removes all values of property UnsynchronizedTextContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnsynchronizedTextContent() {
		Base.removeAll(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23a0a87c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnsynchronizedTextContentDescriptor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23a0a87c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnsynchronizedTextContentDescriptor() {
		return Base.has(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23a0a87c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnsynchronizedTextContentDescriptor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23a0a87c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnsynchronizedTextContentDescriptor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}

     /**
     * Get all values of property UnsynchronizedTextContentDescriptor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContentDescriptor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}
	
    /**
     * Get all values of property UnsynchronizedTextContentDescriptor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContentDescriptor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnsynchronizedTextContentDescriptor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContentDescriptor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}

    /**
     * Get all values of property UnsynchronizedTextContentDescriptor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnsynchronizedTextContentDescriptor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnsynchronizedTextContentDescriptor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllUnsynchronizedTextContentDescriptor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, java.lang.String.class);
	}
	
    /**
     * Get all values of property UnsynchronizedTextContentDescriptor as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllUnsynchronizedTextContentDescriptor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, java.lang.String.class);
	}

    /**
     * Get all values of property UnsynchronizedTextContentDescriptor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllUnsynchronizedTextContentDescriptor() {
		return Base.getAll(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, java.lang.String.class);
	}

    /**
     * Get all values of property UnsynchronizedTextContentDescriptor as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllUnsynchronizedTextContentDescriptor_as() {
		return Base.getAll_as(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, java.lang.String.class);
	}
 
    /**
     * Adds a value to property UnsynchronizedTextContentDescriptor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnsynchronizedTextContentDescriptor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
	
    /**
     * Adds a value to property UnsynchronizedTextContentDescriptor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnsynchronizedTextContentDescriptor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
    /**
     * Adds a value to property UnsynchronizedTextContentDescriptor from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnsynchronizedTextContentDescriptor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
	
    /**
     * Adds a value to property UnsynchronizedTextContentDescriptor from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnsynchronizedTextContentDescriptor(java.lang.String value) {
		Base.add(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
  

    /**
     * Sets a value of property UnsynchronizedTextContentDescriptor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnsynchronizedTextContentDescriptor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
	
    /**
     * Sets a value of property UnsynchronizedTextContentDescriptor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnsynchronizedTextContentDescriptor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
    /**
     * Sets a value of property UnsynchronizedTextContentDescriptor from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnsynchronizedTextContentDescriptor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
	
    /**
     * Sets a value of property UnsynchronizedTextContentDescriptor from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnsynchronizedTextContentDescriptor(java.lang.String value) {
		Base.set(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
  


    /**
     * Removes a value of property UnsynchronizedTextContentDescriptor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnsynchronizedTextContentDescriptor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
	
    /**
     * Removes a value of property UnsynchronizedTextContentDescriptor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnsynchronizedTextContentDescriptor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
    /**
     * Removes a value of property UnsynchronizedTextContentDescriptor given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnsynchronizedTextContentDescriptor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
	
    /**
     * Removes a value of property UnsynchronizedTextContentDescriptor given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnsynchronizedTextContentDescriptor(java.lang.String value) {
		Base.remove(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR, value);
	}
  
    /**
     * Removes all values of property UnsynchronizedTextContentDescriptor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnsynchronizedTextContentDescriptor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}
	
    /**
     * Removes all values of property UnsynchronizedTextContentDescriptor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnsynchronizedTextContentDescriptor() {
		Base.removeAll(this.model, this.getResource(), UNSYNCHRONIZEDTEXTCONTENTDESCRIPTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f96093 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUserDefinedFrame(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USERDEFINEDFRAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f96093 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUserDefinedFrame() {
		return Base.has(this.model, this.getResource(), USERDEFINEDFRAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f96093 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUserDefinedFrame(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USERDEFINEDFRAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f96093 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUserDefinedFrame( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USERDEFINEDFRAME);
	}

     /**
     * Get all values of property UserDefinedFrame as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUserDefinedFrame_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, USERDEFINEDFRAME);
	}
	
    /**
     * Get all values of property UserDefinedFrame as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUserDefinedFrame_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USERDEFINEDFRAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UserDefinedFrame as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUserDefinedFrame_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), USERDEFINEDFRAME);
	}

    /**
     * Get all values of property UserDefinedFrame as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUserDefinedFrame_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), USERDEFINEDFRAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UserDefinedFrame     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<UserDefinedFrame> getAllUserDefinedFrame(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, USERDEFINEDFRAME, UserDefinedFrame.class);
	}
	
    /**
     * Get all values of property UserDefinedFrame as a ReactorResult of UserDefinedFrame 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<UserDefinedFrame> getAllUserDefinedFrame_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USERDEFINEDFRAME, UserDefinedFrame.class);
	}

    /**
     * Get all values of property UserDefinedFrame     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<UserDefinedFrame> getAllUserDefinedFrame() {
		return Base.getAll(this.model, this.getResource(), USERDEFINEDFRAME, UserDefinedFrame.class);
	}

    /**
     * Get all values of property UserDefinedFrame as a ReactorResult of UserDefinedFrame 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<UserDefinedFrame> getAllUserDefinedFrame_as() {
		return Base.getAll_as(this.model, this.getResource(), USERDEFINEDFRAME, UserDefinedFrame.class);
	}
 
    /**
     * Adds a value to property UserDefinedFrame as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUserDefinedFrame( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, USERDEFINEDFRAME, value);
	}
	
    /**
     * Adds a value to property UserDefinedFrame as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUserDefinedFrame( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), USERDEFINEDFRAME, value);
	}
    /**
     * Adds a value to property UserDefinedFrame from an instance of UserDefinedFrame 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUserDefinedFrame(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserDefinedFrame value) {
		Base.add(model, instanceResource, USERDEFINEDFRAME, value);
	}
	
    /**
     * Adds a value to property UserDefinedFrame from an instance of UserDefinedFrame 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUserDefinedFrame(UserDefinedFrame value) {
		Base.add(this.model, this.getResource(), USERDEFINEDFRAME, value);
	}
  

    /**
     * Sets a value of property UserDefinedFrame from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUserDefinedFrame( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USERDEFINEDFRAME, value);
	}
	
    /**
     * Sets a value of property UserDefinedFrame from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUserDefinedFrame( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USERDEFINEDFRAME, value);
	}
    /**
     * Sets a value of property UserDefinedFrame from an instance of UserDefinedFrame 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUserDefinedFrame(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserDefinedFrame value) {
		Base.set(model, instanceResource, USERDEFINEDFRAME, value);
	}
	
    /**
     * Sets a value of property UserDefinedFrame from an instance of UserDefinedFrame 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUserDefinedFrame(UserDefinedFrame value) {
		Base.set(this.model, this.getResource(), USERDEFINEDFRAME, value);
	}
  


    /**
     * Removes a value of property UserDefinedFrame as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUserDefinedFrame( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USERDEFINEDFRAME, value);
	}
	
    /**
     * Removes a value of property UserDefinedFrame as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUserDefinedFrame( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USERDEFINEDFRAME, value);
	}
    /**
     * Removes a value of property UserDefinedFrame given as an instance of UserDefinedFrame 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUserDefinedFrame(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserDefinedFrame value) {
		Base.remove(model, instanceResource, USERDEFINEDFRAME, value);
	}
	
    /**
     * Removes a value of property UserDefinedFrame given as an instance of UserDefinedFrame 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUserDefinedFrame(UserDefinedFrame value) {
		Base.remove(this.model, this.getResource(), USERDEFINEDFRAME, value);
	}
  
    /**
     * Removes all values of property UserDefinedFrame     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUserDefinedFrame( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USERDEFINEDFRAME);
	}
	
    /**
     * Removes all values of property UserDefinedFrame	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUserDefinedFrame() {
		Base.removeAll(this.model, this.getResource(), USERDEFINEDFRAME);
	}
 }