/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 15/10/09 2:48 PM
 */
package au.edu.usq.fascinator.common.nid3;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ContentCreated </li>
 *   <li> Contributor </li>
 *   <li> Creator </li>
 *   <li> Elements1_1Creator </li>
 *   <li> FileOwner </li>
 *   <li> Identifier </li>
 *   <li> Language </li>
 *   <li> NieTitle </li>
 *   <li> Part </li>
 *   <li> PlainTextContent </li>
 *   <li> Publisher </li>
 *   <li> Rights </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15/10/09 2:48 PM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated */
    @SuppressWarnings("hiding")
	public static final URI CONTENTCREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor */
    @SuppressWarnings("hiding")
	public static final URI CONTRIBUTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator */
    @SuppressWarnings("hiding")
	public static final URI CREATOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator",false);

    /** http://purl.org/dc/elements/1.1/creator */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1CREATOR = new URIImpl("http://purl.org/dc/elements/1.1/creator",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileOwner */
    @SuppressWarnings("hiding")
	public static final URI FILEOWNER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileOwner",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier */
    @SuppressWarnings("hiding")
	public static final URI IDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language */
    @SuppressWarnings("hiding")
	public static final URI LANGUAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title */
    @SuppressWarnings("hiding")
	public static final URI NIETITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart */
    @SuppressWarnings("hiding")
	public static final URI PART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent */
    @SuppressWarnings("hiding")
	public static final URI PLAINTEXTCONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher */
    @SuppressWarnings("hiding")
	public static final URI PUBLISHER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher",false);

    /** http://purl.org/dc/elements/1.1/rights */
    @SuppressWarnings("hiding")
	public static final URI RIGHTS = new URIImpl("http://purl.org/dc/elements/1.1/rights",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator",false),
      new URIImpl("http://purl.org/dc/elements/1.1/creator",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileOwner",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher",false),
      new URIImpl("http://purl.org/dc/elements/1.1/rights",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ContentCreated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContentCreated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONTENTCREATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ContentCreated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContentCreated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONTENTCREATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ContentCreated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContentCreated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONTENTCREATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONTRIBUTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONTRIBUTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONTRIBUTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Creator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ELEMENTS1_1CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Creator_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Creator' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Creator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ELEMENTS1_1CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Identifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.IDENTIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Identifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.IDENTIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Identifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.IDENTIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Language' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLanguage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LANGUAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Language' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLanguage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LANGUAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Language' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLanguage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LANGUAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NieTitle' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNieTitle_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NIETITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NieTitle' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNieTitle_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NIETITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NieTitle' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNieTitle_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NIETITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PlainTextContent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPlainTextContent_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PLAINTEXTCONTENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PlainTextContent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPlainTextContent_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PLAINTEXTCONTENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PlainTextContent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPlainTextContent_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PLAINTEXTCONTENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Publisher' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPublisher_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PUBLISHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Publisher' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPublisher_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PUBLISHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Publisher' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPublisher_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PUBLISHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Rights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RIGHTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Rights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RIGHTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Rights' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RIGHTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4677bcd5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4677bcd5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentCreated() {
		return Base.has(this.model, this.getResource(), CONTENTCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4677bcd5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4677bcd5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTCREATED);
	}

     /**
     * Get all values of property ContentCreated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTENTCREATED);
	}
	
    /**
     * Get all values of property ContentCreated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTCREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContentCreated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENTCREATED);
	}

    /**
     * Get all values of property ContentCreated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTCREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContentCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTENTCREATED, Thing.class);
	}
	
    /**
     * Get all values of property ContentCreated as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllContentCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTCREATED, Thing.class);
	}

    /**
     * Get all values of property ContentCreated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllContentCreated() {
		return Base.getAll(this.model, this.getResource(), CONTENTCREATED, Thing.class);
	}

    /**
     * Get all values of property ContentCreated as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllContentCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTCREATED, Thing.class);
	}
 
    /**
     * Adds a value to property ContentCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Adds a value to property ContentCreated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContentCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTENTCREATED, value);
	}
    /**
     * Adds a value to property ContentCreated from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Adds a value to property ContentCreated from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContentCreated(Thing value) {
		Base.add(this.model, this.getResource(), CONTENTCREATED, value);
	}
  

    /**
     * Sets a value of property ContentCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Sets a value of property ContentCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTCREATED, value);
	}
    /**
     * Sets a value of property ContentCreated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Sets a value of property ContentCreated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentCreated(Thing value) {
		Base.set(this.model, this.getResource(), CONTENTCREATED, value);
	}
  


    /**
     * Removes a value of property ContentCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Removes a value of property ContentCreated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTCREATED, value);
	}
    /**
     * Removes a value of property ContentCreated given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Removes a value of property ContentCreated given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentCreated(Thing value) {
		Base.remove(this.model, this.getResource(), CONTENTCREATED, value);
	}
  
    /**
     * Removes all values of property ContentCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTCREATED);
	}
	
    /**
     * Removes all values of property ContentCreated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentCreated() {
		Base.removeAll(this.model, this.getResource(), CONTENTCREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fd3c2fa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fd3c2fa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContributor() {
		return Base.has(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fd3c2fa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fd3c2fa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContributor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRIBUTOR);
	}

     /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRIBUTOR, Thing.class);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllContributor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, Thing.class);
	}

    /**
     * Get all values of property Contributor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllContributor() {
		return Base.getAll(this.model, this.getResource(), CONTRIBUTOR, Thing.class);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllContributor_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, Thing.class);
	}
 
    /**
     * Adds a value to property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Adds a value to property Contributor from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContributor(Thing value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  

    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Sets a value of property Contributor from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContributor(Thing value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  


    /**
     * Removes a value of property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Removes a value of property Contributor given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContributor(Thing value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  
    /**
     * Removes all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Removes all values of property Contributor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContributor() {
		Base.removeAll(this.model, this.getResource(), CONTRIBUTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c4f6f6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c4f6f6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreator() {
		return Base.has(this.model, this.getResource(), CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c4f6f6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c4f6f6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOR);
	}

     /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATOR);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATOR);
	}

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATOR, Thing.class);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCreator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, Thing.class);
	}

    /**
     * Get all values of property Creator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCreator() {
		return Base.getAll(this.model, this.getResource(), CREATOR, Thing.class);
	}

    /**
     * Get all values of property Creator as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCreator_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, Thing.class);
	}
 
    /**
     * Adds a value to property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Adds a value to property Creator from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCreator(Thing value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
  

    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Sets a value of property Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreator(Thing value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
  


    /**
     * Removes a value of property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Removes a value of property Creator given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreator(Thing value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
  
    /**
     * Removes all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATOR);
	}
	
    /**
     * Removes all values of property Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreator() {
		Base.removeAll(this.model, this.getResource(), CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7016269c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7016269c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Creator() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7016269c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7016269c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Creator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}

     /**
     * Get all values of property Elements1_1Creator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1CREATOR);
	}
	
    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Creator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}

    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1CREATOR, Thing.class);
	}
	
    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllElements1_1Creator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1CREATOR, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Creator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllElements1_1Creator() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1CREATOR, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllElements1_1Creator_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1CREATOR, Thing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Adds a value to property Elements1_1Creator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Creator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
    /**
     * Adds a value to property Elements1_1Creator from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Adds a value to property Elements1_1Creator from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Creator(Thing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
  

    /**
     * Sets a value of property Elements1_1Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Sets a value of property Elements1_1Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Creator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
    /**
     * Sets a value of property Elements1_1Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Sets a value of property Elements1_1Creator from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Creator(Thing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
  


    /**
     * Removes a value of property Elements1_1Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Removes a value of property Elements1_1Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Creator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
    /**
     * Removes a value of property Elements1_1Creator given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Removes a value of property Elements1_1Creator given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Creator(Thing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
  
    /**
     * Removes all values of property Elements1_1Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1CREATOR);
	}
	
    /**
     * Removes all values of property Elements1_1Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Creator() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cd4927f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cd4927f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileOwner() {
		return Base.has(this.model, this.getResource(), FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cd4927f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cd4927f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileOwner( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILEOWNER);
	}

     /**
     * Get all values of property FileOwner as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILEOWNER);
	}
	
    /**
     * Get all values of property FileOwner as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILEOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileOwner as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILEOWNER);
	}

    /**
     * Get all values of property FileOwner as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileOwner_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILEOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Contact> getAllFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILEOWNER, Contact.class);
	}
	
    /**
     * Get all values of property FileOwner as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Contact> getAllFileOwner_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILEOWNER, Contact.class);
	}

    /**
     * Get all values of property FileOwner     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Contact> getAllFileOwner() {
		return Base.getAll(this.model, this.getResource(), FILEOWNER, Contact.class);
	}

    /**
     * Get all values of property FileOwner as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Contact> getAllFileOwner_as() {
		return Base.getAll_as(this.model, this.getResource(), FILEOWNER, Contact.class);
	}
 
    /**
     * Adds a value to property FileOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Adds a value to property FileOwner as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILEOWNER, value);
	}
    /**
     * Adds a value to property FileOwner from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.add(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Adds a value to property FileOwner from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileOwner(Contact value) {
		Base.add(this.model, this.getResource(), FILEOWNER, value);
	}
  

    /**
     * Sets a value of property FileOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Sets a value of property FileOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILEOWNER, value);
	}
    /**
     * Sets a value of property FileOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.set(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Sets a value of property FileOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileOwner(Contact value) {
		Base.set(this.model, this.getResource(), FILEOWNER, value);
	}
  


    /**
     * Removes a value of property FileOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Removes a value of property FileOwner as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILEOWNER, value);
	}
    /**
     * Removes a value of property FileOwner given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Contact value) {
		Base.remove(model, instanceResource, FILEOWNER, value);
	}
	
    /**
     * Removes a value of property FileOwner given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileOwner(Contact value) {
		Base.remove(this.model, this.getResource(), FILEOWNER, value);
	}
  
    /**
     * Removes all values of property FileOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILEOWNER);
	}
	
    /**
     * Removes all values of property FileOwner	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileOwner() {
		Base.removeAll(this.model, this.getResource(), FILEOWNER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d50b06b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d50b06b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIdentifier() {
		return Base.has(this.model, this.getResource(), IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d50b06b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d50b06b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IDENTIFIER);
	}

     /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IDENTIFIER);
	}
	
    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IDENTIFIER);
	}

    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IDENTIFIER, Thing.class);
	}
	
    /**
     * Get all values of property Identifier as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property Identifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllIdentifier() {
		return Base.getAll(this.model, this.getResource(), IDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property Identifier as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), IDENTIFIER, Thing.class);
	}
 
    /**
     * Adds a value to property Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Identifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Adds a value to property Identifier from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Identifier from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIdentifier(Thing value) {
		Base.add(this.model, this.getResource(), IDENTIFIER, value);
	}
  

    /**
     * Sets a value of property Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Sets a value of property Identifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Identifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIdentifier(Thing value) {
		Base.set(this.model, this.getResource(), IDENTIFIER, value);
	}
  


    /**
     * Removes a value of property Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Identifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Removes a value of property Identifier given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Identifier given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIdentifier(Thing value) {
		Base.remove(this.model, this.getResource(), IDENTIFIER, value);
	}
  
    /**
     * Removes all values of property Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IDENTIFIER);
	}
	
    /**
     * Removes all values of property Identifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIdentifier() {
		Base.removeAll(this.model, this.getResource(), IDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@383bdcbc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@383bdcbc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLanguage() {
		return Base.has(this.model, this.getResource(), LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@383bdcbc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@383bdcbc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLanguage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LANGUAGE);
	}

     /**
     * Get all values of property Language as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLanguage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LANGUAGE);
	}
	
    /**
     * Get all values of property Language as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLanguage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Language as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLanguage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LANGUAGE);
	}

    /**
     * Get all values of property Language as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLanguage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LANGUAGE, Thing.class);
	}
	
    /**
     * Get all values of property Language as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllLanguage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LANGUAGE, Thing.class);
	}

    /**
     * Get all values of property Language     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllLanguage() {
		return Base.getAll(this.model, this.getResource(), LANGUAGE, Thing.class);
	}

    /**
     * Get all values of property Language as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllLanguage_as() {
		return Base.getAll_as(this.model, this.getResource(), LANGUAGE, Thing.class);
	}
 
    /**
     * Adds a value to property Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Language as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLanguage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LANGUAGE, value);
	}
    /**
     * Adds a value to property Language from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Language from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLanguage(Thing value) {
		Base.add(this.model, this.getResource(), LANGUAGE, value);
	}
  

    /**
     * Sets a value of property Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLanguage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LANGUAGE, value);
	}
    /**
     * Sets a value of property Language from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Language from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLanguage(Thing value) {
		Base.set(this.model, this.getResource(), LANGUAGE, value);
	}
  


    /**
     * Removes a value of property Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Language as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLanguage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LANGUAGE, value);
	}
    /**
     * Removes a value of property Language given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Language given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLanguage(Thing value) {
		Base.remove(this.model, this.getResource(), LANGUAGE, value);
	}
  
    /**
     * Removes all values of property Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LANGUAGE);
	}
	
    /**
     * Removes all values of property Language	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLanguage() {
		Base.removeAll(this.model, this.getResource(), LANGUAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575830c4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIETITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575830c4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieTitle() {
		return Base.has(this.model, this.getResource(), NIETITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575830c4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIETITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575830c4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIETITLE);
	}

     /**
     * Get all values of property NieTitle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NIETITLE);
	}
	
    /**
     * Get all values of property NieTitle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIETITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NieTitle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NIETITLE);
	}

    /**
     * Get all values of property NieTitle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NIETITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NieTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NIETITLE, Thing.class);
	}
	
    /**
     * Get all values of property NieTitle as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllNieTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIETITLE, Thing.class);
	}

    /**
     * Get all values of property NieTitle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllNieTitle() {
		return Base.getAll(this.model, this.getResource(), NIETITLE, Thing.class);
	}

    /**
     * Get all values of property NieTitle as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllNieTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), NIETITLE, Thing.class);
	}
 
    /**
     * Adds a value to property NieTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Adds a value to property NieTitle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNieTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NIETITLE, value);
	}
    /**
     * Adds a value to property NieTitle from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Adds a value to property NieTitle from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNieTitle(Thing value) {
		Base.add(this.model, this.getResource(), NIETITLE, value);
	}
  

    /**
     * Sets a value of property NieTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Sets a value of property NieTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIETITLE, value);
	}
    /**
     * Sets a value of property NieTitle from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Sets a value of property NieTitle from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieTitle(Thing value) {
		Base.set(this.model, this.getResource(), NIETITLE, value);
	}
  


    /**
     * Removes a value of property NieTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Removes a value of property NieTitle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIETITLE, value);
	}
    /**
     * Removes a value of property NieTitle given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Removes a value of property NieTitle given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieTitle(Thing value) {
		Base.remove(this.model, this.getResource(), NIETITLE, value);
	}
  
    /**
     * Removes all values of property NieTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIETITLE);
	}
	
    /**
     * Removes all values of property NieTitle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieTitle() {
		Base.removeAll(this.model, this.getResource(), NIETITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5dca01f0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5dca01f0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPart() {
		return Base.has(this.model, this.getResource(), PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5dca01f0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5dca01f0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PART);
	}

     /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PART);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PART);
	}

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PART, Thing.class);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, Thing.class);
	}

    /**
     * Get all values of property Part     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPart() {
		return Base.getAll(this.model, this.getResource(), PART, Thing.class);
	}

    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPart_as() {
		return Base.getAll_as(this.model, this.getResource(), PART, Thing.class);
	}
 
    /**
     * Adds a value to property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
    /**
     * Adds a value to property Part from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPart(Thing value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
  

    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPart(Thing value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
  


    /**
     * Removes a value of property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
    /**
     * Removes a value of property Part given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePart(Thing value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
  
    /**
     * Removes all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PART);
	}
	
    /**
     * Removes all values of property Part	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPart() {
		Base.removeAll(this.model, this.getResource(), PART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6781a7dc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLAINTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6781a7dc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPlainTextContent() {
		return Base.has(this.model, this.getResource(), PLAINTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6781a7dc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLAINTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6781a7dc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPlainTextContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLAINTEXTCONTENT);
	}

     /**
     * Get all values of property PlainTextContent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlainTextContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PLAINTEXTCONTENT);
	}
	
    /**
     * Get all values of property PlainTextContent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlainTextContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAINTEXTCONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PlainTextContent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlainTextContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PLAINTEXTCONTENT);
	}

    /**
     * Get all values of property PlainTextContent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlainTextContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PLAINTEXTCONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PlainTextContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PLAINTEXTCONTENT, Thing.class);
	}
	
    /**
     * Get all values of property PlainTextContent as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPlainTextContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAINTEXTCONTENT, Thing.class);
	}

    /**
     * Get all values of property PlainTextContent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPlainTextContent() {
		return Base.getAll(this.model, this.getResource(), PLAINTEXTCONTENT, Thing.class);
	}

    /**
     * Get all values of property PlainTextContent as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPlainTextContent_as() {
		return Base.getAll_as(this.model, this.getResource(), PLAINTEXTCONTENT, Thing.class);
	}
 
    /**
     * Adds a value to property PlainTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Adds a value to property PlainTextContent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPlainTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
    /**
     * Adds a value to property PlainTextContent from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Adds a value to property PlainTextContent from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPlainTextContent(Thing value) {
		Base.add(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
  

    /**
     * Sets a value of property PlainTextContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Sets a value of property PlainTextContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPlainTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
    /**
     * Sets a value of property PlainTextContent from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Sets a value of property PlainTextContent from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPlainTextContent(Thing value) {
		Base.set(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
  


    /**
     * Removes a value of property PlainTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Removes a value of property PlainTextContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePlainTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
    /**
     * Removes a value of property PlainTextContent given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Removes a value of property PlainTextContent given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePlainTextContent(Thing value) {
		Base.remove(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
  
    /**
     * Removes all values of property PlainTextContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLAINTEXTCONTENT);
	}
	
    /**
     * Removes all values of property PlainTextContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPlainTextContent() {
		Base.removeAll(this.model, this.getResource(), PLAINTEXTCONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52ac5024 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52ac5024 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPublisher() {
		return Base.has(this.model, this.getResource(), PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52ac5024 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52ac5024 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPublisher( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBLISHER);
	}

     /**
     * Get all values of property Publisher as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBLISHER);
	}
	
    /**
     * Get all values of property Publisher as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Publisher as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBLISHER);
	}

    /**
     * Get all values of property Publisher as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBLISHER, Thing.class);
	}
	
    /**
     * Get all values of property Publisher as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPublisher_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHER, Thing.class);
	}

    /**
     * Get all values of property Publisher     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPublisher() {
		return Base.getAll(this.model, this.getResource(), PUBLISHER, Thing.class);
	}

    /**
     * Get all values of property Publisher as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPublisher_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHER, Thing.class);
	}
 
    /**
     * Adds a value to property Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Publisher as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Adds a value to property Publisher from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Publisher from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPublisher(Thing value) {
		Base.add(this.model, this.getResource(), PUBLISHER, value);
	}
  

    /**
     * Sets a value of property Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Sets a value of property Publisher from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Publisher from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPublisher(Thing value) {
		Base.set(this.model, this.getResource(), PUBLISHER, value);
	}
  


    /**
     * Removes a value of property Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Publisher as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Removes a value of property Publisher given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Publisher given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePublisher(Thing value) {
		Base.remove(this.model, this.getResource(), PUBLISHER, value);
	}
  
    /**
     * Removes all values of property Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBLISHER);
	}
	
    /**
     * Removes all values of property Publisher	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPublisher() {
		Base.removeAll(this.model, this.getResource(), PUBLISHER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7766d31c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7766d31c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRights() {
		return Base.has(this.model, this.getResource(), RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7766d31c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7766d31c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRights( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RIGHTS);
	}

     /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RIGHTS);
	}
	
    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RIGHTS);
	}

    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Rights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RIGHTS, Thing.class);
	}
	
    /**
     * Get all values of property Rights as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRights_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RIGHTS, Thing.class);
	}

    /**
     * Get all values of property Rights     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRights() {
		return Base.getAll(this.model, this.getResource(), RIGHTS, Thing.class);
	}

    /**
     * Get all values of property Rights as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRights_as() {
		return Base.getAll_as(this.model, this.getResource(), RIGHTS, Thing.class);
	}
 
    /**
     * Adds a value to property Rights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Adds a value to property Rights as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Adds a value to property Rights from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Adds a value to property Rights from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRights(Thing value) {
		Base.add(this.model, this.getResource(), RIGHTS, value);
	}
  

    /**
     * Sets a value of property Rights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Sets a value of property Rights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Sets a value of property Rights from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Sets a value of property Rights from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRights(Thing value) {
		Base.set(this.model, this.getResource(), RIGHTS, value);
	}
  


    /**
     * Removes a value of property Rights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Removes a value of property Rights as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Removes a value of property Rights given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Removes a value of property Rights given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRights(Thing value) {
		Base.remove(this.model, this.getResource(), RIGHTS, value);
	}
  
    /**
     * Removes all values of property Rights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RIGHTS);
	}
	
    /**
     * Removes all values of property Rights	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRights() {
		Base.removeAll(this.model, this.getResource(), RIGHTS);
	}
 }